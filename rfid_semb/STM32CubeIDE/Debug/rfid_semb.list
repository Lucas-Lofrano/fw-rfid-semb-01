
rfid_semb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004638  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080046f8  080046f8  000056f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004840  08004840  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004840  08004840  00005840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004848  08004848  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004848  08004848  00005848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800484c  0800484c  0000584c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004850  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  0800485c  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  0800485c  00006204  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00013de4  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000006f  00000000  00000000  00019e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00012f3a  00000000  00000000  00019e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000025b5  00000000  00000000  0002cdc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001130  00000000  00000000  0002f378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000acf8f  00000000  00000000  000304a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000d94  00000000  00000000  000dd437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001a349  00000000  00000000  000de1cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f8514  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f0c  00000000  00000000  000f8558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080046e0 	.word	0x080046e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080046e0 	.word	0x080046e0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	@ (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000620:	480d      	ldr	r0, [pc, #52]	@ (8000658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000622:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000624:	f000 fc34 	bl	8000e90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000628:	480c      	ldr	r0, [pc, #48]	@ (800065c <LoopForever+0x6>)
  ldr r1, =_edata
 800062a:	490d      	ldr	r1, [pc, #52]	@ (8000660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800062c:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <LoopForever+0xe>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000640:	4c0a      	ldr	r4, [pc, #40]	@ (800066c <LoopForever+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064e:	f004 f823 	bl	8004698 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000652:	f000 f80e 	bl	8000672 <main>

08000656 <LoopForever>:

LoopForever:
  b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   r0, =_estack
 8000658:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000664:	08004850 	.word	0x08004850
  ldr r2, =_sbss
 8000668:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800066c:	20000204 	.word	0x20000204

08000670 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC_COMP1_IRQHandler>

08000672 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fc37 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f80e 	bl	800069a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f9ad 	bl	80009dc <MX_GPIO_Init>
  MX_LPUART2_UART_Init();
 8000682:	f000 f853 	bl	800072c <MX_LPUART2_UART_Init>
  MX_RTC_Init();
 8000686:	f000 f89d 	bl	80007c4 <MX_RTC_Init>
  MX_SPI1_Init();
 800068a:	f000 f8cb 	bl	8000824 <MX_SPI1_Init>
  MX_SPI2_Init();
 800068e:	f000 f907 	bl	80008a0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000692:	f000 f943 	bl	800091c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	e7fd      	b.n	8000696 <main+0x24>

0800069a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069a:	b590      	push	{r4, r7, lr}
 800069c:	b097      	sub	sp, #92	@ 0x5c
 800069e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a0:	2410      	movs	r4, #16
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	0018      	movs	r0, r3
 80006a6:	2348      	movs	r3, #72	@ 0x48
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f003 ffec 	bl	8004688 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	003b      	movs	r3, r7
 80006b2:	0018      	movs	r0, r3
 80006b4:	2310      	movs	r3, #16
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	f003 ffe5 	bl	8004688 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006be:	2380      	movs	r3, #128	@ 0x80
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 feca 	bl	800145c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	220a      	movs	r2, #10
 80006cc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2280      	movs	r2, #128	@ 0x80
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2240      	movs	r2, #64	@ 0x40
 80006da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2201      	movs	r2, #1
 80006e0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 ff22 	bl	8001534 <HAL_RCC_OscConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006f4:	f000 fa0a 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	003b      	movs	r3, r7
 80006fa:	2207      	movs	r2, #7
 80006fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fe:	003b      	movs	r3, r7
 8000700:	2201      	movs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	003b      	movs	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000710:	003b      	movs	r3, r7
 8000712:	2101      	movs	r1, #1
 8000714:	0018      	movs	r0, r3
 8000716:	f001 faf3 	bl	8001d00 <HAL_RCC_ClockConfig>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800071e:	f000 f9f5 	bl	8000b0c <Error_Handler>
  }
}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b017      	add	sp, #92	@ 0x5c
 8000728:	bd90      	pop	{r4, r7, pc}
	...

0800072c <MX_LPUART2_UART_Init>:
  * @brief LPUART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART2_Init 0 */

  /* USER CODE BEGIN LPUART2_Init 1 */

  /* USER CODE END LPUART2_Init 1 */
  hlpuart2.Instance = LPUART2;
 8000730:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000732:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <MX_LPUART2_UART_Init+0x90>)
 8000734:	601a      	str	r2, [r3, #0]
  hlpuart2.Init.BaudRate = 209700;
 8000736:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <MX_LPUART2_UART_Init+0x94>)
 800073a:	605a      	str	r2, [r3, #4]
  hlpuart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hlpuart2.Init.StopBits = UART_STOPBITS_1;
 8000742:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hlpuart2.Init.Parity = UART_PARITY_NONE;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hlpuart2.Init.Mode = UART_MODE_TX_RX;
 800074e:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000750:	220c      	movs	r2, #12
 8000752:	615a      	str	r2, [r3, #20]
  hlpuart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hlpuart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  hlpuart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart2.FifoMode = UART_FIFOMODE_DISABLE;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000768:	2200      	movs	r2, #0
 800076a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart2) != HAL_OK)
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 800076e:	0018      	movs	r0, r3
 8000770:	f003 fa2c 	bl	8003bcc <HAL_UART_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_LPUART2_UART_Init+0x50>
  {
    Error_Handler();
 8000778:	f000 f9c8 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 800077e:	2100      	movs	r1, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f003 fea1 	bl	80044c8 <HAL_UARTEx_SetTxFifoThreshold>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_LPUART2_UART_Init+0x62>
  {
    Error_Handler();
 800078a:	f000 f9bf 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000790:	2100      	movs	r1, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f003 fed8 	bl	8004548 <HAL_UARTEx_SetRxFifoThreshold>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_LPUART2_UART_Init+0x74>
  {
    Error_Handler();
 800079c:	f000 f9b6 	bl	8000b0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart2) != HAL_OK)
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f003 fe56 	bl	8004454 <HAL_UARTEx_DisableFifoMode>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_LPUART2_UART_Init+0x84>
  {
    Error_Handler();
 80007ac:	f000 f9ae 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART2_Init 2 */

  /* USER CODE END LPUART2_Init 2 */

}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	20000028 	.word	0x20000028
 80007bc:	40008400 	.word	0x40008400
 80007c0:	00033324 	.word	0x00033324

080007c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_RTC_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <MX_RTC_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_RTC_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_RTC_Init+0x58>)
 80007d6:	227f      	movs	r2, #127	@ 0x7f
 80007d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_RTC_Init+0x58>)
 80007dc:	22ff      	movs	r2, #255	@ 0xff
 80007de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_RTC_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <MX_RTC_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007ec:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_RTC_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007f2:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <MX_RTC_Init+0x58>)
 80007f4:	2280      	movs	r2, #128	@ 0x80
 80007f6:	05d2      	lsls	r2, r2, #23
 80007f8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_RTC_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_RTC_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000806:	4b05      	ldr	r3, [pc, #20]	@ (800081c <MX_RTC_Init+0x58>)
 8000808:	0018      	movs	r0, r3
 800080a:	f002 fb59 	bl	8002ec0 <HAL_RTC_Init>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f97b 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000bc 	.word	0x200000bc
 8000820:	40002800 	.word	0x40002800

08000824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_SPI1_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <MX_SPI1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000830:	2282      	movs	r2, #130	@ 0x82
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_SPI1_Init+0x74>)
 800083e:	22c0      	movs	r2, #192	@ 0xc0
 8000840:	0092      	lsls	r2, r2, #2
 8000842:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	02d2      	lsls	r2, r2, #11
 8000856:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_SPI1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_SPI1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000872:	2207      	movs	r2, #7
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_SPI1_Init+0x74>)
 800087e:	2208      	movs	r2, #8
 8000880:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000882:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000884:	0018      	movs	r0, r3
 8000886:	f002 fc13 	bl	80030b0 <HAL_SPI_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f93d 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000ec 	.word	0x200000ec
 800089c:	40013000 	.word	0x40013000

080008a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <MX_SPI2_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008ac:	2282      	movs	r2, #130	@ 0x82
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80008b8:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008ba:	22c0      	movs	r2, #192	@ 0xc0
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008ce:	2280      	movs	r2, #128	@ 0x80
 80008d0:	0092      	lsls	r2, r2, #2
 80008d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008ee:	2207      	movs	r2, #7
 80008f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008fa:	2208      	movs	r2, #8
 80008fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008fe:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <MX_SPI2_Init+0x74>)
 8000900:	0018      	movs	r0, r3
 8000902:	f002 fbd5 	bl	80030b0 <HAL_SPI_Init>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f8ff 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000150 	.word	0x20000150
 8000918:	40003800 	.word	0x40003800

0800091c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	231c      	movs	r3, #28
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	0018      	movs	r0, r3
 8000928:	230c      	movs	r3, #12
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f003 feab 	bl	8004688 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000932:	003b      	movs	r3, r7
 8000934:	0018      	movs	r0, r3
 8000936:	231c      	movs	r3, #28
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f003 fea4 	bl	8004688 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000940:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	05d2      	lsls	r2, r2, #23
 8000946:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000948:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000954:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 8000956:	2201      	movs	r2, #1
 8000958:	4252      	negs	r2, r2
 800095a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000968:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 800096a:	0018      	movs	r0, r3
 800096c:	f002 fc4e 	bl	800320c <HAL_TIM_PWM_Init>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000974:	f000 f8ca 	bl	8000b0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000978:	211c      	movs	r1, #28
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000986:	187a      	adds	r2, r7, r1
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f003 f8af 	bl	8003af0 <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000996:	f000 f8b9 	bl	8000b0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099a:	003b      	movs	r3, r7
 800099c:	2260      	movs	r2, #96	@ 0x60
 800099e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009a0:	003b      	movs	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a6:	003b      	movs	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ac:	003b      	movs	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b2:	0039      	movs	r1, r7
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 fc7f 	bl	80032bc <HAL_TIM_PWM_ConfigChannel>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80009c2:	f000 f8a3 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009c6:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 fa0b 	bl	8000de4 <HAL_TIM_MspPostInit>

}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b00a      	add	sp, #40	@ 0x28
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	200001b4 	.word	0x200001b4

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b089      	sub	sp, #36	@ 0x24
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	240c      	movs	r4, #12
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	0018      	movs	r0, r3
 80009e8:	2314      	movs	r3, #20
 80009ea:	001a      	movs	r2, r3
 80009ec:	2100      	movs	r1, #0
 80009ee:	f003 fe4b 	bl	8004688 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b43      	ldr	r3, [pc, #268]	@ (8000b00 <MX_GPIO_Init+0x124>)
 80009f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009f6:	4b42      	ldr	r3, [pc, #264]	@ (8000b00 <MX_GPIO_Init+0x124>)
 80009f8:	2101      	movs	r1, #1
 80009fa:	430a      	orrs	r2, r1
 80009fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80009fe:	4b40      	ldr	r3, [pc, #256]	@ (8000b00 <MX_GPIO_Init+0x124>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	2201      	movs	r2, #1
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b00 <MX_GPIO_Init+0x124>)
 8000a0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a0e:	4b3c      	ldr	r3, [pc, #240]	@ (8000b00 <MX_GPIO_Init+0x124>)
 8000a10:	2102      	movs	r1, #2
 8000a12:	430a      	orrs	r2, r1
 8000a14:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a16:	4b3a      	ldr	r3, [pc, #232]	@ (8000b00 <MX_GPIO_Init+0x124>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_5V_REG_Pin|NRSTPD_RFID_Pin|nRESET_FLASH_Pin|nWP_FLASH_Pin
 8000a22:	4938      	ldr	r1, [pc, #224]	@ (8000b04 <MX_GPIO_Init+0x128>)
 8000a24:	23a0      	movs	r3, #160	@ 0xa0
 8000a26:	05db      	lsls	r3, r3, #23
 8000a28:	2200      	movs	r2, #0
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f000 fcf8 	bl	8001420 <HAL_GPIO_WritePin>
                          |nCS_FLASH_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8000a30:	4b35      	ldr	r3, [pc, #212]	@ (8000b08 <MX_GPIO_Init+0x12c>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	2118      	movs	r1, #24
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 fcf2 	bl	8001420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ENABLE_5V_REG_Pin */
  GPIO_InitStruct.Pin = ENABLE_5V_REG_Pin;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2204      	movs	r2, #4
 8000a40:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2201      	movs	r2, #1
 8000a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	2202      	movs	r2, #2
 8000a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(ENABLE_5V_REG_GPIO_Port, &GPIO_InitStruct);
 8000a54:	193a      	adds	r2, r7, r4
 8000a56:	23a0      	movs	r3, #160	@ 0xa0
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 fb73 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : NRSTPD_RFID_Pin */
  GPIO_InitStruct.Pin = NRSTPD_RFID_Pin;
 8000a62:	193b      	adds	r3, r7, r4
 8000a64:	2208      	movs	r2, #8
 8000a66:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a68:	193b      	adds	r3, r7, r4
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2201      	movs	r2, #1
 8000a72:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	193b      	adds	r3, r7, r4
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NRSTPD_RFID_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	193a      	adds	r2, r7, r4
 8000a7c:	23a0      	movs	r3, #160	@ 0xa0
 8000a7e:	05db      	lsls	r3, r3, #23
 8000a80:	0011      	movs	r1, r2
 8000a82:	0018      	movs	r0, r3
 8000a84:	f000 fb60 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : nRESET_FLASH_Pin nWP_FLASH_Pin nCS_FLASH_Pin */
  GPIO_InitStruct.Pin = nRESET_FLASH_Pin|nWP_FLASH_Pin|nCS_FLASH_Pin;
 8000a88:	0021      	movs	r1, r4
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	22e0      	movs	r2, #224	@ 0xe0
 8000a8e:	00d2      	lsls	r2, r2, #3
 8000a90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	000c      	movs	r4, r1
 8000a94:	193b      	adds	r3, r7, r4
 8000a96:	2201      	movs	r2, #1
 8000a98:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aa6:	193a      	adds	r2, r7, r4
 8000aa8:	23a0      	movs	r3, #160	@ 0xa0
 8000aaa:	05db      	lsls	r3, r3, #23
 8000aac:	0011      	movs	r1, r2
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f000 fb4a 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2218      	movs	r2, #24
 8000ab8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2201      	movs	r2, #1
 8000abe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	193b      	adds	r3, r7, r4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000acc:	193b      	adds	r3, r7, r4
 8000ace:	4a0e      	ldr	r2, [pc, #56]	@ (8000b08 <MX_GPIO_Init+0x12c>)
 8000ad0:	0019      	movs	r1, r3
 8000ad2:	0010      	movs	r0, r2
 8000ad4:	f000 fb38 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_01_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin;
 8000ad8:	0021      	movs	r1, r4
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2220      	movs	r2, #32
 8000ade:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	187b      	adds	r3, r7, r1
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PUSH_BUTTON_01_GPIO_Port, &GPIO_InitStruct);
 8000aec:	187b      	adds	r3, r7, r1
 8000aee:	4a06      	ldr	r2, [pc, #24]	@ (8000b08 <MX_GPIO_Init+0x12c>)
 8000af0:	0019      	movs	r1, r3
 8000af2:	0010      	movs	r0, r2
 8000af4:	f000 fb28 	bl	8001148 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000af8:	46c0      	nop			@ (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	b009      	add	sp, #36	@ 0x24
 8000afe:	bd90      	pop	{r4, r7, pc}
 8000b00:	40021000 	.word	0x40021000
 8000b04:	0000070c 	.word	0x0000070c
 8000b08:	50000400 	.word	0x50000400

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	46c0      	nop			@ (mov r8, r8)
 8000b16:	e7fd      	b.n	8000b14 <Error_Handler+0x8>

08000b18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b20:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b24:	2180      	movs	r1, #128	@ 0x80
 8000b26:	0549      	lsls	r1, r1, #21
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b2e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b30:	2380      	movs	r3, #128	@ 0x80
 8000b32:	055b      	lsls	r3, r3, #21
 8000b34:	4013      	ands	r3, r2
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b3e:	4b07      	ldr	r3, [pc, #28]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b40:	2101      	movs	r1, #1
 8000b42:	430a      	orrs	r2, r1
 8000b44:	661a      	str	r2, [r3, #96]	@ 0x60
 8000b46:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_MspInit+0x44>)
 8000b48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	4013      	ands	r3, r2
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	40021000 	.word	0x40021000

08000b60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b099      	sub	sp, #100	@ 0x64
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	234c      	movs	r3, #76	@ 0x4c
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	2314      	movs	r3, #20
 8000b70:	001a      	movs	r2, r3
 8000b72:	2100      	movs	r1, #0
 8000b74:	f003 fd88 	bl	8004688 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b78:	2414      	movs	r4, #20
 8000b7a:	193b      	adds	r3, r7, r4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	2338      	movs	r3, #56	@ 0x38
 8000b80:	001a      	movs	r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	f003 fd80 	bl	8004688 <memset>
  if(huart->Instance==LPUART2)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a21      	ldr	r2, [pc, #132]	@ (8000c14 <HAL_UART_MspInit+0xb4>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d13b      	bne.n	8000c0a <HAL_UART_MspInit+0xaa>

    /* USER CODE END LPUART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART2;
 8000b92:	193b      	adds	r3, r7, r4
 8000b94:	2208      	movs	r2, #8
 8000b96:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart2ClockSelection = RCC_LPUART2CLKSOURCE_PCLK1;
 8000b98:	193b      	adds	r3, r7, r4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9e:	193b      	adds	r3, r7, r4
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f001 fac3 	bl	800212c <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	1e03      	subs	r3, r0, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000baa:	f7ff ffaf 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART2_CLK_ENABLE();
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bb0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bb4:	2180      	movs	r1, #128	@ 0x80
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	659a      	str	r2, [r3, #88]	@ 0x58
 8000bba:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bbe:	2280      	movs	r2, #128	@ 0x80
 8000bc0:	4013      	ands	r3, r2
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bc8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bcc:	2102      	movs	r1, #2
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000bd2:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <HAL_UART_MspInit+0xb8>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd6:	2202      	movs	r2, #2
 8000bd8:	4013      	ands	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	68fb      	ldr	r3, [r7, #12]
    /**LPUART2 GPIO Configuration
    PB6     ------> LPUART2_TX
    PB7     ------> LPUART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bde:	214c      	movs	r1, #76	@ 0x4c
 8000be0:	187b      	adds	r3, r7, r1
 8000be2:	22c0      	movs	r2, #192	@ 0xc0
 8000be4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	187b      	adds	r3, r7, r1
 8000be8:	2202      	movs	r2, #2
 8000bea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	187b      	adds	r3, r7, r1
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	187b      	adds	r3, r7, r1
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_LPUART2;
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	220a      	movs	r2, #10
 8000bfc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfe:	187b      	adds	r3, r7, r1
 8000c00:	4a06      	ldr	r2, [pc, #24]	@ (8000c1c <HAL_UART_MspInit+0xbc>)
 8000c02:	0019      	movs	r1, r3
 8000c04:	0010      	movs	r0, r2
 8000c06:	f000 fa9f 	bl	8001148 <HAL_GPIO_Init>

    /* USER CODE END LPUART2_MspInit 1 */

  }

}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	b019      	add	sp, #100	@ 0x64
 8000c10:	bd90      	pop	{r4, r7, pc}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	40008400 	.word	0x40008400
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	50000400 	.word	0x50000400

08000c20 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c20:	b590      	push	{r4, r7, lr}
 8000c22:	b093      	sub	sp, #76	@ 0x4c
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c28:	2410      	movs	r4, #16
 8000c2a:	193b      	adds	r3, r7, r4
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	2338      	movs	r3, #56	@ 0x38
 8000c30:	001a      	movs	r2, r3
 8000c32:	2100      	movs	r1, #0
 8000c34:	f003 fd28 	bl	8004688 <memset>
  if(hrtc->Instance==RTC)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a16      	ldr	r2, [pc, #88]	@ (8000c98 <HAL_RTC_MspInit+0x78>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d126      	bne.n	8000c90 <HAL_RTC_MspInit+0x70>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	2280      	movs	r2, #128	@ 0x80
 8000c46:	0212      	lsls	r2, r2, #8
 8000c48:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2280      	movs	r2, #128	@ 0x80
 8000c4e:	0092      	lsls	r2, r2, #2
 8000c50:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c52:	193b      	adds	r3, r7, r4
 8000c54:	0018      	movs	r0, r3
 8000c56:	f001 fa69 	bl	800212c <HAL_RCCEx_PeriphCLKConfig>
 8000c5a:	1e03      	subs	r3, r0, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c5e:	f7ff ff55 	bl	8000b0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c62:	4a0e      	ldr	r2, [pc, #56]	@ (8000c9c <HAL_RTC_MspInit+0x7c>)
 8000c64:	2390      	movs	r3, #144	@ 0x90
 8000c66:	58d3      	ldr	r3, [r2, r3]
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <HAL_RTC_MspInit+0x7c>)
 8000c6a:	2280      	movs	r2, #128	@ 0x80
 8000c6c:	0212      	lsls	r2, r2, #8
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	2290      	movs	r2, #144	@ 0x90
 8000c72:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c74:	4b09      	ldr	r3, [pc, #36]	@ (8000c9c <HAL_RTC_MspInit+0x7c>)
 8000c76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c78:	4b08      	ldr	r3, [pc, #32]	@ (8000c9c <HAL_RTC_MspInit+0x7c>)
 8000c7a:	2180      	movs	r1, #128	@ 0x80
 8000c7c:	00c9      	lsls	r1, r1, #3
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c82:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <HAL_RTC_MspInit+0x7c>)
 8000c84:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c86:	2380      	movs	r3, #128	@ 0x80
 8000c88:	00db      	lsls	r3, r3, #3
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	60fb      	str	r3, [r7, #12]
 8000c8e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000c90:	46c0      	nop			@ (mov r8, r8)
 8000c92:	46bd      	mov	sp, r7
 8000c94:	b013      	add	sp, #76	@ 0x4c
 8000c96:	bd90      	pop	{r4, r7, pc}
 8000c98:	40002800 	.word	0x40002800
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b08d      	sub	sp, #52	@ 0x34
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	241c      	movs	r4, #28
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	0018      	movs	r0, r3
 8000cae:	2314      	movs	r3, #20
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f003 fce8 	bl	8004688 <memset>
  if(hspi->Instance==SPI1)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a37      	ldr	r2, [pc, #220]	@ (8000d9c <HAL_SPI_MspInit+0xfc>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d131      	bne.n	8000d26 <HAL_SPI_MspInit+0x86>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cc2:	4b37      	ldr	r3, [pc, #220]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000cc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000cc6:	4b36      	ldr	r3, [pc, #216]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000cc8:	2180      	movs	r1, #128	@ 0x80
 8000cca:	0149      	lsls	r1, r1, #5
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	661a      	str	r2, [r3, #96]	@ 0x60
 8000cd0:	4b33      	ldr	r3, [pc, #204]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000cd2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000cd4:	2380      	movs	r3, #128	@ 0x80
 8000cd6:	015b      	lsls	r3, r3, #5
 8000cd8:	4013      	ands	r3, r2
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b30      	ldr	r3, [pc, #192]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000ce0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000ce2:	4b2f      	ldr	r3, [pc, #188]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000cea:	4b2d      	ldr	r3, [pc, #180]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_NSS_RFID_Pin|SPI1_SCK_RFID_Pin|SPI1_MISO_RFID_Pin|SPI1_MOSI_RFID_Pin;
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	22f0      	movs	r2, #240	@ 0xf0
 8000cfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2202      	movs	r2, #2
 8000d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2205      	movs	r2, #5
 8000d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	187a      	adds	r2, r7, r1
 8000d18:	23a0      	movs	r3, #160	@ 0xa0
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	0011      	movs	r1, r2
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 fa12 	bl	8001148 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000d24:	e035      	b.n	8000d92 <HAL_SPI_MspInit+0xf2>
  else if(hspi->Instance==SPI2)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8000da4 <HAL_SPI_MspInit+0x104>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d130      	bne.n	8000d92 <HAL_SPI_MspInit+0xf2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d30:	4b1b      	ldr	r3, [pc, #108]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000d32:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d34:	4b1a      	ldr	r3, [pc, #104]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000d36:	2180      	movs	r1, #128	@ 0x80
 8000d38:	01c9      	lsls	r1, r1, #7
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d3e:	4b18      	ldr	r3, [pc, #96]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000d40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d42:	2380      	movs	r3, #128	@ 0x80
 8000d44:	01db      	lsls	r3, r3, #7
 8000d46:	4013      	ands	r3, r2
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4c:	4b14      	ldr	r3, [pc, #80]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000d4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d50:	4b13      	ldr	r3, [pc, #76]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000d52:	2101      	movs	r1, #1
 8000d54:	430a      	orrs	r2, r1
 8000d56:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d58:	4b11      	ldr	r3, [pc, #68]	@ (8000da0 <HAL_SPI_MspInit+0x100>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4013      	ands	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_FLASH_Pin|SPI2_MISO_FLASH_Pin|SPI2_MOSI_FLASH_Pin;
 8000d64:	211c      	movs	r1, #28
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	4a0f      	ldr	r2, [pc, #60]	@ (8000da8 <HAL_SPI_MspInit+0x108>)
 8000d6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2202      	movs	r2, #2
 8000d70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2206      	movs	r2, #6
 8000d82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	187a      	adds	r2, r7, r1
 8000d86:	23a0      	movs	r3, #160	@ 0xa0
 8000d88:	05db      	lsls	r3, r3, #23
 8000d8a:	0011      	movs	r1, r2
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f000 f9db 	bl	8001148 <HAL_GPIO_Init>
}
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b00d      	add	sp, #52	@ 0x34
 8000d98:	bd90      	pop	{r4, r7, pc}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	40013000 	.word	0x40013000
 8000da0:	40021000 	.word	0x40021000
 8000da4:	40003800 	.word	0x40003800
 8000da8:	00001802 	.word	0x00001802

08000dac <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2380      	movs	r3, #128	@ 0x80
 8000dba:	05db      	lsls	r3, r3, #23
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d10b      	bne.n	8000dd8 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dc0:	4b07      	ldr	r3, [pc, #28]	@ (8000de0 <HAL_TIM_PWM_MspInit+0x34>)
 8000dc2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <HAL_TIM_PWM_MspInit+0x34>)
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	659a      	str	r2, [r3, #88]	@ 0x58
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <HAL_TIM_PWM_MspInit+0x34>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	b004      	add	sp, #16
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40021000 	.word	0x40021000

08000de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b089      	sub	sp, #36	@ 0x24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	240c      	movs	r4, #12
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	0018      	movs	r0, r3
 8000df2:	2314      	movs	r3, #20
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f003 fc46 	bl	8004688 <memset>
  if(htim->Instance==TIM2)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	2380      	movs	r3, #128	@ 0x80
 8000e02:	05db      	lsls	r3, r3, #23
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d123      	bne.n	8000e50 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b13      	ldr	r3, [pc, #76]	@ (8000e58 <HAL_TIM_MspPostInit+0x74>)
 8000e0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <HAL_TIM_MspPostInit+0x74>)
 8000e0e:	2101      	movs	r1, #1
 8000e10:	430a      	orrs	r2, r1
 8000e12:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000e14:	4b10      	ldr	r3, [pc, #64]	@ (8000e58 <HAL_TIM_MspPostInit+0x74>)
 8000e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60bb      	str	r3, [r7, #8]
 8000e1e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_PWM_Pin;
 8000e20:	193b      	adds	r3, r7, r4
 8000e22:	2280      	movs	r2, #128	@ 0x80
 8000e24:	0212      	lsls	r2, r2, #8
 8000e26:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e28:	0021      	movs	r1, r4
 8000e2a:	187b      	adds	r3, r7, r1
 8000e2c:	2202      	movs	r2, #2
 8000e2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	187b      	adds	r3, r7, r1
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e36:	187b      	adds	r3, r7, r1
 8000e38:	2200      	movs	r2, #0
 8000e3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e3c:	187b      	adds	r3, r7, r1
 8000e3e:	2201      	movs	r2, #1
 8000e40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM2_CH1_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e42:	187a      	adds	r2, r7, r1
 8000e44:	23a0      	movs	r3, #160	@ 0xa0
 8000e46:	05db      	lsls	r3, r3, #23
 8000e48:	0011      	movs	r1, r2
 8000e4a:	0018      	movs	r0, r3
 8000e4c:	f000 f97c 	bl	8001148 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b009      	add	sp, #36	@ 0x24
 8000e56:	bd90      	pop	{r4, r7, pc}
 8000e58:	40021000 	.word	0x40021000

08000e5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e60:	46c0      	nop			@ (mov r8, r8)
 8000e62:	e7fd      	b.n	8000e60 <NMI_Handler+0x4>

08000e64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e68:	46c0      	nop			@ (mov r8, r8)
 8000e6a:	e7fd      	b.n	8000e68 <HardFault_Handler+0x4>

08000e6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e7a:	46c0      	nop			@ (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e84:	f000 f892 	bl	8000fac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e88:	46c0      	nop			@ (mov r8, r8)
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e96:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <SystemInit+0x50>)
 8000e98:	2280      	movs	r2, #128	@ 0x80
 8000e9a:	0512      	lsls	r2, r2, #20
 8000e9c:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 8000e9e:	4a11      	ldr	r2, [pc, #68]	@ (8000ee4 <SystemInit+0x54>)
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	58d3      	ldr	r3, [r2, r3]
 8000ea4:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 8000ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <SystemInit+0x54>)
 8000ea8:	6a1b      	ldr	r3, [r3, #32]
 8000eaa:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8000eac:	687a      	ldr	r2, [r7, #4]
 8000eae:	2380      	movs	r3, #128	@ 0x80
 8000eb0:	025b      	lsls	r3, r3, #9
 8000eb2:	4013      	ands	r3, r2
 8000eb4:	d010      	beq.n	8000ed8 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	22ff      	movs	r2, #255	@ 0xff
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2bcc      	cmp	r3, #204	@ 0xcc
 8000ebe:	d00b      	beq.n	8000ed8 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	22ff      	movs	r2, #255	@ 0xff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	2baa      	cmp	r3, #170	@ 0xaa
 8000ec8:	d006      	beq.n	8000ed8 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <SystemInit+0x54>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <SystemInit+0x54>)
 8000ed0:	2180      	movs	r1, #128	@ 0x80
 8000ed2:	02c9      	lsls	r1, r1, #11
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8000ed8:	46c0      	nop			@ (mov r8, r8)
 8000eda:	46bd      	mov	sp, r7
 8000edc:	b002      	add	sp, #8
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	e000ed00 	.word	0xe000ed00
 8000ee4:	40022000 	.word	0x40022000

08000ee8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eee:	1dfb      	adds	r3, r7, #7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f000 f80f 	bl	8000f18 <HAL_InitTick>
 8000efa:	1e03      	subs	r3, r0, #0
 8000efc:	d003      	beq.n	8000f06 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000efe:	1dfb      	adds	r3, r7, #7
 8000f00:	2201      	movs	r2, #1
 8000f02:	701a      	strb	r2, [r3, #0]
 8000f04:	e001      	b.n	8000f0a <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f06:	f7ff fe07 	bl	8000b18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
}
 8000f0e:	0018      	movs	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b002      	add	sp, #8
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f18:	b590      	push	{r4, r7, lr}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f20:	230f      	movs	r3, #15
 8000f22:	18fb      	adds	r3, r7, r3
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000f28:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa0 <HAL_InitTick+0x88>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d02b      	beq.n	8000f88 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000f30:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa4 <HAL_InitTick+0x8c>)
 8000f32:	681c      	ldr	r4, [r3, #0]
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <HAL_InitTick+0x88>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	0019      	movs	r1, r3
 8000f3a:	23fa      	movs	r3, #250	@ 0xfa
 8000f3c:	0098      	lsls	r0, r3, #2
 8000f3e:	f7ff f8e3 	bl	8000108 <__udivsi3>
 8000f42:	0003      	movs	r3, r0
 8000f44:	0019      	movs	r1, r3
 8000f46:	0020      	movs	r0, r4
 8000f48:	f7ff f8de 	bl	8000108 <__udivsi3>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	0018      	movs	r0, r3
 8000f50:	f000 f8ed 	bl	800112e <HAL_SYSTICK_Config>
 8000f54:	1e03      	subs	r3, r0, #0
 8000f56:	d112      	bne.n	8000f7e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d80a      	bhi.n	8000f74 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f5e:	6879      	ldr	r1, [r7, #4]
 8000f60:	2301      	movs	r3, #1
 8000f62:	425b      	negs	r3, r3
 8000f64:	2200      	movs	r2, #0
 8000f66:	0018      	movs	r0, r3
 8000f68:	f000 f8cc 	bl	8001104 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_InitTick+0x90>)
 8000f6e:	687a      	ldr	r2, [r7, #4]
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	e00d      	b.n	8000f90 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f74:	230f      	movs	r3, #15
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	2201      	movs	r2, #1
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e008      	b.n	8000f90 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f7e:	230f      	movs	r3, #15
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	e003      	b.n	8000f90 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f88:	230f      	movs	r3, #15
 8000f8a:	18fb      	adds	r3, r7, r3
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f90:	230f      	movs	r3, #15
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	781b      	ldrb	r3, [r3, #0]
}
 8000f96:	0018      	movs	r0, r3
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	b005      	add	sp, #20
 8000f9c:	bd90      	pop	{r4, r7, pc}
 8000f9e:	46c0      	nop			@ (mov r8, r8)
 8000fa0:	20000008 	.word	0x20000008
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000004 	.word	0x20000004

08000fac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb0:	4b04      	ldr	r3, [pc, #16]	@ (8000fc4 <HAL_IncTick+0x18>)
 8000fb2:	681a      	ldr	r2, [r3, #0]
 8000fb4:	4b04      	ldr	r3, [pc, #16]	@ (8000fc8 <HAL_IncTick+0x1c>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	18d2      	adds	r2, r2, r3
 8000fba:	4b02      	ldr	r3, [pc, #8]	@ (8000fc4 <HAL_IncTick+0x18>)
 8000fbc:	601a      	str	r2, [r3, #0]
}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20000200 	.word	0x20000200
 8000fc8:	20000008 	.word	0x20000008

08000fcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd0:	4b02      	ldr	r3, [pc, #8]	@ (8000fdc <HAL_GetTick+0x10>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
}
 8000fd4:	0018      	movs	r0, r3
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	46c0      	nop			@ (mov r8, r8)
 8000fdc:	20000200 	.word	0x20000200

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	0002      	movs	r2, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ff4:	d828      	bhi.n	8001048 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ff6:	4a2f      	ldr	r2, [pc, #188]	@ (80010b4 <__NVIC_SetPriority+0xd4>)
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	b25b      	sxtb	r3, r3
 8000ffe:	089b      	lsrs	r3, r3, #2
 8001000:	33c0      	adds	r3, #192	@ 0xc0
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	589b      	ldr	r3, [r3, r2]
 8001006:	1dfa      	adds	r2, r7, #7
 8001008:	7812      	ldrb	r2, [r2, #0]
 800100a:	0011      	movs	r1, r2
 800100c:	2203      	movs	r2, #3
 800100e:	400a      	ands	r2, r1
 8001010:	00d2      	lsls	r2, r2, #3
 8001012:	21ff      	movs	r1, #255	@ 0xff
 8001014:	4091      	lsls	r1, r2
 8001016:	000a      	movs	r2, r1
 8001018:	43d2      	mvns	r2, r2
 800101a:	401a      	ands	r2, r3
 800101c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	019b      	lsls	r3, r3, #6
 8001022:	22ff      	movs	r2, #255	@ 0xff
 8001024:	401a      	ands	r2, r3
 8001026:	1dfb      	adds	r3, r7, #7
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	0018      	movs	r0, r3
 800102c:	2303      	movs	r3, #3
 800102e:	4003      	ands	r3, r0
 8001030:	00db      	lsls	r3, r3, #3
 8001032:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001034:	481f      	ldr	r0, [pc, #124]	@ (80010b4 <__NVIC_SetPriority+0xd4>)
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	b25b      	sxtb	r3, r3
 800103c:	089b      	lsrs	r3, r3, #2
 800103e:	430a      	orrs	r2, r1
 8001040:	33c0      	adds	r3, #192	@ 0xc0
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001046:	e031      	b.n	80010ac <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001048:	4a1b      	ldr	r2, [pc, #108]	@ (80010b8 <__NVIC_SetPriority+0xd8>)
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	0019      	movs	r1, r3
 8001050:	230f      	movs	r3, #15
 8001052:	400b      	ands	r3, r1
 8001054:	3b08      	subs	r3, #8
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3306      	adds	r3, #6
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	18d3      	adds	r3, r2, r3
 800105e:	3304      	adds	r3, #4
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1dfa      	adds	r2, r7, #7
 8001064:	7812      	ldrb	r2, [r2, #0]
 8001066:	0011      	movs	r1, r2
 8001068:	2203      	movs	r2, #3
 800106a:	400a      	ands	r2, r1
 800106c:	00d2      	lsls	r2, r2, #3
 800106e:	21ff      	movs	r1, #255	@ 0xff
 8001070:	4091      	lsls	r1, r2
 8001072:	000a      	movs	r2, r1
 8001074:	43d2      	mvns	r2, r2
 8001076:	401a      	ands	r2, r3
 8001078:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	019b      	lsls	r3, r3, #6
 800107e:	22ff      	movs	r2, #255	@ 0xff
 8001080:	401a      	ands	r2, r3
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	781b      	ldrb	r3, [r3, #0]
 8001086:	0018      	movs	r0, r3
 8001088:	2303      	movs	r3, #3
 800108a:	4003      	ands	r3, r0
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001090:	4809      	ldr	r0, [pc, #36]	@ (80010b8 <__NVIC_SetPriority+0xd8>)
 8001092:	1dfb      	adds	r3, r7, #7
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	001c      	movs	r4, r3
 8001098:	230f      	movs	r3, #15
 800109a:	4023      	ands	r3, r4
 800109c:	3b08      	subs	r3, #8
 800109e:	089b      	lsrs	r3, r3, #2
 80010a0:	430a      	orrs	r2, r1
 80010a2:	3306      	adds	r3, #6
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	18c3      	adds	r3, r0, r3
 80010a8:	3304      	adds	r3, #4
 80010aa:	601a      	str	r2, [r3, #0]
}
 80010ac:	46c0      	nop			@ (mov r8, r8)
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b003      	add	sp, #12
 80010b2:	bd90      	pop	{r4, r7, pc}
 80010b4:	e000e100 	.word	0xe000e100
 80010b8:	e000ed00 	.word	0xe000ed00

080010bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	2380      	movs	r3, #128	@ 0x80
 80010ca:	045b      	lsls	r3, r3, #17
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d301      	bcc.n	80010d4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d0:	2301      	movs	r3, #1
 80010d2:	e010      	b.n	80010f6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001100 <SysTick_Config+0x44>)
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	3a01      	subs	r2, #1
 80010da:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010dc:	2301      	movs	r3, #1
 80010de:	425b      	negs	r3, r3
 80010e0:	2103      	movs	r1, #3
 80010e2:	0018      	movs	r0, r3
 80010e4:	f7ff ff7c 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010e8:	4b05      	ldr	r3, [pc, #20]	@ (8001100 <SysTick_Config+0x44>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ee:	4b04      	ldr	r3, [pc, #16]	@ (8001100 <SysTick_Config+0x44>)
 80010f0:	2207      	movs	r2, #7
 80010f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	0018      	movs	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b002      	add	sp, #8
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	46c0      	nop			@ (mov r8, r8)
 8001100:	e000e010 	.word	0xe000e010

08001104 <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	210f      	movs	r1, #15
 8001110:	187b      	adds	r3, r7, r1
 8001112:	1c02      	adds	r2, r0, #0
 8001114:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	187b      	adds	r3, r7, r1
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b25b      	sxtb	r3, r3
 800111e:	0011      	movs	r1, r2
 8001120:	0018      	movs	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	46c0      	nop			@ (mov r8, r8)
 8001128:	46bd      	mov	sp, r7
 800112a:	b004      	add	sp, #16
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff ffbf 	bl	80010bc <SysTick_Config>
 800113e:	0003      	movs	r3, r0
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	b002      	add	sp, #8
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001156:	e14d      	b.n	80013f4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2101      	movs	r1, #1
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	4091      	lsls	r1, r2
 8001162:	000a      	movs	r2, r1
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d100      	bne.n	8001170 <HAL_GPIO_Init+0x28>
 800116e:	e13e      	b.n	80013ee <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2203      	movs	r2, #3
 8001176:	4013      	ands	r3, r2
 8001178:	2b01      	cmp	r3, #1
 800117a:	d005      	beq.n	8001188 <HAL_GPIO_Init+0x40>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2203      	movs	r2, #3
 8001182:	4013      	ands	r3, r2
 8001184:	2b02      	cmp	r3, #2
 8001186:	d130      	bne.n	80011ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	409a      	lsls	r2, r3
 8001196:	0013      	movs	r3, r2
 8001198:	43da      	mvns	r2, r3
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	409a      	lsls	r2, r3
 80011aa:	0013      	movs	r3, r2
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011be:	2201      	movs	r2, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
 80011c4:	0013      	movs	r3, r2
 80011c6:	43da      	mvns	r2, r3
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	2201      	movs	r2, #1
 80011d6:	401a      	ands	r2, r3
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	409a      	lsls	r2, r3
 80011dc:	0013      	movs	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2203      	movs	r2, #3
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d017      	beq.n	8001226 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	409a      	lsls	r2, r3
 8001204:	0013      	movs	r3, r2
 8001206:	43da      	mvns	r2, r3
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	409a      	lsls	r2, r3
 8001218:	0013      	movs	r3, r2
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2203      	movs	r2, #3
 800122c:	4013      	ands	r3, r2
 800122e:	2b02      	cmp	r3, #2
 8001230:	d123      	bne.n	800127a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	0092      	lsls	r2, r2, #2
 800123c:	58d3      	ldr	r3, [r2, r3]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	2207      	movs	r2, #7
 8001244:	4013      	ands	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	409a      	lsls	r2, r3
 800124c:	0013      	movs	r3, r2
 800124e:	43da      	mvns	r2, r3
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	2107      	movs	r1, #7
 800125e:	400b      	ands	r3, r1
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	409a      	lsls	r2, r3
 8001264:	0013      	movs	r3, r2
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	6939      	ldr	r1, [r7, #16]
 8001278:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	2203      	movs	r2, #3
 8001298:	401a      	ands	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	23c0      	movs	r3, #192	@ 0xc0
 80012b4:	029b      	lsls	r3, r3, #10
 80012b6:	4013      	ands	r3, r2
 80012b8:	d100      	bne.n	80012bc <HAL_GPIO_Init+0x174>
 80012ba:	e098      	b.n	80013ee <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80012bc:	4a53      	ldr	r2, [pc, #332]	@ (800140c <HAL_GPIO_Init+0x2c4>)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3318      	adds	r3, #24
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	589b      	ldr	r3, [r3, r2]
 80012c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	2203      	movs	r2, #3
 80012ce:	4013      	ands	r3, r2
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	220f      	movs	r2, #15
 80012d4:	409a      	lsls	r2, r3
 80012d6:	0013      	movs	r3, r2
 80012d8:	43da      	mvns	r2, r3
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4013      	ands	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	23a0      	movs	r3, #160	@ 0xa0
 80012e4:	05db      	lsls	r3, r3, #23
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d019      	beq.n	800131e <HAL_GPIO_Init+0x1d6>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4a48      	ldr	r2, [pc, #288]	@ (8001410 <HAL_GPIO_Init+0x2c8>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d013      	beq.n	800131a <HAL_GPIO_Init+0x1d2>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4a47      	ldr	r2, [pc, #284]	@ (8001414 <HAL_GPIO_Init+0x2cc>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d00d      	beq.n	8001316 <HAL_GPIO_Init+0x1ce>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a46      	ldr	r2, [pc, #280]	@ (8001418 <HAL_GPIO_Init+0x2d0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d007      	beq.n	8001312 <HAL_GPIO_Init+0x1ca>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a45      	ldr	r2, [pc, #276]	@ (800141c <HAL_GPIO_Init+0x2d4>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d101      	bne.n	800130e <HAL_GPIO_Init+0x1c6>
 800130a:	2305      	movs	r3, #5
 800130c:	e008      	b.n	8001320 <HAL_GPIO_Init+0x1d8>
 800130e:	2306      	movs	r3, #6
 8001310:	e006      	b.n	8001320 <HAL_GPIO_Init+0x1d8>
 8001312:	2303      	movs	r3, #3
 8001314:	e004      	b.n	8001320 <HAL_GPIO_Init+0x1d8>
 8001316:	2302      	movs	r3, #2
 8001318:	e002      	b.n	8001320 <HAL_GPIO_Init+0x1d8>
 800131a:	2301      	movs	r3, #1
 800131c:	e000      	b.n	8001320 <HAL_GPIO_Init+0x1d8>
 800131e:	2300      	movs	r3, #0
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	2103      	movs	r1, #3
 8001324:	400a      	ands	r2, r1
 8001326:	00d2      	lsls	r2, r2, #3
 8001328:	4093      	lsls	r3, r2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	4313      	orrs	r3, r2
 800132e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001330:	4936      	ldr	r1, [pc, #216]	@ (800140c <HAL_GPIO_Init+0x2c4>)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	089b      	lsrs	r3, r3, #2
 8001336:	3318      	adds	r3, #24
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800133e:	4b33      	ldr	r3, [pc, #204]	@ (800140c <HAL_GPIO_Init+0x2c4>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	2380      	movs	r3, #128	@ 0x80
 8001354:	035b      	lsls	r3, r3, #13
 8001356:	4013      	ands	r3, r2
 8001358:	d003      	beq.n	8001362 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4313      	orrs	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001362:	4b2a      	ldr	r3, [pc, #168]	@ (800140c <HAL_GPIO_Init+0x2c4>)
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001368:	4b28      	ldr	r3, [pc, #160]	@ (800140c <HAL_GPIO_Init+0x2c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	43da      	mvns	r2, r3
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	2380      	movs	r3, #128	@ 0x80
 800137e:	039b      	lsls	r3, r3, #14
 8001380:	4013      	ands	r3, r2
 8001382:	d003      	beq.n	800138c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	4313      	orrs	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800138c:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <HAL_GPIO_Init+0x2c4>)
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001392:	4a1e      	ldr	r2, [pc, #120]	@ (800140c <HAL_GPIO_Init+0x2c4>)
 8001394:	2384      	movs	r3, #132	@ 0x84
 8001396:	58d3      	ldr	r3, [r2, r3]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43da      	mvns	r2, r3
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685a      	ldr	r2, [r3, #4]
 80013a8:	2380      	movs	r3, #128	@ 0x80
 80013aa:	029b      	lsls	r3, r3, #10
 80013ac:	4013      	ands	r3, r2
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013b8:	4914      	ldr	r1, [pc, #80]	@ (800140c <HAL_GPIO_Init+0x2c4>)
 80013ba:	2284      	movs	r2, #132	@ 0x84
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80013c0:	4a12      	ldr	r2, [pc, #72]	@ (800140c <HAL_GPIO_Init+0x2c4>)
 80013c2:	2380      	movs	r3, #128	@ 0x80
 80013c4:	58d3      	ldr	r3, [r2, r3]
 80013c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43da      	mvns	r2, r3
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	4013      	ands	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	2380      	movs	r3, #128	@ 0x80
 80013d8:	025b      	lsls	r3, r3, #9
 80013da:	4013      	ands	r3, r2
 80013dc:	d003      	beq.n	80013e6 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013e6:	4909      	ldr	r1, [pc, #36]	@ (800140c <HAL_GPIO_Init+0x2c4>)
 80013e8:	2280      	movs	r2, #128	@ 0x80
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	40da      	lsrs	r2, r3
 80013fc:	1e13      	subs	r3, r2, #0
 80013fe:	d000      	beq.n	8001402 <HAL_GPIO_Init+0x2ba>
 8001400:	e6aa      	b.n	8001158 <HAL_GPIO_Init+0x10>
  }
}
 8001402:	46c0      	nop			@ (mov r8, r8)
 8001404:	46c0      	nop			@ (mov r8, r8)
 8001406:	46bd      	mov	sp, r7
 8001408:	b006      	add	sp, #24
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40021800 	.word	0x40021800
 8001410:	50000400 	.word	0x50000400
 8001414:	50000800 	.word	0x50000800
 8001418:	50000c00 	.word	0x50000c00
 800141c:	50001400 	.word	0x50001400

08001420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	0008      	movs	r0, r1
 800142a:	0011      	movs	r1, r2
 800142c:	1cbb      	adds	r3, r7, #2
 800142e:	1c02      	adds	r2, r0, #0
 8001430:	801a      	strh	r2, [r3, #0]
 8001432:	1c7b      	adds	r3, r7, #1
 8001434:	1c0a      	adds	r2, r1, #0
 8001436:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001438:	1c7b      	adds	r3, r7, #1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d004      	beq.n	800144a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001440:	1cbb      	adds	r3, r7, #2
 8001442:	881a      	ldrh	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001448:	e003      	b.n	8001452 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800144a:	1cbb      	adds	r3, r7, #2
 800144c:	881a      	ldrh	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001452:	46c0      	nop			@ (mov r8, r8)
 8001454:	46bd      	mov	sp, r7
 8001456:	b002      	add	sp, #8
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	2380      	movs	r3, #128	@ 0x80
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	429a      	cmp	r2, r3
 800146c:	d137      	bne.n	80014de <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800146e:	4b27      	ldr	r3, [pc, #156]	@ (800150c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	23c0      	movs	r3, #192	@ 0xc0
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	401a      	ands	r2, r3
 8001478:	2380      	movs	r3, #128	@ 0x80
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	429a      	cmp	r2, r3
 800147e:	d040      	beq.n	8001502 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001480:	4b22      	ldr	r3, [pc, #136]	@ (800150c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a22      	ldr	r2, [pc, #136]	@ (8001510 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8001486:	401a      	ands	r2, r3
 8001488:	4b20      	ldr	r3, [pc, #128]	@ (800150c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800148a:	2180      	movs	r1, #128	@ 0x80
 800148c:	0089      	lsls	r1, r1, #2
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001492:	4b20      	ldr	r3, [pc, #128]	@ (8001514 <HAL_PWREx_ControlVoltageScaling+0xb8>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2232      	movs	r2, #50	@ 0x32
 8001498:	4353      	muls	r3, r2
 800149a:	491f      	ldr	r1, [pc, #124]	@ (8001518 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 800149c:	0018      	movs	r0, r3
 800149e:	f7fe fe33 	bl	8000108 <__udivsi3>
 80014a2:	0003      	movs	r3, r0
 80014a4:	3301      	adds	r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014a8:	e002      	b.n	80014b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3b01      	subs	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014b0:	4b16      	ldr	r3, [pc, #88]	@ (800150c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80014b2:	695a      	ldr	r2, [r3, #20]
 80014b4:	2380      	movs	r3, #128	@ 0x80
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	401a      	ands	r2, r3
 80014ba:	2380      	movs	r3, #128	@ 0x80
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	429a      	cmp	r2, r3
 80014c0:	d102      	bne.n	80014c8 <HAL_PWREx_ControlVoltageScaling+0x6c>
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f0      	bne.n	80014aa <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80014ca:	695a      	ldr	r2, [r3, #20]
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	401a      	ands	r2, r3
 80014d2:	2380      	movs	r3, #128	@ 0x80
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d113      	bne.n	8001502 <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e012      	b.n	8001504 <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014de:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	23c0      	movs	r3, #192	@ 0xc0
 80014e4:	00db      	lsls	r3, r3, #3
 80014e6:	401a      	ands	r2, r3
 80014e8:	2380      	movs	r3, #128	@ 0x80
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d008      	beq.n	8001502 <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a06      	ldr	r2, [pc, #24]	@ (8001510 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80014f6:	401a      	ands	r2, r3
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80014fa:	2180      	movs	r1, #128	@ 0x80
 80014fc:	00c9      	lsls	r1, r1, #3
 80014fe:	430a      	orrs	r2, r1
 8001500:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b004      	add	sp, #16
 800150a:	bd80      	pop	{r7, pc}
 800150c:	40007000 	.word	0x40007000
 8001510:	fffff9ff 	.word	0xfffff9ff
 8001514:	20000000 	.word	0x20000000
 8001518:	000f4240 	.word	0x000f4240

0800151c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001520:	4b03      	ldr	r3, [pc, #12]	@ (8001530 <HAL_PWREx_GetVoltageRange+0x14>)
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	23c0      	movs	r3, #192	@ 0xc0
 8001526:	00db      	lsls	r3, r3, #3
 8001528:	4013      	ands	r3, r2
}
 800152a:	0018      	movs	r0, r3
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40007000 	.word	0x40007000

08001534 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001534:	b5b0      	push	{r4, r5, r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800153c:	4bc8      	ldr	r3, [pc, #800]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2238      	movs	r2, #56	@ 0x38
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001546:	4bc6      	ldr	r3, [pc, #792]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001548:	68db      	ldr	r3, [r3, #12]
 800154a:	2203      	movs	r2, #3
 800154c:	4013      	ands	r3, r2
 800154e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2210      	movs	r2, #16
 8001556:	4013      	ands	r3, r2
 8001558:	d100      	bne.n	800155c <HAL_RCC_OscConfig+0x28>
 800155a:	e0ee      	b.n	800173a <HAL_RCC_OscConfig+0x206>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d007      	beq.n	8001572 <HAL_RCC_OscConfig+0x3e>
 8001562:	69bb      	ldr	r3, [r7, #24]
 8001564:	2b18      	cmp	r3, #24
 8001566:	d000      	beq.n	800156a <HAL_RCC_OscConfig+0x36>
 8001568:	e093      	b.n	8001692 <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d000      	beq.n	8001572 <HAL_RCC_OscConfig+0x3e>
 8001570:	e08f      	b.n	8001692 <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001572:	4bbb      	ldr	r3, [pc, #748]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	d006      	beq.n	800158a <HAL_RCC_OscConfig+0x56>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d102      	bne.n	800158a <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	f000 fbae 	bl	8001ce6 <HAL_RCC_OscConfig+0x7b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800158e:	4bb4      	ldr	r3, [pc, #720]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2108      	movs	r1, #8
 8001594:	400b      	ands	r3, r1
 8001596:	d004      	beq.n	80015a2 <HAL_RCC_OscConfig+0x6e>
 8001598:	4bb1      	ldr	r3, [pc, #708]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	21f0      	movs	r1, #240	@ 0xf0
 800159e:	400b      	ands	r3, r1
 80015a0:	e005      	b.n	80015ae <HAL_RCC_OscConfig+0x7a>
 80015a2:	49af      	ldr	r1, [pc, #700]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80015a4:	2394      	movs	r3, #148	@ 0x94
 80015a6:	58cb      	ldr	r3, [r1, r3]
 80015a8:	091b      	lsrs	r3, r3, #4
 80015aa:	21f0      	movs	r1, #240	@ 0xf0
 80015ac:	400b      	ands	r3, r1
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d225      	bcs.n	80015fe <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015b6:	0018      	movs	r0, r3
 80015b8:	f000 fd4c 	bl	8002054 <RCC_SetFlashLatencyFromMSIRange>
 80015bc:	1e03      	subs	r3, r0, #0
 80015be:	d002      	beq.n	80015c6 <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f000 fb90 	bl	8001ce6 <HAL_RCC_OscConfig+0x7b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c6:	4ba6      	ldr	r3, [pc, #664]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4ba5      	ldr	r3, [pc, #660]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	2108      	movs	r1, #8
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	4ba3      	ldr	r3, [pc, #652]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	22f0      	movs	r2, #240	@ 0xf0
 80015d8:	4393      	bics	r3, r2
 80015da:	0019      	movs	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015e0:	4b9f      	ldr	r3, [pc, #636]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b9e      	ldr	r3, [pc, #632]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4a9e      	ldr	r2, [pc, #632]	@ (8001864 <HAL_RCC_OscConfig+0x330>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	021a      	lsls	r2, r3, #8
 80015f6:	4b9a      	ldr	r3, [pc, #616]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	e027      	b.n	800164e <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015fe:	4b98      	ldr	r3, [pc, #608]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	4b97      	ldr	r3, [pc, #604]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001604:	2108      	movs	r1, #8
 8001606:	430a      	orrs	r2, r1
 8001608:	601a      	str	r2, [r3, #0]
 800160a:	4b95      	ldr	r3, [pc, #596]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	22f0      	movs	r2, #240	@ 0xf0
 8001610:	4393      	bics	r3, r2
 8001612:	0019      	movs	r1, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001618:	4b91      	ldr	r3, [pc, #580]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800161a:	430a      	orrs	r2, r1
 800161c:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800161e:	4b90      	ldr	r3, [pc, #576]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a90      	ldr	r2, [pc, #576]	@ (8001864 <HAL_RCC_OscConfig+0x330>)
 8001624:	4013      	ands	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	021a      	lsls	r2, r3, #8
 800162e:	4b8c      	ldr	r3, [pc, #560]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001630:	430a      	orrs	r2, r1
 8001632:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d109      	bne.n	800164e <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800163e:	0018      	movs	r0, r3
 8001640:	f000 fd08 	bl	8002054 <RCC_SetFlashLatencyFromMSIRange>
 8001644:	1e03      	subs	r3, r0, #0
 8001646:	d002      	beq.n	800164e <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	f000 fb4c 	bl	8001ce6 <HAL_RCC_OscConfig+0x7b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800164e:	f000 fc43 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001652:	0001      	movs	r1, r0
 8001654:	4b82      	ldr	r3, [pc, #520]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001656:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001658:	0a1b      	lsrs	r3, r3, #8
 800165a:	220f      	movs	r2, #15
 800165c:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 800165e:	4a82      	ldr	r2, [pc, #520]	@ (8001868 <HAL_RCC_OscConfig+0x334>)
 8001660:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001662:	001a      	movs	r2, r3
 8001664:	231f      	movs	r3, #31
 8001666:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001668:	000a      	movs	r2, r1
 800166a:	40da      	lsrs	r2, r3
 800166c:	4b7f      	ldr	r3, [pc, #508]	@ (800186c <HAL_RCC_OscConfig+0x338>)
 800166e:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001670:	4b7f      	ldr	r3, [pc, #508]	@ (8001870 <HAL_RCC_OscConfig+0x33c>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	250f      	movs	r5, #15
 8001676:	197c      	adds	r4, r7, r5
 8001678:	0018      	movs	r0, r3
 800167a:	f7ff fc4d 	bl	8000f18 <HAL_InitTick>
 800167e:	0003      	movs	r3, r0
 8001680:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 8001682:	197b      	adds	r3, r7, r5
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d056      	beq.n	8001738 <HAL_RCC_OscConfig+0x204>
        {
          return status;
 800168a:	197b      	adds	r3, r7, r5
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	f000 fb2a 	bl	8001ce6 <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69db      	ldr	r3, [r3, #28]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d034      	beq.n	8001704 <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800169a:	4b71      	ldr	r3, [pc, #452]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	4b70      	ldr	r3, [pc, #448]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fc91 	bl	8000fcc <HAL_GetTick>
 80016aa:	0003      	movs	r3, r0
 80016ac:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80016b0:	f7ff fc8c 	bl	8000fcc <HAL_GetTick>
 80016b4:	0002      	movs	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e311      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016c2:	4b67      	ldr	r3, [pc, #412]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	2202      	movs	r2, #2
 80016c8:	4013      	ands	r3, r2
 80016ca:	d0f1      	beq.n	80016b0 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016cc:	4b64      	ldr	r3, [pc, #400]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b63      	ldr	r3, [pc, #396]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	2108      	movs	r1, #8
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	4b61      	ldr	r3, [pc, #388]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	22f0      	movs	r2, #240	@ 0xf0
 80016de:	4393      	bics	r3, r2
 80016e0:	0019      	movs	r1, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80016e8:	430a      	orrs	r2, r1
 80016ea:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ec:	4b5c      	ldr	r3, [pc, #368]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a5c      	ldr	r2, [pc, #368]	@ (8001864 <HAL_RCC_OscConfig+0x330>)
 80016f2:	4013      	ands	r3, r2
 80016f4:	0019      	movs	r1, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1b      	ldr	r3, [r3, #32]
 80016fa:	021a      	lsls	r2, r3, #8
 80016fc:	4b58      	ldr	r3, [pc, #352]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80016fe:	430a      	orrs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]
 8001702:	e01a      	b.n	800173a <HAL_RCC_OscConfig+0x206>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001704:	4b56      	ldr	r3, [pc, #344]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b55      	ldr	r3, [pc, #340]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800170a:	2101      	movs	r1, #1
 800170c:	438a      	bics	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001710:	f7ff fc5c 	bl	8000fcc <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 800171a:	f7ff fc57 	bl	8000fcc <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e2dc      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800172c:	4b4c      	ldr	r3, [pc, #304]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2202      	movs	r2, #2
 8001732:	4013      	ands	r3, r2
 8001734:	d1f1      	bne.n	800171a <HAL_RCC_OscConfig+0x1e6>
 8001736:	e000      	b.n	800173a <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001738:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2201      	movs	r2, #1
 8001740:	4013      	ands	r3, r2
 8001742:	d100      	bne.n	8001746 <HAL_RCC_OscConfig+0x212>
 8001744:	e065      	b.n	8001812 <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b10      	cmp	r3, #16
 800174a:	d005      	beq.n	8001758 <HAL_RCC_OscConfig+0x224>
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	2b18      	cmp	r3, #24
 8001750:	d10e      	bne.n	8001770 <HAL_RCC_OscConfig+0x23c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d10b      	bne.n	8001770 <HAL_RCC_OscConfig+0x23c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	4b41      	ldr	r3, [pc, #260]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	@ 0x80
 800175e:	029b      	lsls	r3, r3, #10
 8001760:	4013      	ands	r3, r2
 8001762:	d055      	beq.n	8001810 <HAL_RCC_OscConfig+0x2dc>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d151      	bne.n	8001810 <HAL_RCC_OscConfig+0x2dc>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e2ba      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	2380      	movs	r3, #128	@ 0x80
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	429a      	cmp	r2, r3
 800177a:	d107      	bne.n	800178c <HAL_RCC_OscConfig+0x258>
 800177c:	4b38      	ldr	r3, [pc, #224]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b37      	ldr	r3, [pc, #220]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001782:	2180      	movs	r1, #128	@ 0x80
 8001784:	0249      	lsls	r1, r1, #9
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e013      	b.n	80017b4 <HAL_RCC_OscConfig+0x280>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	23a0      	movs	r3, #160	@ 0xa0
 8001792:	02db      	lsls	r3, r3, #11
 8001794:	429a      	cmp	r2, r3
 8001796:	d107      	bne.n	80017a8 <HAL_RCC_OscConfig+0x274>
 8001798:	4b31      	ldr	r3, [pc, #196]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4b30      	ldr	r3, [pc, #192]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800179e:	21a0      	movs	r1, #160	@ 0xa0
 80017a0:	02c9      	lsls	r1, r1, #11
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e005      	b.n	80017b4 <HAL_RCC_OscConfig+0x280>
 80017a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80017ae:	4931      	ldr	r1, [pc, #196]	@ (8001874 <HAL_RCC_OscConfig+0x340>)
 80017b0:	400a      	ands	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d014      	beq.n	80017e6 <HAL_RCC_OscConfig+0x2b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017bc:	f7ff fc06 	bl	8000fcc <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80017c6:	f7ff fc01 	bl	8000fcc <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b64      	cmp	r3, #100	@ 0x64
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e286      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d8:	4b21      	ldr	r3, [pc, #132]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	2380      	movs	r3, #128	@ 0x80
 80017de:	029b      	lsls	r3, r3, #10
 80017e0:	4013      	ands	r3, r2
 80017e2:	d0f0      	beq.n	80017c6 <HAL_RCC_OscConfig+0x292>
 80017e4:	e015      	b.n	8001812 <HAL_RCC_OscConfig+0x2de>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e6:	f7ff fbf1 	bl	8000fcc <HAL_GetTick>
 80017ea:	0003      	movs	r3, r0
 80017ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80017f0:	f7ff fbec 	bl	8000fcc <HAL_GetTick>
 80017f4:	0002      	movs	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b64      	cmp	r3, #100	@ 0x64
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e271      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001804:	681a      	ldr	r2, [r3, #0]
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	029b      	lsls	r3, r3, #10
 800180a:	4013      	ands	r3, r2
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x2bc>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x2de>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001810:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2202      	movs	r2, #2
 8001818:	4013      	ands	r3, r2
 800181a:	d100      	bne.n	800181e <HAL_RCC_OscConfig+0x2ea>
 800181c:	e073      	b.n	8001906 <HAL_RCC_OscConfig+0x3d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b08      	cmp	r3, #8
 8001822:	d005      	beq.n	8001830 <HAL_RCC_OscConfig+0x2fc>
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b18      	cmp	r3, #24
 8001828:	d128      	bne.n	800187c <HAL_RCC_OscConfig+0x348>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d125      	bne.n	800187c <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001830:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	4013      	ands	r3, r2
 800183a:	d005      	beq.n	8001848 <HAL_RCC_OscConfig+0x314>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d101      	bne.n	8001848 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e24e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	4b05      	ldr	r3, [pc, #20]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4a0a      	ldr	r2, [pc, #40]	@ (8001878 <HAL_RCC_OscConfig+0x344>)
 800184e:	4013      	ands	r3, r2
 8001850:	0019      	movs	r1, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	061a      	lsls	r2, r3, #24
 8001858:	4b01      	ldr	r3, [pc, #4]	@ (8001860 <HAL_RCC_OscConfig+0x32c>)
 800185a:	430a      	orrs	r2, r1
 800185c:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800185e:	e052      	b.n	8001906 <HAL_RCC_OscConfig+0x3d2>
 8001860:	40021000 	.word	0x40021000
 8001864:	ffff00ff 	.word	0xffff00ff
 8001868:	080046f8 	.word	0x080046f8
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004
 8001874:	fffaffff 	.word	0xfffaffff
 8001878:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d026      	beq.n	80018d2 <HAL_RCC_OscConfig+0x39e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001884:	4bc7      	ldr	r3, [pc, #796]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4bc6      	ldr	r3, [pc, #792]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 800188a:	2180      	movs	r1, #128	@ 0x80
 800188c:	0049      	lsls	r1, r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fb9b 	bl	8000fcc <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x37a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800189c:	f7ff fb96 	bl	8000fcc <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x37a>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e21b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018ae:	4bbd      	ldr	r3, [pc, #756]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4013      	ands	r3, r2
 80018b8:	d0f0      	beq.n	800189c <HAL_RCC_OscConfig+0x368>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ba:	4bba      	ldr	r3, [pc, #744]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4aba      	ldr	r2, [pc, #744]	@ (8001ba8 <HAL_RCC_OscConfig+0x674>)
 80018c0:	4013      	ands	r3, r2
 80018c2:	0019      	movs	r1, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	061a      	lsls	r2, r3, #24
 80018ca:	4bb6      	ldr	r3, [pc, #728]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	605a      	str	r2, [r3, #4]
 80018d0:	e019      	b.n	8001906 <HAL_RCC_OscConfig+0x3d2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018d2:	4bb4      	ldr	r3, [pc, #720]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	4bb3      	ldr	r3, [pc, #716]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80018d8:	49b4      	ldr	r1, [pc, #720]	@ (8001bac <HAL_RCC_OscConfig+0x678>)
 80018da:	400a      	ands	r2, r1
 80018dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff fb75 	bl	8000fcc <HAL_GetTick>
 80018e2:	0003      	movs	r3, r0
 80018e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x3c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80018e8:	f7ff fb70 	bl	8000fcc <HAL_GetTick>
 80018ec:	0002      	movs	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e1f5      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018fa:	4baa      	ldr	r3, [pc, #680]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	2380      	movs	r3, #128	@ 0x80
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4013      	ands	r3, r2
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2208      	movs	r2, #8
 800190c:	4013      	ands	r3, r2
 800190e:	d051      	beq.n	80019b4 <HAL_RCC_OscConfig+0x480>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d031      	beq.n	800197c <HAL_RCC_OscConfig+0x448>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d108      	bne.n	8001932 <HAL_RCC_OscConfig+0x3fe>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8001920:	4aa0      	ldr	r2, [pc, #640]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001922:	2394      	movs	r3, #148	@ 0x94
 8001924:	58d3      	ldr	r3, [r2, r3]
 8001926:	499f      	ldr	r1, [pc, #636]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001928:	2204      	movs	r2, #4
 800192a:	4393      	bics	r3, r2
 800192c:	2294      	movs	r2, #148	@ 0x94
 800192e:	508b      	str	r3, [r1, r2]
 8001930:	e007      	b.n	8001942 <HAL_RCC_OscConfig+0x40e>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 8001932:	4a9c      	ldr	r2, [pc, #624]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001934:	2394      	movs	r3, #148	@ 0x94
 8001936:	58d3      	ldr	r3, [r2, r3]
 8001938:	499a      	ldr	r1, [pc, #616]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 800193a:	2204      	movs	r2, #4
 800193c:	4313      	orrs	r3, r2
 800193e:	2294      	movs	r2, #148	@ 0x94
 8001940:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001942:	4a98      	ldr	r2, [pc, #608]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001944:	2394      	movs	r3, #148	@ 0x94
 8001946:	58d3      	ldr	r3, [r2, r3]
 8001948:	4996      	ldr	r1, [pc, #600]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 800194a:	2201      	movs	r2, #1
 800194c:	4313      	orrs	r3, r2
 800194e:	2294      	movs	r2, #148	@ 0x94
 8001950:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001952:	f7ff fb3b 	bl	8000fcc <HAL_GetTick>
 8001956:	0003      	movs	r3, r0
 8001958:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff fb36 	bl	8000fcc <HAL_GetTick>
 8001960:	0002      	movs	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b11      	cmp	r3, #17
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1bb      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800196e:	4a8d      	ldr	r2, [pc, #564]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001970:	2394      	movs	r3, #148	@ 0x94
 8001972:	58d3      	ldr	r3, [r2, r3]
 8001974:	2202      	movs	r2, #2
 8001976:	4013      	ands	r3, r2
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x428>
 800197a:	e01b      	b.n	80019b4 <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197c:	4a89      	ldr	r2, [pc, #548]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 800197e:	2394      	movs	r3, #148	@ 0x94
 8001980:	58d3      	ldr	r3, [r2, r3]
 8001982:	4988      	ldr	r1, [pc, #544]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001984:	2201      	movs	r2, #1
 8001986:	4393      	bics	r3, r2
 8001988:	2294      	movs	r2, #148	@ 0x94
 800198a:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fb1e 	bl	8000fcc <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x474>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff fb19 	bl	8000fcc <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b11      	cmp	r3, #17
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x474>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e19e      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019a8:	4a7e      	ldr	r2, [pc, #504]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80019aa:	2394      	movs	r3, #148	@ 0x94
 80019ac:	58d3      	ldr	r3, [r2, r3]
 80019ae:	2202      	movs	r2, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	d1f0      	bne.n	8001996 <HAL_RCC_OscConfig+0x462>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2204      	movs	r2, #4
 80019ba:	4013      	ands	r3, r2
 80019bc:	d100      	bne.n	80019c0 <HAL_RCC_OscConfig+0x48c>
 80019be:	e10d      	b.n	8001bdc <HAL_RCC_OscConfig+0x6a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c0:	201f      	movs	r0, #31
 80019c2:	183b      	adds	r3, r7, r0
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 80019c8:	4b76      	ldr	r3, [pc, #472]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80019ca:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	055b      	lsls	r3, r3, #21
 80019d0:	4013      	ands	r3, r2
 80019d2:	d110      	bne.n	80019f6 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d4:	4b73      	ldr	r3, [pc, #460]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80019d6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019d8:	4b72      	ldr	r3, [pc, #456]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80019da:	2180      	movs	r1, #128	@ 0x80
 80019dc:	0549      	lsls	r1, r1, #21
 80019de:	430a      	orrs	r2, r1
 80019e0:	659a      	str	r2, [r3, #88]	@ 0x58
 80019e2:	4b70      	ldr	r3, [pc, #448]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 80019e4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019e6:	2380      	movs	r3, #128	@ 0x80
 80019e8:	055b      	lsls	r3, r3, #21
 80019ea:	4013      	ands	r3, r2
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f0:	183b      	adds	r3, r7, r0
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f6:	4b6e      	ldr	r3, [pc, #440]	@ (8001bb0 <HAL_RCC_OscConfig+0x67c>)
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	2380      	movs	r3, #128	@ 0x80
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4013      	ands	r3, r2
 8001a00:	d11a      	bne.n	8001a38 <HAL_RCC_OscConfig+0x504>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a02:	4b6b      	ldr	r3, [pc, #428]	@ (8001bb0 <HAL_RCC_OscConfig+0x67c>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	4b6a      	ldr	r3, [pc, #424]	@ (8001bb0 <HAL_RCC_OscConfig+0x67c>)
 8001a08:	2180      	movs	r1, #128	@ 0x80
 8001a0a:	0049      	lsls	r1, r1, #1
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a10:	f7ff fadc 	bl	8000fcc <HAL_GetTick>
 8001a14:	0003      	movs	r3, r0
 8001a16:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a1a:	f7ff fad7 	bl	8000fcc <HAL_GetTick>
 8001a1e:	0002      	movs	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e15c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2c:	4b60      	ldr	r3, [pc, #384]	@ (8001bb0 <HAL_RCC_OscConfig+0x67c>)
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	2380      	movs	r3, #128	@ 0x80
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4013      	ands	r3, r2
 8001a36:	d0f0      	beq.n	8001a1a <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d01e      	beq.n	8001a80 <HAL_RCC_OscConfig+0x54c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2204      	movs	r2, #4
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d010      	beq.n	8001a6e <HAL_RCC_OscConfig+0x53a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a4c:	4a55      	ldr	r2, [pc, #340]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001a4e:	2390      	movs	r3, #144	@ 0x90
 8001a50:	58d3      	ldr	r3, [r2, r3]
 8001a52:	4954      	ldr	r1, [pc, #336]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001a54:	2204      	movs	r2, #4
 8001a56:	4313      	orrs	r3, r2
 8001a58:	2290      	movs	r2, #144	@ 0x90
 8001a5a:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a5c:	4a51      	ldr	r2, [pc, #324]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001a5e:	2390      	movs	r3, #144	@ 0x90
 8001a60:	58d3      	ldr	r3, [r2, r3]
 8001a62:	4950      	ldr	r1, [pc, #320]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	4313      	orrs	r3, r2
 8001a68:	2290      	movs	r2, #144	@ 0x90
 8001a6a:	508b      	str	r3, [r1, r2]
 8001a6c:	e018      	b.n	8001aa0 <HAL_RCC_OscConfig+0x56c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a6e:	4a4d      	ldr	r2, [pc, #308]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001a70:	2390      	movs	r3, #144	@ 0x90
 8001a72:	58d3      	ldr	r3, [r2, r3]
 8001a74:	494b      	ldr	r1, [pc, #300]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	2290      	movs	r2, #144	@ 0x90
 8001a7c:	508b      	str	r3, [r1, r2]
 8001a7e:	e00f      	b.n	8001aa0 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a80:	4a48      	ldr	r2, [pc, #288]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001a82:	2390      	movs	r3, #144	@ 0x90
 8001a84:	58d3      	ldr	r3, [r2, r3]
 8001a86:	4947      	ldr	r1, [pc, #284]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001a88:	2201      	movs	r2, #1
 8001a8a:	4393      	bics	r3, r2
 8001a8c:	2290      	movs	r2, #144	@ 0x90
 8001a8e:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a90:	4a44      	ldr	r2, [pc, #272]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001a92:	2390      	movs	r3, #144	@ 0x90
 8001a94:	58d3      	ldr	r3, [r2, r3]
 8001a96:	4943      	ldr	r1, [pc, #268]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001a98:	2204      	movs	r2, #4
 8001a9a:	4393      	bics	r3, r2
 8001a9c:	2290      	movs	r2, #144	@ 0x90
 8001a9e:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d04f      	beq.n	8001b48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff fa90 	bl	8000fcc <HAL_GetTick>
 8001aac:	0003      	movs	r3, r0
 8001aae:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab0:	e009      	b.n	8001ac6 <HAL_RCC_OscConfig+0x592>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab2:	f7ff fa8b 	bl	8000fcc <HAL_GetTick>
 8001ab6:	0002      	movs	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	4a3d      	ldr	r2, [pc, #244]	@ (8001bb4 <HAL_RCC_OscConfig+0x680>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e10f      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac6:	4a37      	ldr	r2, [pc, #220]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001ac8:	2390      	movs	r3, #144	@ 0x90
 8001aca:	58d3      	ldr	r3, [r2, r3]
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d0ef      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x57e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2280      	movs	r2, #128	@ 0x80
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d01a      	beq.n	8001b12 <HAL_RCC_OscConfig+0x5de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001adc:	4a31      	ldr	r2, [pc, #196]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001ade:	2390      	movs	r3, #144	@ 0x90
 8001ae0:	58d3      	ldr	r3, [r2, r3]
 8001ae2:	4930      	ldr	r1, [pc, #192]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001ae4:	2280      	movs	r2, #128	@ 0x80
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	2290      	movs	r2, #144	@ 0x90
 8001aea:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001aec:	e009      	b.n	8001b02 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aee:	f7ff fa6d 	bl	8000fcc <HAL_GetTick>
 8001af2:	0002      	movs	r2, r0
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	4a2e      	ldr	r2, [pc, #184]	@ (8001bb4 <HAL_RCC_OscConfig+0x680>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e0f1      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001b02:	4a28      	ldr	r2, [pc, #160]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001b04:	2390      	movs	r3, #144	@ 0x90
 8001b06:	58d2      	ldr	r2, [r2, r3]
 8001b08:	2380      	movs	r3, #128	@ 0x80
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d0ee      	beq.n	8001aee <HAL_RCC_OscConfig+0x5ba>
 8001b10:	e059      	b.n	8001bc6 <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b12:	4a24      	ldr	r2, [pc, #144]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001b14:	2390      	movs	r3, #144	@ 0x90
 8001b16:	58d3      	ldr	r3, [r2, r3]
 8001b18:	4922      	ldr	r1, [pc, #136]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001b1a:	2280      	movs	r2, #128	@ 0x80
 8001b1c:	4393      	bics	r3, r2
 8001b1e:	2290      	movs	r2, #144	@ 0x90
 8001b20:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b22:	e009      	b.n	8001b38 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b24:	f7ff fa52 	bl	8000fcc <HAL_GetTick>
 8001b28:	0002      	movs	r2, r0
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	4a21      	ldr	r2, [pc, #132]	@ (8001bb4 <HAL_RCC_OscConfig+0x680>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e0d6      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b38:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001b3a:	2390      	movs	r3, #144	@ 0x90
 8001b3c:	58d2      	ldr	r2, [r2, r3]
 8001b3e:	2380      	movs	r3, #128	@ 0x80
 8001b40:	011b      	lsls	r3, r3, #4
 8001b42:	4013      	ands	r3, r2
 8001b44:	d1ee      	bne.n	8001b24 <HAL_RCC_OscConfig+0x5f0>
 8001b46:	e03e      	b.n	8001bc6 <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff fa40 	bl	8000fcc <HAL_GetTick>
 8001b4c:	0003      	movs	r3, r0
 8001b4e:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b50:	e009      	b.n	8001b66 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7ff fa3b 	bl	8000fcc <HAL_GetTick>
 8001b56:	0002      	movs	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	4a15      	ldr	r2, [pc, #84]	@ (8001bb4 <HAL_RCC_OscConfig+0x680>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e0bf      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b66:	4a0f      	ldr	r2, [pc, #60]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001b68:	2390      	movs	r3, #144	@ 0x90
 8001b6a:	58d3      	ldr	r3, [r2, r3]
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d1ef      	bne.n	8001b52 <HAL_RCC_OscConfig+0x61e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001b72:	4a0c      	ldr	r2, [pc, #48]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001b74:	2390      	movs	r3, #144	@ 0x90
 8001b76:	58d3      	ldr	r3, [r2, r3]
 8001b78:	2280      	movs	r2, #128	@ 0x80
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d023      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x692>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001b80:	2390      	movs	r3, #144	@ 0x90
 8001b82:	58d3      	ldr	r3, [r2, r3]
 8001b84:	4907      	ldr	r1, [pc, #28]	@ (8001ba4 <HAL_RCC_OscConfig+0x670>)
 8001b86:	2280      	movs	r2, #128	@ 0x80
 8001b88:	4393      	bics	r3, r2
 8001b8a:	2290      	movs	r2, #144	@ 0x90
 8001b8c:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b8e:	e013      	b.n	8001bb8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b90:	f7ff fa1c 	bl	8000fcc <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	4a06      	ldr	r2, [pc, #24]	@ (8001bb4 <HAL_RCC_OscConfig+0x680>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d90b      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e0a0      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	80ffffff 	.word	0x80ffffff
 8001bac:	fffffeff 	.word	0xfffffeff
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001bb8:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001bba:	2390      	movs	r3, #144	@ 0x90
 8001bbc:	58d2      	ldr	r2, [r2, r3]
 8001bbe:	2380      	movs	r3, #128	@ 0x80
 8001bc0:	011b      	lsls	r3, r3, #4
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d1e4      	bne.n	8001b90 <HAL_RCC_OscConfig+0x65c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001bc6:	231f      	movs	r3, #31
 8001bc8:	18fb      	adds	r3, r7, r3
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d105      	bne.n	8001bdc <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd0:	4b47      	ldr	r3, [pc, #284]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001bd2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001bd4:	4b46      	ldr	r3, [pc, #280]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001bd6:	4947      	ldr	r1, [pc, #284]	@ (8001cf4 <HAL_RCC_OscConfig+0x7c0>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	659a      	str	r2, [r3, #88]	@ 0x58
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d100      	bne.n	8001be6 <HAL_RCC_OscConfig+0x6b2>
 8001be4:	e07e      	b.n	8001ce4 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001be6:	4b42      	ldr	r3, [pc, #264]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	2238      	movs	r2, #56	@ 0x38
 8001bec:	4013      	ands	r3, r2
 8001bee:	2b18      	cmp	r3, #24
 8001bf0:	d100      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x6c0>
 8001bf2:	e075      	b.n	8001ce0 <HAL_RCC_OscConfig+0x7ac>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d156      	bne.n	8001caa <HAL_RCC_OscConfig+0x776>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bfc:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001c02:	493d      	ldr	r1, [pc, #244]	@ (8001cf8 <HAL_RCC_OscConfig+0x7c4>)
 8001c04:	400a      	ands	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c08:	f7ff f9e0 	bl	8000fcc <HAL_GetTick>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x6f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff f9db 	bl	8000fcc <HAL_GetTick>
 8001c16:	0002      	movs	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e060      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c24:	4b32      	ldr	r3, [pc, #200]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2380      	movs	r3, #128	@ 0x80
 8001c2a:	049b      	lsls	r3, r3, #18
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	d1f0      	bne.n	8001c12 <HAL_RCC_OscConfig+0x6de>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c30:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a31      	ldr	r2, [pc, #196]	@ (8001cfc <HAL_RCC_OscConfig+0x7c8>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	0019      	movs	r1, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	4b24      	ldr	r3, [pc, #144]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001c60:	430a      	orrs	r2, r1
 8001c62:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8001c64:	4b22      	ldr	r3, [pc, #136]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001c66:	68da      	ldr	r2, [r3, #12]
 8001c68:	4b21      	ldr	r3, [pc, #132]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001c6a:	2180      	movs	r1, #128	@ 0x80
 8001c6c:	0549      	lsls	r1, r1, #21
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c72:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001c78:	2180      	movs	r1, #128	@ 0x80
 8001c7a:	0449      	lsls	r1, r1, #17
 8001c7c:	430a      	orrs	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff f9a4 	bl	8000fcc <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x768>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8a:	f7ff f99f 	bl	8000fcc <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x768>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e024      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9c:	4b14      	ldr	r3, [pc, #80]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	049b      	lsls	r3, r3, #18
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x756>
 8001ca8:	e01c      	b.n	8001ce4 <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001cb0:	4911      	ldr	r1, [pc, #68]	@ (8001cf8 <HAL_RCC_OscConfig+0x7c4>)
 8001cb2:	400a      	ands	r2, r1
 8001cb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb6:	f7ff f989 	bl	8000fcc <HAL_GetTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x79e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f984 	bl	8000fcc <HAL_GetTick>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x79e>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e009      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd2:	4b07      	ldr	r3, [pc, #28]	@ (8001cf0 <HAL_RCC_OscConfig+0x7bc>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	2380      	movs	r3, #128	@ 0x80
 8001cd8:	049b      	lsls	r3, r3, #18
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x78c>
 8001cde:	e001      	b.n	8001ce4 <HAL_RCC_OscConfig+0x7b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_RCC_OscConfig+0x7b2>
    }
  }
  return HAL_OK;
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	0018      	movs	r0, r3
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	b008      	add	sp, #32
 8001cec:	bdb0      	pop	{r4, r5, r7, pc}
 8001cee:	46c0      	nop			@ (mov r8, r8)
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	efffffff 	.word	0xefffffff
 8001cf8:	feffffff 	.word	0xfeffffff
 8001cfc:	11c1808c 	.word	0x11c1808c

08001d00 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b5b0      	push	{r4, r5, r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	2207      	movs	r2, #7
 8001d10:	4013      	ands	r3, r2
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d911      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d18:	4b68      	ldr	r3, [pc, #416]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2207      	movs	r2, #7
 8001d1e:	4393      	bics	r3, r2
 8001d20:	0019      	movs	r1, r3
 8001d22:	4b66      	ldr	r3, [pc, #408]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b64      	ldr	r3, [pc, #400]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2207      	movs	r2, #7
 8001d30:	4013      	ands	r3, r2
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0bb      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	d100      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x48>
 8001d46:	e064      	b.n	8001e12 <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b03      	cmp	r3, #3
 8001d4e:	d107      	bne.n	8001d60 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d50:	4b5b      	ldr	r3, [pc, #364]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d52:	681a      	ldr	r2, [r3, #0]
 8001d54:	2380      	movs	r3, #128	@ 0x80
 8001d56:	049b      	lsls	r3, r3, #18
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d138      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e0a9      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d107      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d68:	4b55      	ldr	r3, [pc, #340]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	2380      	movs	r3, #128	@ 0x80
 8001d6e:	029b      	lsls	r3, r3, #10
 8001d70:	4013      	ands	r3, r2
 8001d72:	d12c      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e09d      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d80:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2202      	movs	r2, #2
 8001d86:	4013      	ands	r3, r2
 8001d88:	d121      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e092      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d96:	4b4a      	ldr	r3, [pc, #296]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	2380      	movs	r3, #128	@ 0x80
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d115      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e086      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d107      	bne.n	8001dbe <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dae:	4a44      	ldr	r2, [pc, #272]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001db0:	2394      	movs	r3, #148	@ 0x94
 8001db2:	58d3      	ldr	r3, [r2, r3]
 8001db4:	2202      	movs	r2, #2
 8001db6:	4013      	ands	r3, r2
 8001db8:	d109      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e07a      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dbe:	4a40      	ldr	r2, [pc, #256]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	2390      	movs	r3, #144	@ 0x90
 8001dc2:	58d3      	ldr	r3, [r2, r3]
 8001dc4:	2202      	movs	r2, #2
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e072      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001dce:	4b3c      	ldr	r3, [pc, #240]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	2207      	movs	r2, #7
 8001dd4:	4393      	bics	r3, r2
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685a      	ldr	r2, [r3, #4]
 8001ddc:	4b38      	ldr	r3, [pc, #224]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001dde:	430a      	orrs	r2, r1
 8001de0:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001de2:	f7ff f8f3 	bl	8000fcc <HAL_GetTick>
 8001de6:	0003      	movs	r3, r0
 8001de8:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dea:	e009      	b.n	8001e00 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dec:	f7ff f8ee 	bl	8000fcc <HAL_GetTick>
 8001df0:	0002      	movs	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	4a33      	ldr	r2, [pc, #204]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d901      	bls.n	8001e00 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8001dfc:	2303      	movs	r3, #3
 8001dfe:	e059      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e00:	4b2f      	ldr	r3, [pc, #188]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	2238      	movs	r2, #56	@ 0x38
 8001e06:	401a      	ands	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	00db      	lsls	r3, r3, #3
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d1ec      	bne.n	8001dec <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2202      	movs	r2, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d009      	beq.n	8001e30 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1c:	4b28      	ldr	r3, [pc, #160]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4a29      	ldr	r2, [pc, #164]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	0019      	movs	r1, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	689a      	ldr	r2, [r3, #8]
 8001e2a:	4b25      	ldr	r3, [pc, #148]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e30:	4b22      	ldr	r3, [pc, #136]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2207      	movs	r2, #7
 8001e36:	4013      	ands	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d211      	bcs.n	8001e62 <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2207      	movs	r2, #7
 8001e44:	4393      	bics	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	4b1c      	ldr	r3, [pc, #112]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	683a      	ldr	r2, [r7, #0]
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e50:	4b1a      	ldr	r3, [pc, #104]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2207      	movs	r2, #7
 8001e56:	4013      	ands	r3, r2
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e028      	b.n	8001eb4 <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2204      	movs	r2, #4
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d009      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4a16      	ldr	r2, [pc, #88]	@ (8001ecc <HAL_RCC_ClockConfig+0x1cc>)
 8001e72:	4013      	ands	r3, r2
 8001e74:	0019      	movs	r1, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001e80:	f000 f82a 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8001e84:	0001      	movs	r1, r0
 8001e86:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e8a:	0a1b      	lsrs	r3, r3, #8
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001e90:	4a0f      	ldr	r2, [pc, #60]	@ (8001ed0 <HAL_RCC_ClockConfig+0x1d0>)
 8001e92:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e94:	001a      	movs	r2, r3
 8001e96:	231f      	movs	r3, #31
 8001e98:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001e9a:	000a      	movs	r2, r1
 8001e9c:	40da      	lsrs	r2, r3
 8001e9e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed4 <HAL_RCC_ClockConfig+0x1d4>)
 8001ea0:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8001ea2:	250b      	movs	r5, #11
 8001ea4:	197c      	adds	r4, r7, r5
 8001ea6:	2003      	movs	r0, #3
 8001ea8:	f7ff f836 	bl	8000f18 <HAL_InitTick>
 8001eac:	0003      	movs	r3, r0
 8001eae:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8001eb0:	197b      	adds	r3, r7, r5
 8001eb2:	781b      	ldrb	r3, [r3, #0]
}
 8001eb4:	0018      	movs	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	b004      	add	sp, #16
 8001eba:	bdb0      	pop	{r4, r5, r7, pc}
 8001ebc:	40022000 	.word	0x40022000
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	00001388 	.word	0x00001388
 8001ec8:	fffff0ff 	.word	0xfffff0ff
 8001ecc:	ffff8fff 	.word	0xffff8fff
 8001ed0:	080046f8 	.word	0x080046f8
 8001ed4:	20000000 	.word	0x20000000

08001ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	@ 0x28
 8001edc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee6:	4b46      	ldr	r3, [pc, #280]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x128>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2238      	movs	r2, #56	@ 0x38
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ef0:	4b43      	ldr	r3, [pc, #268]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x128>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2203      	movs	r2, #3
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x34>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b18      	cmp	r3, #24
 8001f04:	d125      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d122      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f0c:	4b3c      	ldr	r3, [pc, #240]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x128>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2208      	movs	r2, #8
 8001f12:	4013      	ands	r3, r2
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8001f16:	4a3a      	ldr	r2, [pc, #232]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x128>)
 8001f18:	2394      	movs	r3, #148	@ 0x94
 8001f1a:	58d3      	ldr	r3, [r2, r3]
 8001f1c:	0a1b      	lsrs	r3, r3, #8
 8001f1e:	220f      	movs	r2, #15
 8001f20:	4013      	ands	r3, r2
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f24:	e005      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f26:	4b36      	ldr	r3, [pc, #216]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x128>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	220f      	movs	r2, #15
 8001f2e:	4013      	ands	r3, r2
 8001f30:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8001f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f34:	2b0b      	cmp	r3, #11
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8001f3c:	4b31      	ldr	r3, [pc, #196]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x12c>)
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f40:	0092      	lsls	r2, r2, #2
 8001f42:	58d3      	ldr	r3, [r2, r3]
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d11b      	bne.n	8001f84 <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f50:	e018      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d102      	bne.n	8001f5e <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f58:	4b2b      	ldr	r3, [pc, #172]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x130>)
 8001f5a:	623b      	str	r3, [r7, #32]
 8001f5c:	e012      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	2b10      	cmp	r3, #16
 8001f62:	d102      	bne.n	8001f6a <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f64:	4b29      	ldr	r3, [pc, #164]	@ (800200c <HAL_RCC_GetSysClockFreq+0x134>)
 8001f66:	623b      	str	r3, [r7, #32]
 8001f68:	e00c      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d103      	bne.n	8001f78 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f70:	23fa      	movs	r3, #250	@ 0xfa
 8001f72:	01db      	lsls	r3, r3, #7
 8001f74:	623b      	str	r3, [r7, #32]
 8001f76:	e005      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	2b28      	cmp	r3, #40	@ 0x28
 8001f7c:	d102      	bne.n	8001f84 <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f7e:	2380      	movs	r3, #128	@ 0x80
 8001f80:	021b      	lsls	r3, r3, #8
 8001f82:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	2b18      	cmp	r3, #24
 8001f88:	d135      	bne.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x128>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	2203      	movs	r2, #3
 8001f90:	4013      	ands	r3, r2
 8001f92:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f94:	4b1a      	ldr	r3, [pc, #104]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x128>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d003      	beq.n	8001fb0 <HAL_RCC_GetSysClockFreq+0xd8>
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	2b03      	cmp	r3, #3
 8001fac:	d003      	beq.n	8001fb6 <HAL_RCC_GetSysClockFreq+0xde>
 8001fae:	e005      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8001fb0:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x130>)
 8001fb2:	61fb      	str	r3, [r7, #28]
        break;
 8001fb4:	e005      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8001fb6:	4b15      	ldr	r3, [pc, #84]	@ (800200c <HAL_RCC_GetSysClockFreq+0x134>)
 8001fb8:	61fb      	str	r3, [r7, #28]
        break;
 8001fba:	e002      	b.n	8001fc2 <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	61fb      	str	r3, [r7, #28]
        break;
 8001fc0:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x128>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	0a1b      	lsrs	r3, r3, #8
 8001fc8:	227f      	movs	r2, #127	@ 0x7f
 8001fca:	4013      	ands	r3, r2
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	4353      	muls	r3, r2
 8001fd0:	68f9      	ldr	r1, [r7, #12]
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f7fe f898 	bl	8000108 <__udivsi3>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fdc:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <HAL_RCC_GetSysClockFreq+0x128>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0f5b      	lsrs	r3, r3, #29
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	68b8      	ldr	r0, [r7, #8]
 8001fee:	f7fe f88b 	bl	8000108 <__udivsi3>
 8001ff2:	0003      	movs	r3, r0
 8001ff4:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b00a      	add	sp, #40	@ 0x28
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	08004710 	.word	0x08004710
 8002008:	00f42400 	.word	0x00f42400
 800200c:	003d0900 	.word	0x003d0900

08002010 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002014:	4b02      	ldr	r3, [pc, #8]	@ (8002020 <HAL_RCC_GetHCLKFreq+0x10>)
 8002016:	681b      	ldr	r3, [r3, #0]
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			@ (mov r8, r8)
 8002020:	20000000 	.word	0x20000000

08002024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8002028:	f7ff fff2 	bl	8002010 <HAL_RCC_GetHCLKFreq>
 800202c:	0001      	movs	r1, r0
 800202e:	4b07      	ldr	r3, [pc, #28]	@ (800204c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	0b1b      	lsrs	r3, r3, #12
 8002034:	2207      	movs	r2, #7
 8002036:	4013      	ands	r3, r2
 8002038:	4a05      	ldr	r2, [pc, #20]	@ (8002050 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800203a:	5cd3      	ldrb	r3, [r2, r3]
 800203c:	001a      	movs	r2, r3
 800203e:	231f      	movs	r3, #31
 8002040:	4013      	ands	r3, r2
 8002042:	40d9      	lsrs	r1, r3
 8002044:	000b      	movs	r3, r1
}
 8002046:	0018      	movs	r0, r3
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	08004708 	.word	0x08004708

08002054 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800205c:	2300      	movs	r3, #0
 800205e:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002060:	4b2f      	ldr	r3, [pc, #188]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002062:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002064:	2380      	movs	r3, #128	@ 0x80
 8002066:	055b      	lsls	r3, r3, #21
 8002068:	4013      	ands	r3, r2
 800206a:	d004      	beq.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800206c:	f7ff fa56 	bl	800151c <HAL_PWREx_GetVoltageRange>
 8002070:	0003      	movs	r3, r0
 8002072:	617b      	str	r3, [r7, #20]
 8002074:	e017      	b.n	80020a6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	4b2a      	ldr	r3, [pc, #168]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002078:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800207a:	4b29      	ldr	r3, [pc, #164]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800207c:	2180      	movs	r1, #128	@ 0x80
 800207e:	0549      	lsls	r1, r1, #21
 8002080:	430a      	orrs	r2, r1
 8002082:	659a      	str	r2, [r3, #88]	@ 0x58
 8002084:	4b26      	ldr	r3, [pc, #152]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002086:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002088:	2380      	movs	r3, #128	@ 0x80
 800208a:	055b      	lsls	r3, r3, #21
 800208c:	4013      	ands	r3, r2
 800208e:	60fb      	str	r3, [r7, #12]
 8002090:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002092:	f7ff fa43 	bl	800151c <HAL_PWREx_GetVoltageRange>
 8002096:	0003      	movs	r3, r0
 8002098:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800209a:	4b21      	ldr	r3, [pc, #132]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800209c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800209e:	4b20      	ldr	r3, [pc, #128]	@ (8002120 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 80020a0:	4920      	ldr	r1, [pc, #128]	@ (8002124 <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 80020a2:	400a      	ands	r2, r1
 80020a4:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020a6:	697a      	ldr	r2, [r7, #20]
 80020a8:	2380      	movs	r3, #128	@ 0x80
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d111      	bne.n	80020d4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b80      	cmp	r3, #128	@ 0x80
 80020b4:	d91c      	bls.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2bb0      	cmp	r3, #176	@ 0xb0
 80020ba:	d902      	bls.n	80020c2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020bc:	2302      	movs	r3, #2
 80020be:	613b      	str	r3, [r7, #16]
 80020c0:	e016      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b90      	cmp	r3, #144	@ 0x90
 80020c6:	d902      	bls.n	80020ce <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020c8:	2301      	movs	r3, #1
 80020ca:	613b      	str	r3, [r7, #16]
 80020cc:	e010      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	e00d      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80020d8:	d902      	bls.n	80020e0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80020da:	2302      	movs	r3, #2
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	e007      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b70      	cmp	r3, #112	@ 0x70
 80020e4:	d102      	bne.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80020e6:	2301      	movs	r3, #1
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e001      	b.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002128 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2207      	movs	r2, #7
 80020f6:	4393      	bics	r3, r2
 80020f8:	0019      	movs	r1, r3
 80020fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002128 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	430a      	orrs	r2, r1
 8002100:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8002102:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2207      	movs	r2, #7
 8002108:	4013      	ands	r3, r2
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	429a      	cmp	r2, r3
 800210e:	d001      	beq.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	0018      	movs	r0, r3
 8002118:	46bd      	mov	sp, r7
 800211a:	b006      	add	sp, #24
 800211c:	bd80      	pop	{r7, pc}
 800211e:	46c0      	nop			@ (mov r8, r8)
 8002120:	40021000 	.word	0x40021000
 8002124:	efffffff 	.word	0xefffffff
 8002128:	40022000 	.word	0x40022000

0800212c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002134:	2313      	movs	r3, #19
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800213c:	2312      	movs	r3, #18
 800213e:	18fb      	adds	r3, r7, r3
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	021b      	lsls	r3, r3, #8
 800214c:	4013      	ands	r3, r2
 800214e:	d100      	bne.n	8002152 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002150:	e0b7      	b.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002152:	2011      	movs	r0, #17
 8002154:	183b      	adds	r3, r7, r0
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215a:	4b4c      	ldr	r3, [pc, #304]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800215e:	2380      	movs	r3, #128	@ 0x80
 8002160:	055b      	lsls	r3, r3, #21
 8002162:	4013      	ands	r3, r2
 8002164:	d110      	bne.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	4b49      	ldr	r3, [pc, #292]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002168:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800216a:	4b48      	ldr	r3, [pc, #288]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216c:	2180      	movs	r1, #128	@ 0x80
 800216e:	0549      	lsls	r1, r1, #21
 8002170:	430a      	orrs	r2, r1
 8002172:	659a      	str	r2, [r3, #88]	@ 0x58
 8002174:	4b45      	ldr	r3, [pc, #276]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002176:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	055b      	lsls	r3, r3, #21
 800217c:	4013      	ands	r3, r2
 800217e:	60bb      	str	r3, [r7, #8]
 8002180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002182:	183b      	adds	r3, r7, r0
 8002184:	2201      	movs	r2, #1
 8002186:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002188:	4b41      	ldr	r3, [pc, #260]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b40      	ldr	r3, [pc, #256]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800218e:	2180      	movs	r1, #128	@ 0x80
 8002190:	0049      	lsls	r1, r1, #1
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002196:	f7fe ff19 	bl	8000fcc <HAL_GetTick>
 800219a:	0003      	movs	r3, r0
 800219c:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800219e:	e00b      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a0:	f7fe ff14 	bl	8000fcc <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d904      	bls.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80021ae:	2313      	movs	r3, #19
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2203      	movs	r2, #3
 80021b4:	701a      	strb	r2, [r3, #0]
        break;
 80021b6:	e005      	b.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021b8:	4b35      	ldr	r3, [pc, #212]	@ (8002290 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	2380      	movs	r3, #128	@ 0x80
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	4013      	ands	r3, r2
 80021c2:	d0ed      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80021c4:	2313      	movs	r3, #19
 80021c6:	18fb      	adds	r3, r7, r3
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d168      	bne.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021ce:	4a2f      	ldr	r2, [pc, #188]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d0:	2390      	movs	r3, #144	@ 0x90
 80021d2:	58d2      	ldr	r2, [r2, r3]
 80021d4:	23c0      	movs	r3, #192	@ 0xc0
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4013      	ands	r3, r2
 80021da:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d01f      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d01a      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021ec:	4a27      	ldr	r2, [pc, #156]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ee:	2390      	movs	r3, #144	@ 0x90
 80021f0:	58d3      	ldr	r3, [r2, r3]
 80021f2:	4a28      	ldr	r2, [pc, #160]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021f4:	4013      	ands	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021f8:	4a24      	ldr	r2, [pc, #144]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021fa:	2390      	movs	r3, #144	@ 0x90
 80021fc:	58d3      	ldr	r3, [r2, r3]
 80021fe:	4923      	ldr	r1, [pc, #140]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002200:	2280      	movs	r2, #128	@ 0x80
 8002202:	0252      	lsls	r2, r2, #9
 8002204:	4313      	orrs	r3, r2
 8002206:	2290      	movs	r2, #144	@ 0x90
 8002208:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 800220a:	4a20      	ldr	r2, [pc, #128]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800220c:	2390      	movs	r3, #144	@ 0x90
 800220e:	58d3      	ldr	r3, [r2, r3]
 8002210:	491e      	ldr	r1, [pc, #120]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002212:	4a21      	ldr	r2, [pc, #132]	@ (8002298 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 8002214:	4013      	ands	r3, r2
 8002216:	2290      	movs	r2, #144	@ 0x90
 8002218:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800221a:	491c      	ldr	r1, [pc, #112]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221c:	2290      	movs	r2, #144	@ 0x90
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2201      	movs	r2, #1
 8002226:	4013      	ands	r3, r2
 8002228:	d017      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800222a:	f7fe fecf 	bl	8000fcc <HAL_GetTick>
 800222e:	0003      	movs	r3, r0
 8002230:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002232:	e00c      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002234:	f7fe feca 	bl	8000fcc <HAL_GetTick>
 8002238:	0002      	movs	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	4a17      	ldr	r2, [pc, #92]	@ (800229c <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d904      	bls.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 8002244:	2313      	movs	r3, #19
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2203      	movs	r2, #3
 800224a:	701a      	strb	r2, [r3, #0]
            break;
 800224c:	e005      	b.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800224e:	4a0f      	ldr	r2, [pc, #60]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002250:	2390      	movs	r3, #144	@ 0x90
 8002252:	58d3      	ldr	r3, [r2, r3]
 8002254:	2202      	movs	r2, #2
 8002256:	4013      	ands	r3, r2
 8002258:	d0ec      	beq.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 800225a:	2313      	movs	r3, #19
 800225c:	18fb      	adds	r3, r7, r3
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d10b      	bne.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002264:	4a09      	ldr	r2, [pc, #36]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002266:	2390      	movs	r3, #144	@ 0x90
 8002268:	58d3      	ldr	r3, [r2, r3]
 800226a:	4a0a      	ldr	r2, [pc, #40]	@ (8002294 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800226c:	401a      	ands	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002272:	4906      	ldr	r1, [pc, #24]	@ (800228c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002274:	4313      	orrs	r3, r2
 8002276:	2290      	movs	r2, #144	@ 0x90
 8002278:	508b      	str	r3, [r1, r2]
 800227a:	e017      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800227c:	2312      	movs	r3, #18
 800227e:	18fb      	adds	r3, r7, r3
 8002280:	2213      	movs	r2, #19
 8002282:	18ba      	adds	r2, r7, r2
 8002284:	7812      	ldrb	r2, [r2, #0]
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e010      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x180>
 800228a:	46c0      	nop			@ (mov r8, r8)
 800228c:	40021000 	.word	0x40021000
 8002290:	40007000 	.word	0x40007000
 8002294:	fffffcff 	.word	0xfffffcff
 8002298:	fffeffff 	.word	0xfffeffff
 800229c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022a0:	2312      	movs	r3, #18
 80022a2:	18fb      	adds	r3, r7, r3
 80022a4:	2213      	movs	r2, #19
 80022a6:	18ba      	adds	r2, r7, r2
 80022a8:	7812      	ldrb	r2, [r2, #0]
 80022aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ac:	2311      	movs	r3, #17
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4b84      	ldr	r3, [pc, #528]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022b8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80022ba:	4b83      	ldr	r3, [pc, #524]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022bc:	4983      	ldr	r1, [pc, #524]	@ (80024cc <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 80022be:	400a      	ands	r2, r1
 80022c0:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2201      	movs	r2, #1
 80022c8:	4013      	ands	r3, r2
 80022ca:	d00b      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022cc:	4a7e      	ldr	r2, [pc, #504]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022ce:	2388      	movs	r3, #136	@ 0x88
 80022d0:	58d3      	ldr	r3, [r2, r3]
 80022d2:	2203      	movs	r2, #3
 80022d4:	4393      	bics	r3, r2
 80022d6:	001a      	movs	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	497a      	ldr	r1, [pc, #488]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022de:	4313      	orrs	r3, r2
 80022e0:	2288      	movs	r2, #136	@ 0x88
 80022e2:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2202      	movs	r2, #2
 80022ea:	4013      	ands	r3, r2
 80022ec:	d00b      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022ee:	4a76      	ldr	r2, [pc, #472]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022f0:	2388      	movs	r3, #136	@ 0x88
 80022f2:	58d3      	ldr	r3, [r2, r3]
 80022f4:	220c      	movs	r2, #12
 80022f6:	4393      	bics	r3, r2
 80022f8:	001a      	movs	r2, r3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4972      	ldr	r1, [pc, #456]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002300:	4313      	orrs	r3, r2
 8002302:	2288      	movs	r2, #136	@ 0x88
 8002304:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2210      	movs	r2, #16
 800230c:	4013      	ands	r3, r2
 800230e:	d00a      	beq.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002310:	4a6d      	ldr	r2, [pc, #436]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002312:	2388      	movs	r3, #136	@ 0x88
 8002314:	58d3      	ldr	r3, [r2, r3]
 8002316:	4a6e      	ldr	r2, [pc, #440]	@ (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 8002318:	401a      	ands	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	496a      	ldr	r1, [pc, #424]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002320:	4313      	orrs	r3, r2
 8002322:	2288      	movs	r2, #136	@ 0x88
 8002324:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2208      	movs	r2, #8
 800232c:	4013      	ands	r3, r2
 800232e:	d00a      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8002330:	4a65      	ldr	r2, [pc, #404]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002332:	2388      	movs	r3, #136	@ 0x88
 8002334:	58d3      	ldr	r3, [r2, r3]
 8002336:	4a67      	ldr	r2, [pc, #412]	@ (80024d4 <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002338:	401a      	ands	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	4962      	ldr	r1, [pc, #392]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	2288      	movs	r2, #136	@ 0x88
 8002344:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	2220      	movs	r2, #32
 800234c:	4013      	ands	r3, r2
 800234e:	d00a      	beq.n	8002366 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002350:	4a5d      	ldr	r2, [pc, #372]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002352:	2388      	movs	r3, #136	@ 0x88
 8002354:	58d3      	ldr	r3, [r2, r3]
 8002356:	4a60      	ldr	r2, [pc, #384]	@ (80024d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8002358:	401a      	ands	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	495a      	ldr	r1, [pc, #360]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002360:	4313      	orrs	r3, r2
 8002362:	2288      	movs	r2, #136	@ 0x88
 8002364:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2240      	movs	r2, #64	@ 0x40
 800236c:	4013      	ands	r3, r2
 800236e:	d00a      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002370:	4a55      	ldr	r2, [pc, #340]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002372:	2388      	movs	r3, #136	@ 0x88
 8002374:	58d3      	ldr	r3, [r2, r3]
 8002376:	4a59      	ldr	r2, [pc, #356]	@ (80024dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8002378:	401a      	ands	r2, r3
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	4952      	ldr	r1, [pc, #328]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002380:	4313      	orrs	r3, r2
 8002382:	2288      	movs	r2, #136	@ 0x88
 8002384:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2280      	movs	r2, #128	@ 0x80
 800238c:	4013      	ands	r3, r2
 800238e:	d00a      	beq.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002390:	4a4d      	ldr	r2, [pc, #308]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002392:	2388      	movs	r3, #136	@ 0x88
 8002394:	58d3      	ldr	r3, [r2, r3]
 8002396:	4a52      	ldr	r2, [pc, #328]	@ (80024e0 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8002398:	401a      	ands	r2, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	494a      	ldr	r1, [pc, #296]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	2288      	movs	r2, #136	@ 0x88
 80023a4:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	d00a      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80023b2:	4a45      	ldr	r2, [pc, #276]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023b4:	2388      	movs	r3, #136	@ 0x88
 80023b6:	58d3      	ldr	r3, [r2, r3]
 80023b8:	4a4a      	ldr	r2, [pc, #296]	@ (80024e4 <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 80023ba:	401a      	ands	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6a1b      	ldr	r3, [r3, #32]
 80023c0:	4941      	ldr	r1, [pc, #260]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	2288      	movs	r2, #136	@ 0x88
 80023c6:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	2380      	movs	r3, #128	@ 0x80
 80023ce:	01db      	lsls	r3, r3, #7
 80023d0:	4013      	ands	r3, r2
 80023d2:	d017      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	055b      	lsls	r3, r3, #21
 80023dc:	429a      	cmp	r2, r3
 80023de:	d106      	bne.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 80023e0:	4b39      	ldr	r3, [pc, #228]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	4b38      	ldr	r3, [pc, #224]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023e6:	2180      	movs	r1, #128	@ 0x80
 80023e8:	0249      	lsls	r1, r1, #9
 80023ea:	430a      	orrs	r2, r1
 80023ec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ee:	4a36      	ldr	r2, [pc, #216]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023f0:	2388      	movs	r3, #136	@ 0x88
 80023f2:	58d3      	ldr	r3, [r2, r3]
 80023f4:	4a3c      	ldr	r2, [pc, #240]	@ (80024e8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80023f6:	401a      	ands	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fc:	4932      	ldr	r1, [pc, #200]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	2288      	movs	r2, #136	@ 0x88
 8002402:	508b      	str	r3, [r1, r2]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	2380      	movs	r3, #128	@ 0x80
 800240a:	019b      	lsls	r3, r3, #6
 800240c:	4013      	ands	r3, r2
 800240e:	d017      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002414:	2380      	movs	r3, #128	@ 0x80
 8002416:	051b      	lsls	r3, r3, #20
 8002418:	429a      	cmp	r2, r3
 800241a:	d106      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800241c:	4b2a      	ldr	r3, [pc, #168]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	4b29      	ldr	r3, [pc, #164]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002422:	2180      	movs	r1, #128	@ 0x80
 8002424:	0449      	lsls	r1, r1, #17
 8002426:	430a      	orrs	r2, r1
 8002428:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800242a:	4a27      	ldr	r2, [pc, #156]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800242c:	2388      	movs	r3, #136	@ 0x88
 800242e:	58d3      	ldr	r3, [r2, r3]
 8002430:	4a2e      	ldr	r2, [pc, #184]	@ (80024ec <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 8002432:	401a      	ands	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	4923      	ldr	r1, [pc, #140]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800243a:	4313      	orrs	r3, r2
 800243c:	2288      	movs	r2, #136	@ 0x88
 800243e:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4013      	ands	r3, r2
 800244a:	d017      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	045b      	lsls	r3, r3, #17
 8002454:	429a      	cmp	r2, r3
 8002456:	d106      	bne.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002458:	4b1b      	ldr	r3, [pc, #108]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800245a:	68da      	ldr	r2, [r3, #12]
 800245c:	4b1a      	ldr	r3, [pc, #104]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800245e:	2180      	movs	r1, #128	@ 0x80
 8002460:	0449      	lsls	r1, r1, #17
 8002462:	430a      	orrs	r2, r1
 8002464:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002466:	4a18      	ldr	r2, [pc, #96]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002468:	2388      	movs	r3, #136	@ 0x88
 800246a:	58d3      	ldr	r3, [r2, r3]
 800246c:	4a20      	ldr	r2, [pc, #128]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 800246e:	401a      	ands	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002474:	4914      	ldr	r1, [pc, #80]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002476:	4313      	orrs	r3, r2
 8002478:	2288      	movs	r2, #136	@ 0x88
 800247a:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	2380      	movs	r3, #128	@ 0x80
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	4013      	ands	r3, r2
 8002486:	d017      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	049b      	lsls	r3, r3, #18
 8002490:	429a      	cmp	r2, r3
 8002492:	d106      	bne.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002494:	4b0c      	ldr	r3, [pc, #48]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800249a:	2180      	movs	r1, #128	@ 0x80
 800249c:	0449      	lsls	r1, r1, #17
 800249e:	430a      	orrs	r2, r1
 80024a0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024a2:	4a09      	ldr	r2, [pc, #36]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80024a4:	2388      	movs	r3, #136	@ 0x88
 80024a6:	58d3      	ldr	r3, [r2, r3]
 80024a8:	4a11      	ldr	r2, [pc, #68]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 80024aa:	401a      	ands	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b0:	4905      	ldr	r1, [pc, #20]	@ (80024c8 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	2288      	movs	r2, #136	@ 0x88
 80024b6:	508b      	str	r3, [r1, r2]

  }

  return status;
 80024b8:	2312      	movs	r3, #18
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	781b      	ldrb	r3, [r3, #0]
}
 80024be:	0018      	movs	r0, r3
 80024c0:	46bd      	mov	sp, r7
 80024c2:	b006      	add	sp, #24
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	46c0      	nop			@ (mov r8, r8)
 80024c8:	40021000 	.word	0x40021000
 80024cc:	efffffff 	.word	0xefffffff
 80024d0:	fffff3ff 	.word	0xfffff3ff
 80024d4:	fffffcff 	.word	0xfffffcff
 80024d8:	ffffcfff 	.word	0xffffcfff
 80024dc:	fffcffff 	.word	0xfffcffff
 80024e0:	fff3ffff 	.word	0xfff3ffff
 80024e4:	ffcfffff 	.word	0xffcfffff
 80024e8:	cfffffff 	.word	0xcfffffff
 80024ec:	f3ffffff 	.word	0xf3ffffff
 80024f0:	feffffff 	.word	0xfeffffff

080024f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024f4:	b590      	push	{r4, r7, lr}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	2380      	movs	r3, #128	@ 0x80
 8002504:	021b      	lsls	r3, r3, #8
 8002506:	429a      	cmp	r2, r3
 8002508:	d154      	bne.n	80025b4 <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800250a:	4ad0      	ldr	r2, [pc, #832]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800250c:	2390      	movs	r3, #144	@ 0x90
 800250e:	58d2      	ldr	r2, [r2, r3]
 8002510:	23c0      	movs	r3, #192	@ 0xc0
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	4013      	ands	r3, r2
 8002516:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 8002518:	697a      	ldr	r2, [r7, #20]
 800251a:	23c0      	movs	r3, #192	@ 0xc0
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	429a      	cmp	r2, r3
 8002520:	d039      	beq.n	8002596 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	23c0      	movs	r3, #192	@ 0xc0
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d901      	bls.n	8002530 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800252c:	f000 fbf3 	bl	8002d16 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	2380      	movs	r3, #128	@ 0x80
 8002534:	005b      	lsls	r3, r3, #1
 8002536:	429a      	cmp	r2, r3
 8002538:	d006      	beq.n	8002548 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	2380      	movs	r3, #128	@ 0x80
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	429a      	cmp	r2, r3
 8002542:	d00f      	beq.n	8002564 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8002544:	f000 fbe7 	bl	8002d16 <HAL_RCCEx_GetPeriphCLKFreq+0x822>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002548:	4ac0      	ldr	r2, [pc, #768]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800254a:	2390      	movs	r3, #144	@ 0x90
 800254c:	58d3      	ldr	r3, [r2, r3]
 800254e:	2202      	movs	r2, #2
 8002550:	4013      	ands	r3, r2
 8002552:	2b02      	cmp	r3, #2
 8002554:	d001      	beq.n	800255a <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 8002556:	f000 fbe0 	bl	8002d1a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = LSE_VALUE;
 800255a:	2380      	movs	r3, #128	@ 0x80
 800255c:	021b      	lsls	r3, r3, #8
 800255e:	61fb      	str	r3, [r7, #28]
        break;
 8002560:	f000 fbdb 	bl	8002d1a <HAL_RCCEx_GetPeriphCLKFreq+0x826>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002564:	4ab9      	ldr	r2, [pc, #740]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002566:	2394      	movs	r3, #148	@ 0x94
 8002568:	58d3      	ldr	r3, [r2, r3]
 800256a:	2202      	movs	r2, #2
 800256c:	4013      	ands	r3, r2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d001      	beq.n	8002576 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 8002572:	f000 fbd4 	bl	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002576:	4ab5      	ldr	r2, [pc, #724]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002578:	2394      	movs	r3, #148	@ 0x94
 800257a:	58d3      	ldr	r3, [r2, r3]
 800257c:	2204      	movs	r2, #4
 800257e:	4013      	ands	r3, r2
 8002580:	2b04      	cmp	r3, #4
 8002582:	d103      	bne.n	800258c <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 8002584:	23fa      	movs	r3, #250	@ 0xfa
 8002586:	61fb      	str	r3, [r7, #28]
        break;
 8002588:	f000 fbc9 	bl	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
            frequency = LSI_VALUE;
 800258c:	23fa      	movs	r3, #250	@ 0xfa
 800258e:	01db      	lsls	r3, r3, #7
 8002590:	61fb      	str	r3, [r7, #28]
        break;
 8002592:	f000 fbc4 	bl	8002d1e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002596:	4bad      	ldr	r3, [pc, #692]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2380      	movs	r3, #128	@ 0x80
 800259c:	029b      	lsls	r3, r3, #10
 800259e:	401a      	ands	r2, r3
 80025a0:	2380      	movs	r3, #128	@ 0x80
 80025a2:	029b      	lsls	r3, r3, #10
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 80025a8:	f000 fbbb 	bl	8002d22 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
          frequency = HSE_VALUE / 32U;
 80025ac:	4ba8      	ldr	r3, [pc, #672]	@ (8002850 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 80025ae:	61fb      	str	r3, [r7, #28]
        break;
 80025b0:	f000 fbb7 	bl	8002d22 <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	2380      	movs	r3, #128	@ 0x80
 80025b8:	029b      	lsls	r3, r3, #10
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d100      	bne.n	80025c0 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 80025be:	e0f7      	b.n	80027b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	029b      	lsls	r3, r3, #10
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d901      	bls.n	80025ce <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 80025ca:	f000 fbac 	bl	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	2380      	movs	r3, #128	@ 0x80
 80025d2:	025b      	lsls	r3, r3, #9
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d100      	bne.n	80025da <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80025d8:	e0ea      	b.n	80027b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80025da:	687a      	ldr	r2, [r7, #4]
 80025dc:	2380      	movs	r3, #128	@ 0x80
 80025de:	025b      	lsls	r3, r3, #9
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d901      	bls.n	80025e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80025e4:	f000 fb9f 	bl	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	2380      	movs	r3, #128	@ 0x80
 80025ec:	01db      	lsls	r3, r3, #7
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d100      	bne.n	80025f4 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80025f2:	e180      	b.n	80028f6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	2380      	movs	r3, #128	@ 0x80
 80025f8:	01db      	lsls	r3, r3, #7
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d901      	bls.n	8002602 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80025fe:	f000 fb92 	bl	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	2380      	movs	r3, #128	@ 0x80
 8002606:	019b      	lsls	r3, r3, #6
 8002608:	429a      	cmp	r2, r3
 800260a:	d101      	bne.n	8002610 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 800260c:	f000 fb29 	bl	8002c62 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	019b      	lsls	r3, r3, #6
 8002616:	429a      	cmp	r2, r3
 8002618:	d901      	bls.n	800261e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 800261a:	f000 fb84 	bl	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	2380      	movs	r3, #128	@ 0x80
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	429a      	cmp	r2, r3
 8002626:	d100      	bne.n	800262a <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 8002628:	e2f0      	b.n	8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	2380      	movs	r3, #128	@ 0x80
 800262e:	011b      	lsls	r3, r3, #4
 8002630:	429a      	cmp	r2, r3
 8002632:	d901      	bls.n	8002638 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 8002634:	f000 fb77 	bl	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	2380      	movs	r3, #128	@ 0x80
 800263c:	00db      	lsls	r3, r3, #3
 800263e:	429a      	cmp	r2, r3
 8002640:	d100      	bne.n	8002644 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8002642:	e2b8      	b.n	8002bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	2380      	movs	r3, #128	@ 0x80
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	429a      	cmp	r2, r3
 800264c:	d901      	bls.n	8002652 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 800264e:	f000 fb6a 	bl	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	2380      	movs	r3, #128	@ 0x80
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	429a      	cmp	r2, r3
 800265a:	d100      	bne.n	800265e <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 800265c:	e249      	b.n	8002af2 <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 800265e:	687a      	ldr	r2, [r7, #4]
 8002660:	2380      	movs	r3, #128	@ 0x80
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	429a      	cmp	r2, r3
 8002666:	d901      	bls.n	800266c <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 8002668:	f000 fb5d 	bl	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b80      	cmp	r3, #128	@ 0x80
 8002670:	d100      	bne.n	8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 8002672:	e1e1      	b.n	8002a38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b80      	cmp	r3, #128	@ 0x80
 8002678:	d901      	bls.n	800267e <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 800267a:	f000 fb54 	bl	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2b20      	cmp	r3, #32
 8002682:	d80f      	bhi.n	80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 800268a:	f000 fb4c 	bl	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b20      	cmp	r3, #32
 8002692:	d901      	bls.n	8002698 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8002694:	f000 fb47 	bl	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	009a      	lsls	r2, r3, #2
 800269c:	4b6d      	ldr	r3, [pc, #436]	@ (8002854 <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 800269e:	18d3      	adds	r3, r2, r3
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	469f      	mov	pc, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b40      	cmp	r3, #64	@ 0x40
 80026a8:	d100      	bne.n	80026ac <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 80026aa:	e191      	b.n	80029d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
            break;
        }
        break;
      }
      default:
        break;
 80026ac:	f000 fb3b 	bl	8002d26 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80026b0:	4a66      	ldr	r2, [pc, #408]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80026b2:	2388      	movs	r3, #136	@ 0x88
 80026b4:	58d3      	ldr	r3, [r2, r3]
 80026b6:	2203      	movs	r2, #3
 80026b8:	4013      	ands	r3, r2
 80026ba:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	2b03      	cmp	r3, #3
 80026c0:	d025      	beq.n	800270e <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d82d      	bhi.n	8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d013      	beq.n	80026f6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d827      	bhi.n	8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d005      	beq.n	80026ec <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
            break;
 80026e0:	e020      	b.n	8002724 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = HAL_RCC_GetPCLK1Freq();
 80026e2:	f7ff fc9f 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 80026e6:	0003      	movs	r3, r0
 80026e8:	61fb      	str	r3, [r7, #28]
            break;
 80026ea:	e020      	b.n	800272e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            frequency = HAL_RCC_GetSysClockFreq();
 80026ec:	f7ff fbf4 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 80026f0:	0003      	movs	r3, r0
 80026f2:	61fb      	str	r3, [r7, #28]
            break;
 80026f4:	e01b      	b.n	800272e <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80026f6:	4b55      	ldr	r3, [pc, #340]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	2380      	movs	r3, #128	@ 0x80
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	401a      	ands	r2, r3
 8002700:	2380      	movs	r3, #128	@ 0x80
 8002702:	00db      	lsls	r3, r3, #3
 8002704:	429a      	cmp	r2, r3
 8002706:	d10f      	bne.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
              frequency = HSI_VALUE;
 8002708:	4b53      	ldr	r3, [pc, #332]	@ (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800270a:	61fb      	str	r3, [r7, #28]
            break;
 800270c:	e00c      	b.n	8002728 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800270e:	4a4f      	ldr	r2, [pc, #316]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002710:	2390      	movs	r3, #144	@ 0x90
 8002712:	58d3      	ldr	r3, [r2, r3]
 8002714:	2202      	movs	r2, #2
 8002716:	4013      	ands	r3, r2
 8002718:	2b02      	cmp	r3, #2
 800271a:	d107      	bne.n	800272c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
              frequency = LSE_VALUE;
 800271c:	2380      	movs	r3, #128	@ 0x80
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	61fb      	str	r3, [r7, #28]
            break;
 8002722:	e003      	b.n	800272c <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            break;
 8002724:	46c0      	nop			@ (mov r8, r8)
 8002726:	e2ff      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002728:	46c0      	nop			@ (mov r8, r8)
 800272a:	e2fd      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 800272c:	46c0      	nop			@ (mov r8, r8)
        break;
 800272e:	e2fb      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8002730:	4a46      	ldr	r2, [pc, #280]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002732:	2388      	movs	r3, #136	@ 0x88
 8002734:	58d3      	ldr	r3, [r2, r3]
 8002736:	220c      	movs	r2, #12
 8002738:	4013      	ands	r3, r2
 800273a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	2b0c      	cmp	r3, #12
 8002740:	d025      	beq.n	800278e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	2b0c      	cmp	r3, #12
 8002746:	d82d      	bhi.n	80027a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	2b08      	cmp	r3, #8
 800274c:	d013      	beq.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d827      	bhi.n	80027a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	2b04      	cmp	r3, #4
 800275e:	d005      	beq.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            break;
 8002760:	e020      	b.n	80027a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002762:	f7ff fc5f 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002766:	0003      	movs	r3, r0
 8002768:	61fb      	str	r3, [r7, #28]
            break;
 800276a:	e020      	b.n	80027ae <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HAL_RCC_GetSysClockFreq();
 800276c:	f7ff fbb4 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8002770:	0003      	movs	r3, r0
 8002772:	61fb      	str	r3, [r7, #28]
            break;
 8002774:	e01b      	b.n	80027ae <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002776:	4b35      	ldr	r3, [pc, #212]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	@ 0x80
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	401a      	ands	r2, r3
 8002780:	2380      	movs	r3, #128	@ 0x80
 8002782:	00db      	lsls	r3, r3, #3
 8002784:	429a      	cmp	r2, r3
 8002786:	d10f      	bne.n	80027a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
              frequency = HSI_VALUE;
 8002788:	4b33      	ldr	r3, [pc, #204]	@ (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800278a:	61fb      	str	r3, [r7, #28]
            break;
 800278c:	e00c      	b.n	80027a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800278e:	4a2f      	ldr	r2, [pc, #188]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002790:	2390      	movs	r3, #144	@ 0x90
 8002792:	58d3      	ldr	r3, [r2, r3]
 8002794:	2202      	movs	r2, #2
 8002796:	4013      	ands	r3, r2
 8002798:	2b02      	cmp	r3, #2
 800279a:	d107      	bne.n	80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
              frequency = LSE_VALUE;
 800279c:	2380      	movs	r3, #128	@ 0x80
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	61fb      	str	r3, [r7, #28]
            break;
 80027a2:	e003      	b.n	80027ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 80027a4:	46c0      	nop			@ (mov r8, r8)
 80027a6:	e2bf      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80027a8:	46c0      	nop			@ (mov r8, r8)
 80027aa:	e2bd      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80027ac:	46c0      	nop			@ (mov r8, r8)
        break;
 80027ae:	e2bb      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        frequency = HAL_RCC_GetPCLK1Freq();
 80027b0:	f7ff fc38 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 80027b4:	0003      	movs	r3, r0
 80027b6:	61fb      	str	r3, [r7, #28]
        break;
 80027b8:	e2b6      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80027ba:	4a24      	ldr	r2, [pc, #144]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80027bc:	2388      	movs	r3, #136	@ 0x88
 80027be:	58d2      	ldr	r2, [r2, r3]
 80027c0:	23c0      	movs	r3, #192	@ 0xc0
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	4013      	ands	r3, r2
 80027c6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	23c0      	movs	r3, #192	@ 0xc0
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d02d      	beq.n	800282e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	23c0      	movs	r3, #192	@ 0xc0
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	429a      	cmp	r2, r3
 80027da:	d833      	bhi.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	2380      	movs	r3, #128	@ 0x80
 80027e0:	011b      	lsls	r3, r3, #4
 80027e2:	429a      	cmp	r2, r3
 80027e4:	d017      	beq.n	8002816 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	2380      	movs	r3, #128	@ 0x80
 80027ea:	011b      	lsls	r3, r3, #4
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d829      	bhi.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d005      	beq.n	8002802 <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d005      	beq.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x318>
            break;
 8002800:	e020      	b.n	8002844 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002802:	f7ff fc0f 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002806:	0003      	movs	r3, r0
 8002808:	61fb      	str	r3, [r7, #28]
            break;
 800280a:	e028      	b.n	800285e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HAL_RCC_GetSysClockFreq();
 800280c:	f7ff fb64 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8002810:	0003      	movs	r3, r0
 8002812:	61fb      	str	r3, [r7, #28]
            break;
 8002814:	e023      	b.n	800285e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002816:	4b0d      	ldr	r3, [pc, #52]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	2380      	movs	r3, #128	@ 0x80
 800281c:	00db      	lsls	r3, r3, #3
 800281e:	401a      	ands	r2, r3
 8002820:	2380      	movs	r3, #128	@ 0x80
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	429a      	cmp	r2, r3
 8002826:	d10f      	bne.n	8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
              frequency = HSI_VALUE;
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 800282a:	61fb      	str	r3, [r7, #28]
            break;
 800282c:	e00c      	b.n	8002848 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800282e:	4a07      	ldr	r2, [pc, #28]	@ (800284c <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002830:	2390      	movs	r3, #144	@ 0x90
 8002832:	58d3      	ldr	r3, [r2, r3]
 8002834:	2202      	movs	r2, #2
 8002836:	4013      	ands	r3, r2
 8002838:	2b02      	cmp	r3, #2
 800283a:	d10f      	bne.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
              frequency = LSE_VALUE;
 800283c:	2380      	movs	r3, #128	@ 0x80
 800283e:	021b      	lsls	r3, r3, #8
 8002840:	61fb      	str	r3, [r7, #28]
            break;
 8002842:	e00b      	b.n	800285c <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            break;
 8002844:	46c0      	nop			@ (mov r8, r8)
 8002846:	e26f      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002848:	46c0      	nop			@ (mov r8, r8)
 800284a:	e26d      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 800284c:	40021000 	.word	0x40021000
 8002850:	0001e848 	.word	0x0001e848
 8002854:	08004740 	.word	0x08004740
 8002858:	00f42400 	.word	0x00f42400
            break;
 800285c:	46c0      	nop			@ (mov r8, r8)
        break;
 800285e:	e263      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8002860:	4ac1      	ldr	r2, [pc, #772]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002862:	2388      	movs	r3, #136	@ 0x88
 8002864:	58d2      	ldr	r2, [r2, r3]
 8002866:	23c0      	movs	r3, #192	@ 0xc0
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4013      	ands	r3, r2
 800286c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800286e:	697a      	ldr	r2, [r7, #20]
 8002870:	23c0      	movs	r3, #192	@ 0xc0
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d02d      	beq.n	80028d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	23c0      	movs	r3, #192	@ 0xc0
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	429a      	cmp	r2, r3
 8002880:	d833      	bhi.n	80028ea <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8002882:	697a      	ldr	r2, [r7, #20]
 8002884:	2380      	movs	r3, #128	@ 0x80
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	429a      	cmp	r2, r3
 800288a:	d017      	beq.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	2380      	movs	r3, #128	@ 0x80
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	429a      	cmp	r2, r3
 8002894:	d829      	bhi.n	80028ea <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	2380      	movs	r3, #128	@ 0x80
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d005      	beq.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
            break;
 80028a6:	e020      	b.n	80028ea <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            frequency = HAL_RCC_GetPCLK1Freq();
 80028a8:	f7ff fbbc 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 80028ac:	0003      	movs	r3, r0
 80028ae:	61fb      	str	r3, [r7, #28]
            break;
 80028b0:	e020      	b.n	80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            frequency = HAL_RCC_GetSysClockFreq();
 80028b2:	f7ff fb11 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 80028b6:	0003      	movs	r3, r0
 80028b8:	61fb      	str	r3, [r7, #28]
            break;
 80028ba:	e01b      	b.n	80028f4 <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80028bc:	4baa      	ldr	r3, [pc, #680]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	2380      	movs	r3, #128	@ 0x80
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	401a      	ands	r2, r3
 80028c6:	2380      	movs	r3, #128	@ 0x80
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d10f      	bne.n	80028ee <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              frequency = HSI_VALUE;
 80028ce:	4ba7      	ldr	r3, [pc, #668]	@ (8002b6c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 80028d0:	61fb      	str	r3, [r7, #28]
            break;
 80028d2:	e00c      	b.n	80028ee <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80028d4:	4aa4      	ldr	r2, [pc, #656]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80028d6:	2390      	movs	r3, #144	@ 0x90
 80028d8:	58d3      	ldr	r3, [r2, r3]
 80028da:	2202      	movs	r2, #2
 80028dc:	4013      	ands	r3, r2
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d107      	bne.n	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
              frequency = LSE_VALUE;
 80028e2:	2380      	movs	r3, #128	@ 0x80
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	61fb      	str	r3, [r7, #28]
            break;
 80028e8:	e003      	b.n	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            break;
 80028ea:	46c0      	nop			@ (mov r8, r8)
 80028ec:	e21c      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	e21a      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80028f2:	46c0      	nop			@ (mov r8, r8)
        break;
 80028f4:	e218      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80028f6:	4a9c      	ldr	r2, [pc, #624]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80028f8:	2388      	movs	r3, #136	@ 0x88
 80028fa:	58d2      	ldr	r2, [r2, r3]
 80028fc:	23c0      	movs	r3, #192	@ 0xc0
 80028fe:	059b      	lsls	r3, r3, #22
 8002900:	4013      	ands	r3, r2
 8002902:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	059b      	lsls	r3, r3, #22
 800290a:	429a      	cmp	r2, r3
 800290c:	d012      	beq.n	8002934 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	2380      	movs	r3, #128	@ 0x80
 8002912:	059b      	lsls	r3, r3, #22
 8002914:	429a      	cmp	r2, r3
 8002916:	d825      	bhi.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	2380      	movs	r3, #128	@ 0x80
 8002922:	055b      	lsls	r3, r3, #21
 8002924:	429a      	cmp	r2, r3
 8002926:	d014      	beq.n	8002952 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            break;
 8002928:	e01c      	b.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HAL_RCC_GetSysClockFreq();
 800292a:	f7ff fad5 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 800292e:	0003      	movs	r3, r0
 8002930:	61fb      	str	r3, [r7, #28]
            break;
 8002932:	e018      	b.n	8002966 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002934:	4b8c      	ldr	r3, [pc, #560]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	2380      	movs	r3, #128	@ 0x80
 800293a:	00db      	lsls	r3, r3, #3
 800293c:	401a      	ands	r2, r3
 800293e:	2380      	movs	r3, #128	@ 0x80
 8002940:	00db      	lsls	r3, r3, #3
 8002942:	429a      	cmp	r2, r3
 8002944:	d102      	bne.n	800294c <HAL_RCCEx_GetPeriphCLKFreq+0x458>
              frequency = HSI_VALUE;
 8002946:	4b89      	ldr	r3, [pc, #548]	@ (8002b6c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002948:	61fb      	str	r3, [r7, #28]
            break;
 800294a:	e00c      	b.n	8002966 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              frequency = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	61fb      	str	r3, [r7, #28]
            break;
 8002950:	e009      	b.n	8002966 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002952:	2408      	movs	r4, #8
 8002954:	193b      	adds	r3, r7, r4
 8002956:	0018      	movs	r0, r3
 8002958:	f000 f9f4 	bl	8002d44 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 800295c:	193b      	adds	r3, r7, r4
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	61fb      	str	r3, [r7, #28]
            break;
 8002962:	e000      	b.n	8002966 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            break;
 8002964:	46c0      	nop			@ (mov r8, r8)
        break;
 8002966:	e1df      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002968:	4a7f      	ldr	r2, [pc, #508]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800296a:	2388      	movs	r3, #136	@ 0x88
 800296c:	58d2      	ldr	r2, [r2, r3]
 800296e:	23c0      	movs	r3, #192	@ 0xc0
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	4013      	ands	r3, r2
 8002974:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	019b      	lsls	r3, r3, #6
 800297c:	429a      	cmp	r2, r3
 800297e:	d017      	beq.n	80029b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	429a      	cmp	r2, r3
 8002988:	d81e      	bhi.n	80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d005      	beq.n	800299c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	015b      	lsls	r3, r3, #5
 8002996:	429a      	cmp	r2, r3
 8002998:	d005      	beq.n	80029a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            break;
 800299a:	e015      	b.n	80029c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            frequency = HAL_RCC_GetPCLK1Freq();
 800299c:	f7ff fb42 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 80029a0:	0003      	movs	r3, r0
 80029a2:	61fb      	str	r3, [r7, #28]
            break;
 80029a4:	e013      	b.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            frequency = HAL_RCC_GetSysClockFreq();
 80029a6:	f7ff fa97 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 80029aa:	0003      	movs	r3, r0
 80029ac:	61fb      	str	r3, [r7, #28]
            break;
 80029ae:	e00e      	b.n	80029ce <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80029b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	2380      	movs	r3, #128	@ 0x80
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	401a      	ands	r2, r3
 80029ba:	2380      	movs	r3, #128	@ 0x80
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	429a      	cmp	r2, r3
 80029c0:	d104      	bne.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
              frequency = HSI_VALUE;
 80029c2:	4b6a      	ldr	r3, [pc, #424]	@ (8002b6c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 80029c4:	61fb      	str	r3, [r7, #28]
            break;
 80029c6:	e001      	b.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
            break;
 80029c8:	46c0      	nop			@ (mov r8, r8)
 80029ca:	e1ad      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80029cc:	46c0      	nop			@ (mov r8, r8)
        break;
 80029ce:	e1ab      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80029d0:	4a65      	ldr	r2, [pc, #404]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80029d2:	2388      	movs	r3, #136	@ 0x88
 80029d4:	58d2      	ldr	r2, [r2, r3]
 80029d6:	23c0      	movs	r3, #192	@ 0xc0
 80029d8:	029b      	lsls	r3, r3, #10
 80029da:	4013      	ands	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	2380      	movs	r3, #128	@ 0x80
 80029e2:	029b      	lsls	r3, r3, #10
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d017      	beq.n	8002a18 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	2380      	movs	r3, #128	@ 0x80
 80029ec:	029b      	lsls	r3, r3, #10
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d81e      	bhi.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d005      	beq.n	8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80029f8:	697a      	ldr	r2, [r7, #20]
 80029fa:	2380      	movs	r3, #128	@ 0x80
 80029fc:	025b      	lsls	r3, r3, #9
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d005      	beq.n	8002a0e <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            break;
 8002a02:	e015      	b.n	8002a30 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002a04:	f7ff fb0e 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002a08:	0003      	movs	r3, r0
 8002a0a:	61fb      	str	r3, [r7, #28]
            break;
 8002a0c:	e013      	b.n	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            frequency = HAL_RCC_GetSysClockFreq();
 8002a0e:	f7ff fa63 	bl	8001ed8 <HAL_RCC_GetSysClockFreq>
 8002a12:	0003      	movs	r3, r0
 8002a14:	61fb      	str	r3, [r7, #28]
            break;
 8002a16:	e00e      	b.n	8002a36 <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a18:	4b53      	ldr	r3, [pc, #332]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	2380      	movs	r3, #128	@ 0x80
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	401a      	ands	r2, r3
 8002a22:	2380      	movs	r3, #128	@ 0x80
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d104      	bne.n	8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
              frequency = HSI_VALUE;
 8002a2a:	4b50      	ldr	r3, [pc, #320]	@ (8002b6c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002a2c:	61fb      	str	r3, [r7, #28]
            break;
 8002a2e:	e001      	b.n	8002a34 <HAL_RCCEx_GetPeriphCLKFreq+0x540>
            break;
 8002a30:	46c0      	nop			@ (mov r8, r8)
 8002a32:	e179      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002a34:	46c0      	nop			@ (mov r8, r8)
        break;
 8002a36:	e177      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002a38:	4a4b      	ldr	r2, [pc, #300]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002a3a:	2388      	movs	r3, #136	@ 0x88
 8002a3c:	58d2      	ldr	r2, [r2, r3]
 8002a3e:	23c0      	movs	r3, #192	@ 0xc0
 8002a40:	031b      	lsls	r3, r3, #12
 8002a42:	4013      	ands	r3, r2
 8002a44:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	23c0      	movs	r3, #192	@ 0xc0
 8002a4a:	031b      	lsls	r3, r3, #12
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d03d      	beq.n	8002acc <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	23c0      	movs	r3, #192	@ 0xc0
 8002a54:	031b      	lsls	r3, r3, #12
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d843      	bhi.n	8002ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	2380      	movs	r3, #128	@ 0x80
 8002a5e:	031b      	lsls	r3, r3, #12
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d027      	beq.n	8002ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	2380      	movs	r3, #128	@ 0x80
 8002a68:	031b      	lsls	r3, r3, #12
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d839      	bhi.n	8002ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	2380      	movs	r3, #128	@ 0x80
 8002a78:	02db      	lsls	r3, r3, #11
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d005      	beq.n	8002a8a <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            break;
 8002a7e:	e030      	b.n	8002ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002a80:	f7ff fad0 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002a84:	0003      	movs	r3, r0
 8002a86:	61fb      	str	r3, [r7, #28]
            break;
 8002a88:	e032      	b.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002a8a:	4a37      	ldr	r2, [pc, #220]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002a8c:	2394      	movs	r3, #148	@ 0x94
 8002a8e:	58d3      	ldr	r3, [r2, r3]
 8002a90:	2202      	movs	r2, #2
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d126      	bne.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002a98:	4a33      	ldr	r2, [pc, #204]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002a9a:	2394      	movs	r3, #148	@ 0x94
 8002a9c:	58d3      	ldr	r3, [r2, r3]
 8002a9e:	2204      	movs	r2, #4
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d102      	bne.n	8002aac <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
                frequency = LSI_VALUE / 128U;
 8002aa6:	23fa      	movs	r3, #250	@ 0xfa
 8002aa8:	61fb      	str	r3, [r7, #28]
            break;
 8002aaa:	e01c      	b.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
                frequency = LSI_VALUE;
 8002aac:	23fa      	movs	r3, #250	@ 0xfa
 8002aae:	01db      	lsls	r3, r3, #7
 8002ab0:	61fb      	str	r3, [r7, #28]
            break;
 8002ab2:	e018      	b.n	8002ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	2380      	movs	r3, #128	@ 0x80
 8002aba:	00db      	lsls	r3, r3, #3
 8002abc:	401a      	ands	r2, r3
 8002abe:	2380      	movs	r3, #128	@ 0x80
 8002ac0:	00db      	lsls	r3, r3, #3
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d111      	bne.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
              frequency = HSI_VALUE;
 8002ac6:	4b29      	ldr	r3, [pc, #164]	@ (8002b6c <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002ac8:	61fb      	str	r3, [r7, #28]
            break;
 8002aca:	e00e      	b.n	8002aea <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002acc:	4a26      	ldr	r2, [pc, #152]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002ace:	2390      	movs	r3, #144	@ 0x90
 8002ad0:	58d3      	ldr	r3, [r2, r3]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d109      	bne.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
              frequency = LSE_VALUE;
 8002ada:	2380      	movs	r3, #128	@ 0x80
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	61fb      	str	r3, [r7, #28]
            break;
 8002ae0:	e005      	b.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            break;
 8002ae2:	46c0      	nop			@ (mov r8, r8)
 8002ae4:	e120      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002ae6:	46c0      	nop			@ (mov r8, r8)
 8002ae8:	e11e      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002aea:	46c0      	nop			@ (mov r8, r8)
 8002aec:	e11c      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002aee:	46c0      	nop			@ (mov r8, r8)
        break;
 8002af0:	e11a      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002af2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002af4:	2388      	movs	r3, #136	@ 0x88
 8002af6:	58d2      	ldr	r2, [r2, r3]
 8002af8:	23c0      	movs	r3, #192	@ 0xc0
 8002afa:	039b      	lsls	r3, r3, #14
 8002afc:	4013      	ands	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	23c0      	movs	r3, #192	@ 0xc0
 8002b04:	039b      	lsls	r3, r3, #14
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d042      	beq.n	8002b90 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
 8002b0a:	697a      	ldr	r2, [r7, #20]
 8002b0c:	23c0      	movs	r3, #192	@ 0xc0
 8002b0e:	039b      	lsls	r3, r3, #14
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d848      	bhi.n	8002ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	2380      	movs	r3, #128	@ 0x80
 8002b18:	039b      	lsls	r3, r3, #14
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d02c      	beq.n	8002b78 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8002b1e:	697a      	ldr	r2, [r7, #20]
 8002b20:	2380      	movs	r3, #128	@ 0x80
 8002b22:	039b      	lsls	r3, r3, #14
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d83e      	bhi.n	8002ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	035b      	lsls	r3, r3, #13
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d005      	beq.n	8002b44 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
            break;
 8002b38:	e035      	b.n	8002ba6 <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002b3a:	f7ff fa73 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002b3e:	0003      	movs	r3, r0
 8002b40:	61fb      	str	r3, [r7, #28]
            break;
 8002b42:	e037      	b.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002b44:	4a08      	ldr	r2, [pc, #32]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002b46:	2394      	movs	r3, #148	@ 0x94
 8002b48:	58d3      	ldr	r3, [r2, r3]
 8002b4a:	2202      	movs	r2, #2
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d12b      	bne.n	8002baa <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002b52:	4a05      	ldr	r2, [pc, #20]	@ (8002b68 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002b54:	2394      	movs	r3, #148	@ 0x94
 8002b56:	58d3      	ldr	r3, [r2, r3]
 8002b58:	2204      	movs	r2, #4
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b04      	cmp	r3, #4
 8002b5e:	d107      	bne.n	8002b70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
                frequency = LSI_VALUE / 128U;
 8002b60:	23fa      	movs	r3, #250	@ 0xfa
 8002b62:	61fb      	str	r3, [r7, #28]
            break;
 8002b64:	e021      	b.n	8002baa <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8002b66:	46c0      	nop			@ (mov r8, r8)
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	00f42400 	.word	0x00f42400
                frequency = LSI_VALUE;
 8002b70:	23fa      	movs	r3, #250	@ 0xfa
 8002b72:	01db      	lsls	r3, r3, #7
 8002b74:	61fb      	str	r3, [r7, #28]
            break;
 8002b76:	e018      	b.n	8002baa <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b78:	4b6e      	ldr	r3, [pc, #440]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2380      	movs	r3, #128	@ 0x80
 8002b7e:	00db      	lsls	r3, r3, #3
 8002b80:	401a      	ands	r2, r3
 8002b82:	2380      	movs	r3, #128	@ 0x80
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d111      	bne.n	8002bae <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
              frequency = HSI_VALUE;
 8002b8a:	4b6b      	ldr	r3, [pc, #428]	@ (8002d38 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8002b8c:	61fb      	str	r3, [r7, #28]
            break;
 8002b8e:	e00e      	b.n	8002bae <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002b90:	4a68      	ldr	r2, [pc, #416]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002b92:	2390      	movs	r3, #144	@ 0x90
 8002b94:	58d3      	ldr	r3, [r2, r3]
 8002b96:	2202      	movs	r2, #2
 8002b98:	4013      	ands	r3, r2
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d109      	bne.n	8002bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
              frequency = LSE_VALUE;
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	61fb      	str	r3, [r7, #28]
            break;
 8002ba4:	e005      	b.n	8002bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
            break;
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	e0be      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002baa:	46c0      	nop			@ (mov r8, r8)
 8002bac:	e0bc      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	e0ba      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002bb2:	46c0      	nop			@ (mov r8, r8)
        break;
 8002bb4:	e0b8      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8002bb6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002bb8:	2388      	movs	r3, #136	@ 0x88
 8002bba:	58d2      	ldr	r2, [r2, r3]
 8002bbc:	2380      	movs	r3, #128	@ 0x80
 8002bbe:	045b      	lsls	r3, r3, #17
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d005      	beq.n	8002bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	2380      	movs	r3, #128	@ 0x80
 8002bce:	045b      	lsls	r3, r3, #17
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d011      	beq.n	8002bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            break;
 8002bd4:	e019      	b.n	8002c0a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8002bd6:	4b57      	ldr	r3, [pc, #348]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	23e0      	movs	r3, #224	@ 0xe0
 8002bdc:	01db      	lsls	r3, r3, #7
 8002bde:	4013      	ands	r3, r2
 8002be0:	d104      	bne.n	8002bec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
              frequency = HAL_RCC_GetPCLK1Freq();
 8002be2:	f7ff fa1f 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002be6:	0003      	movs	r3, r0
 8002be8:	61fb      	str	r3, [r7, #28]
            break;
 8002bea:	e00e      	b.n	8002c0a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8002bec:	f7ff fa1a 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002bf0:	0003      	movs	r3, r0
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	61fb      	str	r3, [r7, #28]
            break;
 8002bf6:	e008      	b.n	8002c0a <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002bf8:	2408      	movs	r4, #8
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 f8a1 	bl	8002d44 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002c02:	193b      	adds	r3, r7, r4
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61fb      	str	r3, [r7, #28]
            break;
 8002c08:	46c0      	nop			@ (mov r8, r8)
        break;
 8002c0a:	e08d      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8002c0c:	4a49      	ldr	r2, [pc, #292]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002c0e:	2388      	movs	r3, #136	@ 0x88
 8002c10:	58d2      	ldr	r2, [r2, r3]
 8002c12:	2380      	movs	r3, #128	@ 0x80
 8002c14:	049b      	lsls	r3, r3, #18
 8002c16:	4013      	ands	r3, r2
 8002c18:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCCEx_GetPeriphCLKFreq+0x738>
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	2380      	movs	r3, #128	@ 0x80
 8002c24:	049b      	lsls	r3, r3, #18
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d011      	beq.n	8002c4e <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
            break;
 8002c2a:	e019      	b.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8002c2c:	4b41      	ldr	r3, [pc, #260]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002c2e:	689a      	ldr	r2, [r3, #8]
 8002c30:	23e0      	movs	r3, #224	@ 0xe0
 8002c32:	01db      	lsls	r3, r3, #7
 8002c34:	4013      	ands	r3, r2
 8002c36:	d104      	bne.n	8002c42 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
              frequency = HAL_RCC_GetPCLK1Freq();
 8002c38:	f7ff f9f4 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	61fb      	str	r3, [r7, #28]
            break;
 8002c40:	e00e      	b.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8002c42:	f7ff f9ef 	bl	8002024 <HAL_RCC_GetPCLK1Freq>
 8002c46:	0003      	movs	r3, r0
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	61fb      	str	r3, [r7, #28]
            break;
 8002c4c:	e008      	b.n	8002c60 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002c4e:	2408      	movs	r4, #8
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	0018      	movs	r0, r3
 8002c54:	f000 f876 	bl	8002d44 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002c58:	193b      	adds	r3, r7, r4
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	61fb      	str	r3, [r7, #28]
            break;
 8002c5e:	46c0      	nop			@ (mov r8, r8)
        break;
 8002c60:	e062      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8002c62:	4a34      	ldr	r2, [pc, #208]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002c64:	2388      	movs	r3, #136	@ 0x88
 8002c66:	58d2      	ldr	r2, [r2, r3]
 8002c68:	23c0      	movs	r3, #192	@ 0xc0
 8002c6a:	051b      	lsls	r3, r3, #20
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	23c0      	movs	r3, #192	@ 0xc0
 8002c74:	051b      	lsls	r3, r3, #20
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d017      	beq.n	8002caa <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	23c0      	movs	r3, #192	@ 0xc0
 8002c7e:	051b      	lsls	r3, r3, #20
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d844      	bhi.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	2380      	movs	r3, #128	@ 0x80
 8002c88:	051b      	lsls	r3, r3, #20
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d033      	beq.n	8002cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 8002c8e:	697a      	ldr	r2, [r7, #20]
 8002c90:	2380      	movs	r3, #128	@ 0x80
 8002c92:	051b      	lsls	r3, r3, #20
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d83a      	bhi.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d034      	beq.n	8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8002c9e:	697a      	ldr	r2, [r7, #20]
 8002ca0:	2380      	movs	r3, #128	@ 0x80
 8002ca2:	04db      	lsls	r3, r3, #19
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d003      	beq.n	8002cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
            break;
 8002ca8:	e031      	b.n	8002d0e <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            frequency = HSI48_VALUE;
 8002caa:	4b24      	ldr	r3, [pc, #144]	@ (8002d3c <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8002cac:	61fb      	str	r3, [r7, #28]
            break;
 8002cae:	e031      	b.n	8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002cb0:	4b20      	ldr	r3, [pc, #128]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d12a      	bne.n	8002d12 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8002cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2208      	movs	r2, #8
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d005      	beq.n	8002cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8002cc6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	091b      	lsrs	r3, r3, #4
 8002ccc:	220f      	movs	r2, #15
 8002cce:	4013      	ands	r3, r2
 8002cd0:	e005      	b.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8002cd2:	4a18      	ldr	r2, [pc, #96]	@ (8002d34 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002cd4:	2394      	movs	r3, #148	@ 0x94
 8002cd6:	58d3      	ldr	r3, [r2, r3]
 8002cd8:	0a1b      	lsrs	r3, r3, #8
 8002cda:	220f      	movs	r2, #15
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	2b0b      	cmp	r3, #11
 8002ce4:	d901      	bls.n	8002cea <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
                msirange = 11U;
 8002ce6:	230b      	movs	r3, #11
 8002ce8:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8002cea:	4b15      	ldr	r3, [pc, #84]	@ (8002d40 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	0092      	lsls	r2, r2, #2
 8002cf0:	58d3      	ldr	r3, [r2, r3]
 8002cf2:	61fb      	str	r3, [r7, #28]
            break;
 8002cf4:	e00d      	b.n	8002d12 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002cf6:	2408      	movs	r4, #8
 8002cf8:	193b      	adds	r3, r7, r4
 8002cfa:	0018      	movs	r0, r3
 8002cfc:	f000 f822 	bl	8002d44 <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002d00:	193b      	adds	r3, r7, r4
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	61fb      	str	r3, [r7, #28]
            break;
 8002d06:	e005      	b.n	8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
            break;
 8002d0c:	e002      	b.n	8002d14 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            break;
 8002d0e:	46c0      	nop			@ (mov r8, r8)
 8002d10:	e00a      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002d12:	46c0      	nop			@ (mov r8, r8)
        break;
 8002d14:	e008      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	e006      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002d1a:	46c0      	nop			@ (mov r8, r8)
 8002d1c:	e004      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	e002      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002d22:	46c0      	nop			@ (mov r8, r8)
 8002d24:	e000      	b.n	8002d28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002d26:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8002d28:	69fb      	ldr	r3, [r7, #28]
}
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b009      	add	sp, #36	@ 0x24
 8002d30:	bd90      	pop	{r4, r7, pc}
 8002d32:	46c0      	nop			@ (mov r8, r8)
 8002d34:	40021000 	.word	0x40021000
 8002d38:	00f42400 	.word	0x00f42400
 8002d3c:	02dc6c00 	.word	0x02dc6c00
 8002d40:	08004710 	.word	0x08004710

08002d44 <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b088      	sub	sp, #32
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d4c:	4b58      	ldr	r3, [pc, #352]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	227f      	movs	r2, #127	@ 0x7f
 8002d54:	4013      	ands	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002d58:	4b55      	ldr	r3, [pc, #340]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8002d62:	4b53      	ldr	r3, [pc, #332]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	091b      	lsrs	r3, r3, #4
 8002d68:	2207      	movs	r2, #7
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8002d70:	4b4f      	ldr	r3, [pc, #316]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2208      	movs	r2, #8
 8002d76:	4013      	ands	r3, r2
 8002d78:	d005      	beq.n	8002d86 <HAL_RCCEx_GetPLLClockFreq+0x42>
 8002d7a:	4b4d      	ldr	r3, [pc, #308]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	220f      	movs	r2, #15
 8002d82:	4013      	ands	r3, r2
 8002d84:	e005      	b.n	8002d92 <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8002d86:	4a4a      	ldr	r2, [pc, #296]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d88:	2394      	movs	r3, #148	@ 0x94
 8002d8a:	58d3      	ldr	r3, [r2, r3]
 8002d8c:	0a1b      	lsrs	r3, r3, #8
 8002d8e:	220f      	movs	r2, #15
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	2b0b      	cmp	r3, #11
 8002d98:	d901      	bls.n	8002d9e <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8002d9a:	230b      	movs	r3, #11
 8002d9c:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b03      	cmp	r3, #3
 8002da2:	d020      	beq.n	8002de6 <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d827      	bhi.n	8002dfa <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d00c      	beq.n	8002dca <HAL_RCCEx_GetPLLClockFreq+0x86>
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d121      	bne.n	8002dfa <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8002db6:	68f9      	ldr	r1, [r7, #12]
 8002db8:	483e      	ldr	r0, [pc, #248]	@ (8002eb4 <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8002dba:	f7fd f9a5 	bl	8000108 <__udivsi3>
 8002dbe:	0003      	movs	r3, r0
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	4353      	muls	r3, r2
 8002dc6:	61fb      	str	r3, [r7, #28]
      break;
 8002dc8:	e025      	b.n	8002e16 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8002dca:	4b3b      	ldr	r3, [pc, #236]	@ (8002eb8 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	58d3      	ldr	r3, [r2, r3]
 8002dd2:	68f9      	ldr	r1, [r7, #12]
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	f7fd f997 	bl	8000108 <__udivsi3>
 8002dda:	0003      	movs	r3, r0
 8002ddc:	001a      	movs	r2, r3
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	4353      	muls	r3, r2
 8002de2:	61fb      	str	r3, [r7, #28]
      break;
 8002de4:	e017      	b.n	8002e16 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8002de6:	68f9      	ldr	r1, [r7, #12]
 8002de8:	4834      	ldr	r0, [pc, #208]	@ (8002ebc <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8002dea:	f7fd f98d 	bl	8000108 <__udivsi3>
 8002dee:	0003      	movs	r3, r0
 8002df0:	001a      	movs	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	4353      	muls	r3, r2
 8002df6:	61fb      	str	r3, [r7, #28]
      break;
 8002df8:	e00d      	b.n	8002e16 <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8002eb8 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	0092      	lsls	r2, r2, #2
 8002e00:	58d3      	ldr	r3, [r2, r3]
 8002e02:	68f9      	ldr	r1, [r7, #12]
 8002e04:	0018      	movs	r0, r3
 8002e06:	f7fd f97f 	bl	8000108 <__udivsi3>
 8002e0a:	0003      	movs	r3, r0
 8002e0c:	001a      	movs	r2, r3
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	4353      	muls	r3, r2
 8002e12:	61fb      	str	r3, [r7, #28]
      break;
 8002e14:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8002e16:	4b26      	ldr	r3, [pc, #152]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	025b      	lsls	r3, r3, #9
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d00e      	beq.n	8002e40 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8002e22:	4b23      	ldr	r3, [pc, #140]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002e24:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8002e26:	0c5b      	lsrs	r3, r3, #17
 8002e28:	221f      	movs	r2, #31
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8002e2e:	0019      	movs	r1, r3
 8002e30:	69f8      	ldr	r0, [r7, #28]
 8002e32:	f7fd f969 	bl	8000108 <__udivsi3>
 8002e36:	0003      	movs	r3, r0
 8002e38:	001a      	movs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	e002      	b.n	8002e46 <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2200      	movs	r2, #0
 8002e44:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8002e46:	4b1a      	ldr	r3, [pc, #104]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002e48:	68da      	ldr	r2, [r3, #12]
 8002e4a:	2380      	movs	r3, #128	@ 0x80
 8002e4c:	045b      	lsls	r3, r3, #17
 8002e4e:	4013      	ands	r3, r2
 8002e50:	d00e      	beq.n	8002e70 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8002e52:	4b17      	ldr	r3, [pc, #92]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002e54:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8002e56:	0e5b      	lsrs	r3, r3, #25
 8002e58:	2207      	movs	r2, #7
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8002e5e:	0019      	movs	r1, r3
 8002e60:	69f8      	ldr	r0, [r7, #28]
 8002e62:	f7fd f951 	bl	8000108 <__udivsi3>
 8002e66:	0003      	movs	r3, r0
 8002e68:	001a      	movs	r2, r3
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	e002      	b.n	8002e76 <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2200      	movs	r2, #0
 8002e74:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8002e76:	4b0e      	ldr	r3, [pc, #56]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002e78:	68da      	ldr	r2, [r3, #12]
 8002e7a:	2380      	movs	r3, #128	@ 0x80
 8002e7c:	055b      	lsls	r3, r3, #21
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8002e82:	4b0b      	ldr	r3, [pc, #44]	@ (8002eb0 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002e84:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8002e86:	0f5b      	lsrs	r3, r3, #29
 8002e88:	2207      	movs	r2, #7
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8002e8e:	0019      	movs	r1, r3
 8002e90:	69f8      	ldr	r0, [r7, #28]
 8002e92:	f7fd f939 	bl	8000108 <__udivsi3>
 8002e96:	0003      	movs	r3, r0
 8002e98:	001a      	movs	r2, r3
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8002e9e:	e002      	b.n	8002ea6 <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	609a      	str	r2, [r3, #8]
}
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b008      	add	sp, #32
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			@ (mov r8, r8)
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	00f42400 	.word	0x00f42400
 8002eb8:	08004710 	.word	0x08004710
 8002ebc:	003d0900 	.word	0x003d0900

08002ec0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002ec8:	210f      	movs	r1, #15
 8002eca:	187b      	adds	r3, r7, r1
 8002ecc:	2201      	movs	r2, #1
 8002ece:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d100      	bne.n	8002ed8 <HAL_RTC_Init+0x18>
 8002ed6:	e08b      	b.n	8002ff0 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	2200      	movs	r2, #0
 8002edc:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	222d      	movs	r2, #45	@ 0x2d
 8002ee2:	5c9b      	ldrb	r3, [r3, r2]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d107      	bne.n	8002efa <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	222c      	movs	r2, #44	@ 0x2c
 8002eee:	2100      	movs	r1, #0
 8002ef0:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f7fd fe93 	bl	8000c20 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	222d      	movs	r2, #45	@ 0x2d
 8002efe:	2102      	movs	r1, #2
 8002f00:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f02:	4b3f      	ldr	r3, [pc, #252]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f04:	22ca      	movs	r2, #202	@ 0xca
 8002f06:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f08:	4b3d      	ldr	r3, [pc, #244]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f0a:	2253      	movs	r2, #83	@ 0x53
 8002f0c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f000 f8a1 	bl	8003058 <RTC_EnterInitMode>
 8002f16:	1e03      	subs	r3, r0, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f1a:	4b39      	ldr	r3, [pc, #228]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f1c:	22ff      	movs	r2, #255	@ 0xff
 8002f1e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	222d      	movs	r2, #45	@ 0x2d
 8002f24:	2104      	movs	r1, #4
 8002f26:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8002f28:	230f      	movs	r3, #15
 8002f2a:	18fb      	adds	r3, r7, r3
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	701a      	strb	r2, [r3, #0]
 8002f30:	e05e      	b.n	8002ff0 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002f32:	4b33      	ldr	r3, [pc, #204]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f34:	699a      	ldr	r2, [r3, #24]
 8002f36:	4b32      	ldr	r3, [pc, #200]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f38:	4932      	ldr	r1, [pc, #200]	@ (8003004 <HAL_RTC_Init+0x144>)
 8002f3a:	400a      	ands	r2, r1
 8002f3c:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002f3e:	4b30      	ldr	r3, [pc, #192]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f40:	6999      	ldr	r1, [r3, #24]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	431a      	orrs	r2, r3
 8002f52:	4b2b      	ldr	r3, [pc, #172]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f54:	430a      	orrs	r2, r1
 8002f56:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68d9      	ldr	r1, [r3, #12]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	041a      	lsls	r2, r3, #16
 8002f62:	4b27      	ldr	r3, [pc, #156]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f64:	430a      	orrs	r2, r1
 8002f66:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8002f68:	4b25      	ldr	r3, [pc, #148]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a26      	ldr	r2, [pc, #152]	@ (8003008 <HAL_RTC_Init+0x148>)
 8002f6e:	4013      	ands	r3, r2
 8002f70:	0019      	movs	r1, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	4b20      	ldr	r3, [pc, #128]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002f82:	4b1f      	ldr	r3, [pc, #124]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	4b1e      	ldr	r3, [pc, #120]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f88:	2180      	movs	r1, #128	@ 0x80
 8002f8a:	438a      	bics	r2, r1
 8002f8c:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2220      	movs	r2, #32
 8002f94:	4013      	ands	r3, r2
 8002f96:	d110      	bne.n	8002fba <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f000 f836 	bl	800300c <HAL_RTC_WaitForSynchro>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d00a      	beq.n	8002fba <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fa4:	4b16      	ldr	r3, [pc, #88]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002fa6:	22ff      	movs	r2, #255	@ 0xff
 8002fa8:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	222d      	movs	r2, #45	@ 0x2d
 8002fae:	2104      	movs	r1, #4
 8002fb0:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8002fb2:	230f      	movs	r3, #15
 8002fb4:	18fb      	adds	r3, r7, r3
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8002fba:	230f      	movs	r3, #15
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d115      	bne.n	8002ff0 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8002fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	08d9      	lsrs	r1, r3, #3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	4b08      	ldr	r3, [pc, #32]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fe2:	4b07      	ldr	r3, [pc, #28]	@ (8003000 <HAL_RTC_Init+0x140>)
 8002fe4:	22ff      	movs	r2, #255	@ 0xff
 8002fe6:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	222d      	movs	r2, #45	@ 0x2d
 8002fec:	2101      	movs	r1, #1
 8002fee:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8002ff0:	230f      	movs	r3, #15
 8002ff2:	18fb      	adds	r3, r7, r3
 8002ff4:	781b      	ldrb	r3, [r3, #0]
}
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	b004      	add	sp, #16
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	46c0      	nop			@ (mov r8, r8)
 8003000:	40002800 	.word	0x40002800
 8003004:	fb8fffbf 	.word	0xfb8fffbf
 8003008:	ffffe0ff 	.word	0xffffe0ff

0800300c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003014:	4b0f      	ldr	r3, [pc, #60]	@ (8003054 <HAL_RTC_WaitForSynchro+0x48>)
 8003016:	68da      	ldr	r2, [r3, #12]
 8003018:	4b0e      	ldr	r3, [pc, #56]	@ (8003054 <HAL_RTC_WaitForSynchro+0x48>)
 800301a:	2120      	movs	r1, #32
 800301c:	438a      	bics	r2, r1
 800301e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003020:	f7fd ffd4 	bl	8000fcc <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003028:	e00a      	b.n	8003040 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800302a:	f7fd ffcf 	bl	8000fcc <HAL_GetTick>
 800302e:	0002      	movs	r2, r0
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	1ad2      	subs	r2, r2, r3
 8003034:	23fa      	movs	r3, #250	@ 0xfa
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d901      	bls.n	8003040 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e005      	b.n	800304c <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <HAL_RTC_WaitForSynchro+0x48>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	2220      	movs	r2, #32
 8003046:	4013      	ands	r3, r2
 8003048:	d0ef      	beq.n	800302a <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	0018      	movs	r0, r3
 800304e:	46bd      	mov	sp, r7
 8003050:	b004      	add	sp, #16
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40002800 	.word	0x40002800

08003058 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003060:	4b12      	ldr	r3, [pc, #72]	@ (80030ac <RTC_EnterInitMode+0x54>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2240      	movs	r2, #64	@ 0x40
 8003066:	4013      	ands	r3, r2
 8003068:	d11a      	bne.n	80030a0 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800306a:	4b10      	ldr	r3, [pc, #64]	@ (80030ac <RTC_EnterInitMode+0x54>)
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	4b0f      	ldr	r3, [pc, #60]	@ (80030ac <RTC_EnterInitMode+0x54>)
 8003070:	2180      	movs	r1, #128	@ 0x80
 8003072:	430a      	orrs	r2, r1
 8003074:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003076:	f7fd ffa9 	bl	8000fcc <HAL_GetTick>
 800307a:	0003      	movs	r3, r0
 800307c:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800307e:	e00a      	b.n	8003096 <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003080:	f7fd ffa4 	bl	8000fcc <HAL_GetTick>
 8003084:	0002      	movs	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad2      	subs	r2, r2, r3
 800308a:	23fa      	movs	r3, #250	@ 0xfa
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	429a      	cmp	r2, r3
 8003090:	d901      	bls.n	8003096 <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e005      	b.n	80030a2 <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003096:	4b05      	ldr	r3, [pc, #20]	@ (80030ac <RTC_EnterInitMode+0x54>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	2240      	movs	r2, #64	@ 0x40
 800309c:	4013      	ands	r3, r2
 800309e:	d0ef      	beq.n	8003080 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 80030a0:	2300      	movs	r3, #0
}
 80030a2:	0018      	movs	r0, r3
 80030a4:	46bd      	mov	sp, r7
 80030a6:	b004      	add	sp, #16
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	46c0      	nop			@ (mov r8, r8)
 80030ac:	40002800 	.word	0x40002800

080030b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0a0      	b.n	8003204 <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685a      	ldr	r2, [r3, #4]
 80030ce:	2382      	movs	r3, #130	@ 0x82
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d009      	beq.n	80030ea <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	61da      	str	r2, [r3, #28]
 80030dc:	e005      	b.n	80030ea <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2200      	movs	r2, #0
 80030e8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	225d      	movs	r2, #93	@ 0x5d
 80030f4:	5c9b      	ldrb	r3, [r3, r2]
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d107      	bne.n	800310c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	225c      	movs	r2, #92	@ 0x5c
 8003100:	2100      	movs	r1, #0
 8003102:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	0018      	movs	r0, r3
 8003108:	f7fd fdca 	bl	8000ca0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	225d      	movs	r2, #93	@ 0x5d
 8003110:	2102      	movs	r1, #2
 8003112:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2140      	movs	r1, #64	@ 0x40
 8003120:	438a      	bics	r2, r1
 8003122:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68da      	ldr	r2, [r3, #12]
 8003128:	23e0      	movs	r3, #224	@ 0xe0
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	429a      	cmp	r2, r3
 800312e:	d902      	bls.n	8003136 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003130:	2300      	movs	r3, #0
 8003132:	60fb      	str	r3, [r7, #12]
 8003134:	e002      	b.n	800313c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	015b      	lsls	r3, r3, #5
 800313a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	23f0      	movs	r3, #240	@ 0xf0
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	429a      	cmp	r2, r3
 8003146:	d008      	beq.n	800315a <HAL_SPI_Init+0xaa>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	68da      	ldr	r2, [r3, #12]
 800314c:	23e0      	movs	r3, #224	@ 0xe0
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	429a      	cmp	r2, r3
 8003152:	d002      	beq.n	800315a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	2382      	movs	r3, #130	@ 0x82
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	401a      	ands	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6899      	ldr	r1, [r3, #8]
 8003168:	2384      	movs	r3, #132	@ 0x84
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	400b      	ands	r3, r1
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	2102      	movs	r1, #2
 8003176:	400b      	ands	r3, r1
 8003178:	431a      	orrs	r2, r3
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	2101      	movs	r1, #1
 8003180:	400b      	ands	r3, r1
 8003182:	431a      	orrs	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6999      	ldr	r1, [r3, #24]
 8003188:	2380      	movs	r3, #128	@ 0x80
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	400b      	ands	r3, r1
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	2138      	movs	r1, #56	@ 0x38
 8003196:	400b      	ands	r3, r1
 8003198:	431a      	orrs	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	2180      	movs	r1, #128	@ 0x80
 80031a0:	400b      	ands	r3, r1
 80031a2:	431a      	orrs	r2, r3
 80031a4:	0011      	movs	r1, r2
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031aa:	2380      	movs	r3, #128	@ 0x80
 80031ac:	019b      	lsls	r3, r3, #6
 80031ae:	401a      	ands	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	0c1b      	lsrs	r3, r3, #16
 80031be:	2204      	movs	r2, #4
 80031c0:	401a      	ands	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c6:	2110      	movs	r1, #16
 80031c8:	400b      	ands	r3, r1
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031d0:	2108      	movs	r1, #8
 80031d2:	400b      	ands	r3, r1
 80031d4:	431a      	orrs	r2, r3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68d9      	ldr	r1, [r3, #12]
 80031da:	23f0      	movs	r3, #240	@ 0xf0
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	400b      	ands	r3, r1
 80031e0:	431a      	orrs	r2, r3
 80031e2:	0011      	movs	r1, r2
 80031e4:	68fa      	ldr	r2, [r7, #12]
 80031e6:	2380      	movs	r3, #128	@ 0x80
 80031e8:	015b      	lsls	r3, r3, #5
 80031ea:	401a      	ands	r2, r3
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2200      	movs	r2, #0
 80031f8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	225d      	movs	r2, #93	@ 0x5d
 80031fe:	2101      	movs	r1, #1
 8003200:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	b004      	add	sp, #16
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e04a      	b.n	80032b4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	223d      	movs	r2, #61	@ 0x3d
 8003222:	5c9b      	ldrb	r3, [r3, r2]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d107      	bne.n	800323a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	223c      	movs	r2, #60	@ 0x3c
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	f7fd fdb9 	bl	8000dac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	223d      	movs	r2, #61	@ 0x3d
 800323e:	2102      	movs	r1, #2
 8003240:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3304      	adds	r3, #4
 800324a:	0019      	movs	r1, r3
 800324c:	0010      	movs	r0, r2
 800324e:	f000 f935 	bl	80034bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2248      	movs	r2, #72	@ 0x48
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	223e      	movs	r2, #62	@ 0x3e
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	223f      	movs	r2, #63	@ 0x3f
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2240      	movs	r2, #64	@ 0x40
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2241      	movs	r2, #65	@ 0x41
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2242      	movs	r2, #66	@ 0x42
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2243      	movs	r2, #67	@ 0x43
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2244      	movs	r2, #68	@ 0x44
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2245      	movs	r2, #69	@ 0x45
 8003296:	2101      	movs	r1, #1
 8003298:	5499      	strb	r1, [r3, r2]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2246      	movs	r2, #70	@ 0x46
 800329e:	2101      	movs	r1, #1
 80032a0:	5499      	strb	r1, [r3, r2]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2247      	movs	r2, #71	@ 0x47
 80032a6:	2101      	movs	r1, #1
 80032a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	223d      	movs	r2, #61	@ 0x3d
 80032ae:	2101      	movs	r1, #1
 80032b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	0018      	movs	r0, r3
 80032b6:	46bd      	mov	sp, r7
 80032b8:	b002      	add	sp, #8
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032c8:	2317      	movs	r3, #23
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	2200      	movs	r2, #0
 80032ce:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	223c      	movs	r2, #60	@ 0x3c
 80032d4:	5c9b      	ldrb	r3, [r3, r2]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <HAL_TIM_PWM_ConfigChannel+0x22>
 80032da:	2302      	movs	r3, #2
 80032dc:	e0e5      	b.n	80034aa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	223c      	movs	r2, #60	@ 0x3c
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2b14      	cmp	r3, #20
 80032ea:	d900      	bls.n	80032ee <HAL_TIM_PWM_ConfigChannel+0x32>
 80032ec:	e0d1      	b.n	8003492 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	009a      	lsls	r2, r3, #2
 80032f2:	4b70      	ldr	r3, [pc, #448]	@ (80034b4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80032f4:	18d3      	adds	r3, r2, r3
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	0011      	movs	r1, r2
 8003302:	0018      	movs	r0, r3
 8003304:	f000 f958 	bl	80035b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	699a      	ldr	r2, [r3, #24]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2108      	movs	r1, #8
 8003314:	430a      	orrs	r2, r1
 8003316:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2104      	movs	r1, #4
 8003324:	438a      	bics	r2, r1
 8003326:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6999      	ldr	r1, [r3, #24]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	691a      	ldr	r2, [r3, #16]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	619a      	str	r2, [r3, #24]
      break;
 800333a:	e0af      	b.n	800349c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	0011      	movs	r1, r2
 8003344:	0018      	movs	r0, r3
 8003346:	f000 f9b7 	bl	80036b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	699a      	ldr	r2, [r3, #24]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2180      	movs	r1, #128	@ 0x80
 8003356:	0109      	lsls	r1, r1, #4
 8003358:	430a      	orrs	r2, r1
 800335a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4954      	ldr	r1, [pc, #336]	@ (80034b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003368:	400a      	ands	r2, r1
 800336a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6999      	ldr	r1, [r3, #24]
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	021a      	lsls	r2, r3, #8
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	619a      	str	r2, [r3, #24]
      break;
 8003380:	e08c      	b.n	800349c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	0011      	movs	r1, r2
 800338a:	0018      	movs	r0, r3
 800338c:	f000 fa12 	bl	80037b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	69da      	ldr	r2, [r3, #28]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2108      	movs	r1, #8
 800339c:	430a      	orrs	r2, r1
 800339e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2104      	movs	r1, #4
 80033ac:	438a      	bics	r2, r1
 80033ae:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69d9      	ldr	r1, [r3, #28]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	691a      	ldr	r2, [r3, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	61da      	str	r2, [r3, #28]
      break;
 80033c2:	e06b      	b.n	800349c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	0011      	movs	r1, r2
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 fa73 	bl	80038b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	69da      	ldr	r2, [r3, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2180      	movs	r1, #128	@ 0x80
 80033de:	0109      	lsls	r1, r1, #4
 80033e0:	430a      	orrs	r2, r1
 80033e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4932      	ldr	r1, [pc, #200]	@ (80034b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80033f0:	400a      	ands	r2, r1
 80033f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69d9      	ldr	r1, [r3, #28]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	021a      	lsls	r2, r3, #8
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	61da      	str	r2, [r3, #28]
      break;
 8003408:	e048      	b.n	800349c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	0011      	movs	r1, r2
 8003412:	0018      	movs	r0, r3
 8003414:	f000 fab4 	bl	8003980 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2108      	movs	r1, #8
 8003424:	430a      	orrs	r2, r1
 8003426:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2104      	movs	r1, #4
 8003434:	438a      	bics	r2, r1
 8003436:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	691a      	ldr	r2, [r3, #16]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	430a      	orrs	r2, r1
 8003448:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800344a:	e027      	b.n	800349c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	0011      	movs	r1, r2
 8003454:	0018      	movs	r0, r3
 8003456:	f000 faed 	bl	8003a34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2180      	movs	r1, #128	@ 0x80
 8003466:	0109      	lsls	r1, r1, #4
 8003468:	430a      	orrs	r2, r1
 800346a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4910      	ldr	r1, [pc, #64]	@ (80034b8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003478:	400a      	ands	r2, r1
 800347a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	021a      	lsls	r2, r3, #8
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	430a      	orrs	r2, r1
 800348e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003490:	e004      	b.n	800349c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003492:	2317      	movs	r3, #23
 8003494:	18fb      	adds	r3, r7, r3
 8003496:	2201      	movs	r2, #1
 8003498:	701a      	strb	r2, [r3, #0]
      break;
 800349a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	223c      	movs	r2, #60	@ 0x3c
 80034a0:	2100      	movs	r1, #0
 80034a2:	5499      	strb	r1, [r3, r2]

  return status;
 80034a4:	2317      	movs	r3, #23
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	781b      	ldrb	r3, [r3, #0]
}
 80034aa:	0018      	movs	r0, r3
 80034ac:	46bd      	mov	sp, r7
 80034ae:	b006      	add	sp, #24
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	46c0      	nop			@ (mov r8, r8)
 80034b4:	080047c4 	.word	0x080047c4
 80034b8:	fffffbff 	.word	0xfffffbff

080034bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a35      	ldr	r2, [pc, #212]	@ (80035a4 <TIM_Base_SetConfig+0xe8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d008      	beq.n	80034e6 <TIM_Base_SetConfig+0x2a>
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	2380      	movs	r3, #128	@ 0x80
 80034d8:	05db      	lsls	r3, r3, #23
 80034da:	429a      	cmp	r2, r3
 80034dc:	d003      	beq.n	80034e6 <TIM_Base_SetConfig+0x2a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a31      	ldr	r2, [pc, #196]	@ (80035a8 <TIM_Base_SetConfig+0xec>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d108      	bne.n	80034f8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2270      	movs	r2, #112	@ 0x70
 80034ea:	4393      	bics	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a2a      	ldr	r2, [pc, #168]	@ (80035a4 <TIM_Base_SetConfig+0xe8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d010      	beq.n	8003522 <TIM_Base_SetConfig+0x66>
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	2380      	movs	r3, #128	@ 0x80
 8003504:	05db      	lsls	r3, r3, #23
 8003506:	429a      	cmp	r2, r3
 8003508:	d00b      	beq.n	8003522 <TIM_Base_SetConfig+0x66>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a26      	ldr	r2, [pc, #152]	@ (80035a8 <TIM_Base_SetConfig+0xec>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d007      	beq.n	8003522 <TIM_Base_SetConfig+0x66>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a25      	ldr	r2, [pc, #148]	@ (80035ac <TIM_Base_SetConfig+0xf0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d003      	beq.n	8003522 <TIM_Base_SetConfig+0x66>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a24      	ldr	r2, [pc, #144]	@ (80035b0 <TIM_Base_SetConfig+0xf4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d108      	bne.n	8003534 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	4a23      	ldr	r2, [pc, #140]	@ (80035b4 <TIM_Base_SetConfig+0xf8>)
 8003526:	4013      	ands	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	4313      	orrs	r3, r2
 8003532:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2280      	movs	r2, #128	@ 0x80
 8003538:	4393      	bics	r3, r2
 800353a:	001a      	movs	r2, r3
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	4313      	orrs	r3, r2
 8003542:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	689a      	ldr	r2, [r3, #8]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a11      	ldr	r2, [pc, #68]	@ (80035a4 <TIM_Base_SetConfig+0xe8>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d007      	beq.n	8003572 <TIM_Base_SetConfig+0xb6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a11      	ldr	r2, [pc, #68]	@ (80035ac <TIM_Base_SetConfig+0xf0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d003      	beq.n	8003572 <TIM_Base_SetConfig+0xb6>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a10      	ldr	r2, [pc, #64]	@ (80035b0 <TIM_Base_SetConfig+0xf4>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d103      	bne.n	800357a <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	2201      	movs	r2, #1
 8003586:	4013      	ands	r3, r2
 8003588:	2b01      	cmp	r3, #1
 800358a:	d106      	bne.n	800359a <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	691b      	ldr	r3, [r3, #16]
 8003590:	2201      	movs	r2, #1
 8003592:	4393      	bics	r3, r2
 8003594:	001a      	movs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	611a      	str	r2, [r3, #16]
  }
}
 800359a:	46c0      	nop			@ (mov r8, r8)
 800359c:	46bd      	mov	sp, r7
 800359e:	b004      	add	sp, #16
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	46c0      	nop			@ (mov r8, r8)
 80035a4:	40012c00 	.word	0x40012c00
 80035a8:	40000400 	.word	0x40000400
 80035ac:	40014000 	.word	0x40014000
 80035b0:	40014400 	.word	0x40014400
 80035b4:	fffffcff 	.word	0xfffffcff

080035b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	2201      	movs	r2, #1
 80035ce:	4393      	bics	r3, r2
 80035d0:	001a      	movs	r2, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	699b      	ldr	r3, [r3, #24]
 80035e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4a2e      	ldr	r2, [pc, #184]	@ (80036a0 <TIM_OC1_SetConfig+0xe8>)
 80035e6:	4013      	ands	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2203      	movs	r2, #3
 80035ee:	4393      	bics	r3, r2
 80035f0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	2202      	movs	r2, #2
 8003600:	4393      	bics	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	697a      	ldr	r2, [r7, #20]
 800360a:	4313      	orrs	r3, r2
 800360c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a24      	ldr	r2, [pc, #144]	@ (80036a4 <TIM_OC1_SetConfig+0xec>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <TIM_OC1_SetConfig+0x6e>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a23      	ldr	r2, [pc, #140]	@ (80036a8 <TIM_OC1_SetConfig+0xf0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d003      	beq.n	8003626 <TIM_OC1_SetConfig+0x6e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a22      	ldr	r2, [pc, #136]	@ (80036ac <TIM_OC1_SetConfig+0xf4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d10c      	bne.n	8003640 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2208      	movs	r2, #8
 800362a:	4393      	bics	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2204      	movs	r2, #4
 800363c:	4393      	bics	r3, r2
 800363e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a18      	ldr	r2, [pc, #96]	@ (80036a4 <TIM_OC1_SetConfig+0xec>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d007      	beq.n	8003658 <TIM_OC1_SetConfig+0xa0>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a17      	ldr	r2, [pc, #92]	@ (80036a8 <TIM_OC1_SetConfig+0xf0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d003      	beq.n	8003658 <TIM_OC1_SetConfig+0xa0>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a16      	ldr	r2, [pc, #88]	@ (80036ac <TIM_OC1_SetConfig+0xf4>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d111      	bne.n	800367c <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003658:	693b      	ldr	r3, [r7, #16]
 800365a:	4a15      	ldr	r2, [pc, #84]	@ (80036b0 <TIM_OC1_SetConfig+0xf8>)
 800365c:	4013      	ands	r3, r2
 800365e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4a14      	ldr	r2, [pc, #80]	@ (80036b4 <TIM_OC1_SetConfig+0xfc>)
 8003664:	4013      	ands	r3, r2
 8003666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4313      	orrs	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4313      	orrs	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	621a      	str	r2, [r3, #32]
}
 8003696:	46c0      	nop			@ (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b006      	add	sp, #24
 800369c:	bd80      	pop	{r7, pc}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	fffeff8f 	.word	0xfffeff8f
 80036a4:	40012c00 	.word	0x40012c00
 80036a8:	40014000 	.word	0x40014000
 80036ac:	40014400 	.word	0x40014400
 80036b0:	fffffeff 	.word	0xfffffeff
 80036b4:	fffffdff 	.word	0xfffffdff

080036b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
 80036c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	2210      	movs	r2, #16
 80036ce:	4393      	bics	r3, r2
 80036d0:	001a      	movs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003798 <TIM_OC2_SetConfig+0xe0>)
 80036e6:	4013      	ands	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	4a2b      	ldr	r2, [pc, #172]	@ (800379c <TIM_OC2_SetConfig+0xe4>)
 80036ee:	4013      	ands	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	021b      	lsls	r3, r3, #8
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	2220      	movs	r2, #32
 8003702:	4393      	bics	r3, r2
 8003704:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4313      	orrs	r3, r2
 8003710:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a22      	ldr	r2, [pc, #136]	@ (80037a0 <TIM_OC2_SetConfig+0xe8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d10d      	bne.n	8003736 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2280      	movs	r2, #128	@ 0x80
 800371e:	4393      	bics	r3, r2
 8003720:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	2240      	movs	r2, #64	@ 0x40
 8003732:	4393      	bics	r3, r2
 8003734:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a19      	ldr	r2, [pc, #100]	@ (80037a0 <TIM_OC2_SetConfig+0xe8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d007      	beq.n	800374e <TIM_OC2_SetConfig+0x96>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	4a18      	ldr	r2, [pc, #96]	@ (80037a4 <TIM_OC2_SetConfig+0xec>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d003      	beq.n	800374e <TIM_OC2_SetConfig+0x96>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a17      	ldr	r2, [pc, #92]	@ (80037a8 <TIM_OC2_SetConfig+0xf0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d113      	bne.n	8003776 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	4a16      	ldr	r2, [pc, #88]	@ (80037ac <TIM_OC2_SetConfig+0xf4>)
 8003752:	4013      	ands	r3, r2
 8003754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4a15      	ldr	r2, [pc, #84]	@ (80037b0 <TIM_OC2_SetConfig+0xf8>)
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	693a      	ldr	r2, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68fa      	ldr	r2, [r7, #12]
 8003780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	621a      	str	r2, [r3, #32]
}
 8003790:	46c0      	nop			@ (mov r8, r8)
 8003792:	46bd      	mov	sp, r7
 8003794:	b006      	add	sp, #24
 8003796:	bd80      	pop	{r7, pc}
 8003798:	feff8fff 	.word	0xfeff8fff
 800379c:	fffffcff 	.word	0xfffffcff
 80037a0:	40012c00 	.word	0x40012c00
 80037a4:	40014000 	.word	0x40014000
 80037a8:	40014400 	.word	0x40014400
 80037ac:	fffffbff 	.word	0xfffffbff
 80037b0:	fffff7ff 	.word	0xfffff7ff

080037b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a1b      	ldr	r3, [r3, #32]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6a1b      	ldr	r3, [r3, #32]
 80037c8:	4a31      	ldr	r2, [pc, #196]	@ (8003890 <TIM_OC3_SetConfig+0xdc>)
 80037ca:	401a      	ands	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a2d      	ldr	r2, [pc, #180]	@ (8003894 <TIM_OC3_SetConfig+0xe0>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2203      	movs	r2, #3
 80037e8:	4393      	bics	r3, r2
 80037ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	4a27      	ldr	r2, [pc, #156]	@ (8003898 <TIM_OC3_SetConfig+0xe4>)
 80037fa:	4013      	ands	r3, r2
 80037fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	021b      	lsls	r3, r3, #8
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	4313      	orrs	r3, r2
 8003808:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a23      	ldr	r2, [pc, #140]	@ (800389c <TIM_OC3_SetConfig+0xe8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10d      	bne.n	800382e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	4a22      	ldr	r2, [pc, #136]	@ (80038a0 <TIM_OC3_SetConfig+0xec>)
 8003816:	4013      	ands	r3, r2
 8003818:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	4313      	orrs	r3, r2
 8003824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	4a1e      	ldr	r2, [pc, #120]	@ (80038a4 <TIM_OC3_SetConfig+0xf0>)
 800382a:	4013      	ands	r3, r2
 800382c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a1a      	ldr	r2, [pc, #104]	@ (800389c <TIM_OC3_SetConfig+0xe8>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d007      	beq.n	8003846 <TIM_OC3_SetConfig+0x92>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1b      	ldr	r2, [pc, #108]	@ (80038a8 <TIM_OC3_SetConfig+0xf4>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d003      	beq.n	8003846 <TIM_OC3_SetConfig+0x92>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a1a      	ldr	r2, [pc, #104]	@ (80038ac <TIM_OC3_SetConfig+0xf8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d113      	bne.n	800386e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4a19      	ldr	r2, [pc, #100]	@ (80038b0 <TIM_OC3_SetConfig+0xfc>)
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4a18      	ldr	r2, [pc, #96]	@ (80038b4 <TIM_OC3_SetConfig+0x100>)
 8003852:	4013      	ands	r3, r2
 8003854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4313      	orrs	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	693a      	ldr	r2, [r7, #16]
 800386a:	4313      	orrs	r3, r2
 800386c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685a      	ldr	r2, [r3, #4]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	621a      	str	r2, [r3, #32]
}
 8003888:	46c0      	nop			@ (mov r8, r8)
 800388a:	46bd      	mov	sp, r7
 800388c:	b006      	add	sp, #24
 800388e:	bd80      	pop	{r7, pc}
 8003890:	fffffeff 	.word	0xfffffeff
 8003894:	fffeff8f 	.word	0xfffeff8f
 8003898:	fffffdff 	.word	0xfffffdff
 800389c:	40012c00 	.word	0x40012c00
 80038a0:	fffff7ff 	.word	0xfffff7ff
 80038a4:	fffffbff 	.word	0xfffffbff
 80038a8:	40014000 	.word	0x40014000
 80038ac:	40014400 	.word	0x40014400
 80038b0:	ffffefff 	.word	0xffffefff
 80038b4:	ffffdfff 	.word	0xffffdfff

080038b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b086      	sub	sp, #24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a1b      	ldr	r3, [r3, #32]
 80038c6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	4a24      	ldr	r2, [pc, #144]	@ (8003960 <TIM_OC4_SetConfig+0xa8>)
 80038ce:	401a      	ands	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69db      	ldr	r3, [r3, #28]
 80038de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	4a20      	ldr	r2, [pc, #128]	@ (8003964 <TIM_OC4_SetConfig+0xac>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003968 <TIM_OC4_SetConfig+0xb0>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4a1b      	ldr	r2, [pc, #108]	@ (800396c <TIM_OC4_SetConfig+0xb4>)
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	031b      	lsls	r3, r3, #12
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a17      	ldr	r2, [pc, #92]	@ (8003970 <TIM_OC4_SetConfig+0xb8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_OC4_SetConfig+0x70>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a16      	ldr	r2, [pc, #88]	@ (8003974 <TIM_OC4_SetConfig+0xbc>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_OC4_SetConfig+0x70>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a15      	ldr	r2, [pc, #84]	@ (8003978 <TIM_OC4_SetConfig+0xc0>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d109      	bne.n	800393c <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	4a14      	ldr	r2, [pc, #80]	@ (800397c <TIM_OC4_SetConfig+0xc4>)
 800392c:	4013      	ands	r3, r2
 800392e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	695b      	ldr	r3, [r3, #20]
 8003934:	019b      	lsls	r3, r3, #6
 8003936:	697a      	ldr	r2, [r7, #20]
 8003938:	4313      	orrs	r3, r2
 800393a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685a      	ldr	r2, [r3, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	693a      	ldr	r2, [r7, #16]
 8003954:	621a      	str	r2, [r3, #32]
}
 8003956:	46c0      	nop			@ (mov r8, r8)
 8003958:	46bd      	mov	sp, r7
 800395a:	b006      	add	sp, #24
 800395c:	bd80      	pop	{r7, pc}
 800395e:	46c0      	nop			@ (mov r8, r8)
 8003960:	ffffefff 	.word	0xffffefff
 8003964:	feff8fff 	.word	0xfeff8fff
 8003968:	fffffcff 	.word	0xfffffcff
 800396c:	ffffdfff 	.word	0xffffdfff
 8003970:	40012c00 	.word	0x40012c00
 8003974:	40014000 	.word	0x40014000
 8003978:	40014400 	.word	0x40014400
 800397c:	ffffbfff 	.word	0xffffbfff

08003980 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
 800398e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a1b      	ldr	r3, [r3, #32]
 8003994:	4a21      	ldr	r2, [pc, #132]	@ (8003a1c <TIM_OC5_SetConfig+0x9c>)
 8003996:	401a      	ands	r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003a20 <TIM_OC5_SetConfig+0xa0>)
 80039ac:	4013      	ands	r3, r2
 80039ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68fa      	ldr	r2, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4a19      	ldr	r2, [pc, #100]	@ (8003a24 <TIM_OC5_SetConfig+0xa4>)
 80039be:	4013      	ands	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	041b      	lsls	r3, r3, #16
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a15      	ldr	r2, [pc, #84]	@ (8003a28 <TIM_OC5_SetConfig+0xa8>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <TIM_OC5_SetConfig+0x66>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a14      	ldr	r2, [pc, #80]	@ (8003a2c <TIM_OC5_SetConfig+0xac>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d003      	beq.n	80039e6 <TIM_OC5_SetConfig+0x66>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a13      	ldr	r2, [pc, #76]	@ (8003a30 <TIM_OC5_SetConfig+0xb0>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d109      	bne.n	80039fa <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	4a0c      	ldr	r2, [pc, #48]	@ (8003a1c <TIM_OC5_SetConfig+0x9c>)
 80039ea:	4013      	ands	r3, r2
 80039ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	021b      	lsls	r3, r3, #8
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	46c0      	nop			@ (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b006      	add	sp, #24
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	fffeffff 	.word	0xfffeffff
 8003a20:	fffeff8f 	.word	0xfffeff8f
 8003a24:	fffdffff 	.word	0xfffdffff
 8003a28:	40012c00 	.word	0x40012c00
 8003a2c:	40014000 	.word	0x40014000
 8003a30:	40014400 	.word	0x40014400

08003a34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
 8003a42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a1b      	ldr	r3, [r3, #32]
 8003a48:	4a22      	ldr	r2, [pc, #136]	@ (8003ad4 <TIM_OC6_SetConfig+0xa0>)
 8003a4a:	401a      	ands	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad8 <TIM_OC6_SetConfig+0xa4>)
 8003a60:	4013      	ands	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	021b      	lsls	r3, r3, #8
 8003a6a:	68fa      	ldr	r2, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	4a1a      	ldr	r2, [pc, #104]	@ (8003adc <TIM_OC6_SetConfig+0xa8>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	051b      	lsls	r3, r3, #20
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a16      	ldr	r2, [pc, #88]	@ (8003ae0 <TIM_OC6_SetConfig+0xac>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d007      	beq.n	8003a9c <TIM_OC6_SetConfig+0x68>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a15      	ldr	r2, [pc, #84]	@ (8003ae4 <TIM_OC6_SetConfig+0xb0>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d003      	beq.n	8003a9c <TIM_OC6_SetConfig+0x68>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a14      	ldr	r2, [pc, #80]	@ (8003ae8 <TIM_OC6_SetConfig+0xb4>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d109      	bne.n	8003ab0 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a9c:	697b      	ldr	r3, [r7, #20]
 8003a9e:	4a13      	ldr	r2, [pc, #76]	@ (8003aec <TIM_OC6_SetConfig+0xb8>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	029b      	lsls	r3, r3, #10
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	697a      	ldr	r2, [r7, #20]
 8003ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	621a      	str	r2, [r3, #32]
}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b006      	add	sp, #24
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	ffefffff 	.word	0xffefffff
 8003ad8:	feff8fff 	.word	0xfeff8fff
 8003adc:	ffdfffff 	.word	0xffdfffff
 8003ae0:	40012c00 	.word	0x40012c00
 8003ae4:	40014000 	.word	0x40014000
 8003ae8:	40014400 	.word	0x40014400
 8003aec:	fffbffff 	.word	0xfffbffff

08003af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
 8003af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	223c      	movs	r2, #60	@ 0x3c
 8003afe:	5c9b      	ldrb	r3, [r3, r2]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e055      	b.n	8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	223c      	movs	r2, #60	@ 0x3c
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	223d      	movs	r2, #61	@ 0x3d
 8003b14:	2102      	movs	r1, #2
 8003b16:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a23      	ldr	r2, [pc, #140]	@ (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d108      	bne.n	8003b44 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a22      	ldr	r2, [pc, #136]	@ (8003bc0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2270      	movs	r2, #112	@ 0x70
 8003b48:	4393      	bics	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a16      	ldr	r2, [pc, #88]	@ (8003bbc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d00f      	beq.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	2380      	movs	r3, #128	@ 0x80
 8003b6e:	05db      	lsls	r3, r3, #23
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d009      	beq.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a12      	ldr	r2, [pc, #72]	@ (8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a11      	ldr	r2, [pc, #68]	@ (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d10c      	bne.n	8003ba2 <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2280      	movs	r2, #128	@ 0x80
 8003b8c:	4393      	bics	r3, r2
 8003b8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	68ba      	ldr	r2, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	223d      	movs	r2, #61	@ 0x3d
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	223c      	movs	r2, #60	@ 0x3c
 8003bae:	2100      	movs	r1, #0
 8003bb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	b004      	add	sp, #16
 8003bba:	bd80      	pop	{r7, pc}
 8003bbc:	40012c00 	.word	0x40012c00
 8003bc0:	ff0fffff 	.word	0xff0fffff
 8003bc4:	40000400 	.word	0x40000400
 8003bc8:	40014000 	.word	0x40014000

08003bcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e046      	b.n	8003c6c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2288      	movs	r2, #136	@ 0x88
 8003be2:	589b      	ldr	r3, [r3, r2]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d107      	bne.n	8003bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2284      	movs	r2, #132	@ 0x84
 8003bec:	2100      	movs	r1, #0
 8003bee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f7fc ffb4 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2288      	movs	r2, #136	@ 0x88
 8003bfc:	2124      	movs	r1, #36	@ 0x24
 8003bfe:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	438a      	bics	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f000 f9e6 	bl	8003fec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	0018      	movs	r0, r3
 8003c24:	f000 f828 	bl	8003c78 <UART_SetConfig>
 8003c28:	0003      	movs	r3, r0
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e01c      	b.n	8003c6c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	685a      	ldr	r2, [r3, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	490d      	ldr	r1, [pc, #52]	@ (8003c74 <HAL_UART_Init+0xa8>)
 8003c3e:	400a      	ands	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	212a      	movs	r1, #42	@ 0x2a
 8003c4e:	438a      	bics	r2, r1
 8003c50:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2101      	movs	r1, #1
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f000 fa75 	bl	8004154 <UART_CheckIdleState>
 8003c6a:	0003      	movs	r3, r0
}
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	b002      	add	sp, #8
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	ffffb7ff 	.word	0xffffb7ff

08003c78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c78:	b5b0      	push	{r4, r5, r7, lr}
 8003c7a:	b092      	sub	sp, #72	@ 0x48
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c80:	231f      	movs	r3, #31
 8003c82:	2220      	movs	r2, #32
 8003c84:	189b      	adds	r3, r3, r2
 8003c86:	19db      	adds	r3, r3, r7
 8003c88:	2200      	movs	r2, #0
 8003c8a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8e:	689a      	ldr	r2, [r3, #8]
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	691b      	ldr	r3, [r3, #16]
 8003c94:	431a      	orrs	r2, r3
 8003c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4ac6      	ldr	r2, [pc, #792]	@ (8003fc4 <UART_SetConfig+0x34c>)
 8003cac:	4013      	ands	r3, r2
 8003cae:	0019      	movs	r1, r3
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	4ac1      	ldr	r2, [pc, #772]	@ (8003fc8 <UART_SetConfig+0x350>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc8:	68d9      	ldr	r1, [r3, #12]
 8003cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	0003      	movs	r3, r0
 8003cd0:	430b      	orrs	r3, r1
 8003cd2:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4abb      	ldr	r2, [pc, #748]	@ (8003fcc <UART_SetConfig+0x354>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d009      	beq.n	8003cf8 <UART_SetConfig+0x80>
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4ab9      	ldr	r2, [pc, #740]	@ (8003fd0 <UART_SetConfig+0x358>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d004      	beq.n	8003cf8 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	4ab5      	ldr	r2, [pc, #724]	@ (8003fd4 <UART_SetConfig+0x35c>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	0019      	movs	r1, r3
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d0a:	430b      	orrs	r3, r1
 8003d0c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d14:	220f      	movs	r2, #15
 8003d16:	4393      	bics	r3, r2
 8003d18:	0018      	movs	r0, r3
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d1c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d20:	681a      	ldr	r2, [r3, #0]
 8003d22:	0003      	movs	r3, r0
 8003d24:	430b      	orrs	r3, r1
 8003d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4aaa      	ldr	r2, [pc, #680]	@ (8003fd8 <UART_SetConfig+0x360>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d102      	bne.n	8003d38 <UART_SetConfig+0xc0>
 8003d32:	2301      	movs	r3, #1
 8003d34:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d36:	e02b      	b.n	8003d90 <UART_SetConfig+0x118>
 8003d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4aa7      	ldr	r2, [pc, #668]	@ (8003fdc <UART_SetConfig+0x364>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d102      	bne.n	8003d48 <UART_SetConfig+0xd0>
 8003d42:	2302      	movs	r3, #2
 8003d44:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d46:	e023      	b.n	8003d90 <UART_SetConfig+0x118>
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4aa4      	ldr	r2, [pc, #656]	@ (8003fe0 <UART_SetConfig+0x368>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d103      	bne.n	8003d5a <UART_SetConfig+0xe2>
 8003d52:	2380      	movs	r3, #128	@ 0x80
 8003d54:	025b      	lsls	r3, r3, #9
 8003d56:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d58:	e01a      	b.n	8003d90 <UART_SetConfig+0x118>
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4aa1      	ldr	r2, [pc, #644]	@ (8003fe4 <UART_SetConfig+0x36c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d103      	bne.n	8003d6c <UART_SetConfig+0xf4>
 8003d64:	2380      	movs	r3, #128	@ 0x80
 8003d66:	029b      	lsls	r3, r3, #10
 8003d68:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d6a:	e011      	b.n	8003d90 <UART_SetConfig+0x118>
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a96      	ldr	r2, [pc, #600]	@ (8003fcc <UART_SetConfig+0x354>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d102      	bne.n	8003d7c <UART_SetConfig+0x104>
 8003d76:	2310      	movs	r3, #16
 8003d78:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d7a:	e009      	b.n	8003d90 <UART_SetConfig+0x118>
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a93      	ldr	r2, [pc, #588]	@ (8003fd0 <UART_SetConfig+0x358>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d102      	bne.n	8003d8c <UART_SetConfig+0x114>
 8003d86:	2308      	movs	r3, #8
 8003d88:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d8a:	e001      	b.n	8003d90 <UART_SetConfig+0x118>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a8d      	ldr	r2, [pc, #564]	@ (8003fcc <UART_SetConfig+0x354>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d005      	beq.n	8003da6 <UART_SetConfig+0x12e>
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a8c      	ldr	r2, [pc, #560]	@ (8003fd0 <UART_SetConfig+0x358>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d000      	beq.n	8003da6 <UART_SetConfig+0x12e>
 8003da4:	e06f      	b.n	8003e86 <UART_SetConfig+0x20e>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da8:	0018      	movs	r0, r3
 8003daa:	f7fe fba3 	bl	80024f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003dae:	0003      	movs	r3, r0
 8003db0:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8003db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d100      	bne.n	8003dba <UART_SetConfig+0x142>
 8003db8:	e0ec      	b.n	8003f94 <UART_SetConfig+0x31c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dbc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dbe:	4b8a      	ldr	r3, [pc, #552]	@ (8003fe8 <UART_SetConfig+0x370>)
 8003dc0:	0052      	lsls	r2, r2, #1
 8003dc2:	5ad3      	ldrh	r3, [r2, r3]
 8003dc4:	0019      	movs	r1, r3
 8003dc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003dc8:	f7fc f99e 	bl	8000108 <__udivsi3>
 8003dcc:	0003      	movs	r3, r0
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd2:	685a      	ldr	r2, [r3, #4]
 8003dd4:	0013      	movs	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	189b      	adds	r3, r3, r2
 8003dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d305      	bcc.n	8003dec <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d906      	bls.n	8003dfa <UART_SetConfig+0x182>
      {
        ret = HAL_ERROR;
 8003dec:	231f      	movs	r3, #31
 8003dee:	2220      	movs	r2, #32
 8003df0:	189b      	adds	r3, r3, r2
 8003df2:	19db      	adds	r3, r3, r7
 8003df4:	2201      	movs	r2, #1
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	e044      	b.n	8003e84 <UART_SetConfig+0x20c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfc:	61bb      	str	r3, [r7, #24]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e04:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e06:	4b78      	ldr	r3, [pc, #480]	@ (8003fe8 <UART_SetConfig+0x370>)
 8003e08:	0052      	lsls	r2, r2, #1
 8003e0a:	5ad3      	ldrh	r3, [r2, r3]
 8003e0c:	613b      	str	r3, [r7, #16]
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	69b8      	ldr	r0, [r7, #24]
 8003e18:	69f9      	ldr	r1, [r7, #28]
 8003e1a:	f7fc faeb 	bl	80003f4 <__aeabi_uldivmod>
 8003e1e:	0002      	movs	r2, r0
 8003e20:	000b      	movs	r3, r1
 8003e22:	0e11      	lsrs	r1, r2, #24
 8003e24:	021d      	lsls	r5, r3, #8
 8003e26:	430d      	orrs	r5, r1
 8003e28:	0214      	lsls	r4, r2, #8
 8003e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	085b      	lsrs	r3, r3, #1
 8003e30:	60bb      	str	r3, [r7, #8]
 8003e32:	2300      	movs	r3, #0
 8003e34:	60fb      	str	r3, [r7, #12]
 8003e36:	68b8      	ldr	r0, [r7, #8]
 8003e38:	68f9      	ldr	r1, [r7, #12]
 8003e3a:	1900      	adds	r0, r0, r4
 8003e3c:	4169      	adcs	r1, r5
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	607b      	str	r3, [r7, #4]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f7fc fad2 	bl	80003f4 <__aeabi_uldivmod>
 8003e50:	0002      	movs	r2, r0
 8003e52:	000b      	movs	r3, r1
 8003e54:	0013      	movs	r3, r2
 8003e56:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e58:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e5a:	23c0      	movs	r3, #192	@ 0xc0
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d309      	bcc.n	8003e76 <UART_SetConfig+0x1fe>
 8003e62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e64:	2380      	movs	r3, #128	@ 0x80
 8003e66:	035b      	lsls	r3, r3, #13
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d204      	bcs.n	8003e76 <UART_SetConfig+0x1fe>
        {
          huart->Instance->BRR = usartdiv;
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e72:	60da      	str	r2, [r3, #12]
 8003e74:	e006      	b.n	8003e84 <UART_SetConfig+0x20c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e76:	231f      	movs	r3, #31
 8003e78:	2220      	movs	r2, #32
 8003e7a:	189b      	adds	r3, r3, r2
 8003e7c:	19db      	adds	r3, r3, r7
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003e82:	e087      	b.n	8003f94 <UART_SetConfig+0x31c>
 8003e84:	e086      	b.n	8003f94 <UART_SetConfig+0x31c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e88:	69da      	ldr	r2, [r3, #28]
 8003e8a:	2380      	movs	r3, #128	@ 0x80
 8003e8c:	021b      	lsls	r3, r3, #8
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d14c      	bne.n	8003f2c <UART_SetConfig+0x2b4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003e92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e94:	0018      	movs	r0, r3
 8003e96:	f7fe fb2d 	bl	80024f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003e9a:	0003      	movs	r3, r0
 8003e9c:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d100      	bne.n	8003ea6 <UART_SetConfig+0x22e>
 8003ea4:	e076      	b.n	8003f94 <UART_SetConfig+0x31c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8003fe8 <UART_SetConfig+0x370>)
 8003eac:	0052      	lsls	r2, r2, #1
 8003eae:	5ad3      	ldrh	r3, [r2, r3]
 8003eb0:	0019      	movs	r1, r3
 8003eb2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003eb4:	f7fc f928 	bl	8000108 <__udivsi3>
 8003eb8:	0003      	movs	r3, r0
 8003eba:	005a      	lsls	r2, r3, #1
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	18d2      	adds	r2, r2, r3
 8003ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	0019      	movs	r1, r3
 8003eca:	0010      	movs	r0, r2
 8003ecc:	f7fc f91c 	bl	8000108 <__udivsi3>
 8003ed0:	0003      	movs	r3, r0
 8003ed2:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ed6:	2b0f      	cmp	r3, #15
 8003ed8:	d921      	bls.n	8003f1e <UART_SetConfig+0x2a6>
 8003eda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003edc:	2380      	movs	r3, #128	@ 0x80
 8003ede:	025b      	lsls	r3, r3, #9
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d21c      	bcs.n	8003f1e <UART_SetConfig+0x2a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ee4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	2012      	movs	r0, #18
 8003eea:	2420      	movs	r4, #32
 8003eec:	1903      	adds	r3, r0, r4
 8003eee:	19db      	adds	r3, r3, r7
 8003ef0:	210f      	movs	r1, #15
 8003ef2:	438a      	bics	r2, r1
 8003ef4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef8:	085b      	lsrs	r3, r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	2207      	movs	r2, #7
 8003efe:	4013      	ands	r3, r2
 8003f00:	b299      	uxth	r1, r3
 8003f02:	1903      	adds	r3, r0, r4
 8003f04:	19db      	adds	r3, r3, r7
 8003f06:	1902      	adds	r2, r0, r4
 8003f08:	19d2      	adds	r2, r2, r7
 8003f0a:	8812      	ldrh	r2, [r2, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	1902      	adds	r2, r0, r4
 8003f16:	19d2      	adds	r2, r2, r7
 8003f18:	8812      	ldrh	r2, [r2, #0]
 8003f1a:	60da      	str	r2, [r3, #12]
 8003f1c:	e03a      	b.n	8003f94 <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f1e:	231f      	movs	r3, #31
 8003f20:	2220      	movs	r2, #32
 8003f22:	189b      	adds	r3, r3, r2
 8003f24:	19db      	adds	r3, r3, r7
 8003f26:	2201      	movs	r2, #1
 8003f28:	701a      	strb	r2, [r3, #0]
 8003f2a:	e033      	b.n	8003f94 <UART_SetConfig+0x31c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f2e:	0018      	movs	r0, r3
 8003f30:	f7fe fae0 	bl	80024f4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f34:	0003      	movs	r3, r0
 8003f36:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8003f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d02a      	beq.n	8003f94 <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f42:	4b29      	ldr	r3, [pc, #164]	@ (8003fe8 <UART_SetConfig+0x370>)
 8003f44:	0052      	lsls	r2, r2, #1
 8003f46:	5ad3      	ldrh	r3, [r2, r3]
 8003f48:	0019      	movs	r1, r3
 8003f4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f4c:	f7fc f8dc 	bl	8000108 <__udivsi3>
 8003f50:	0003      	movs	r3, r0
 8003f52:	001a      	movs	r2, r3
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	085b      	lsrs	r3, r3, #1
 8003f5a:	18d2      	adds	r2, r2, r3
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	0019      	movs	r1, r3
 8003f62:	0010      	movs	r0, r2
 8003f64:	f7fc f8d0 	bl	8000108 <__udivsi3>
 8003f68:	0003      	movs	r3, r0
 8003f6a:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6e:	2b0f      	cmp	r3, #15
 8003f70:	d90a      	bls.n	8003f88 <UART_SetConfig+0x310>
 8003f72:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f74:	2380      	movs	r3, #128	@ 0x80
 8003f76:	025b      	lsls	r3, r3, #9
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d205      	bcs.n	8003f88 <UART_SetConfig+0x310>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60da      	str	r2, [r3, #12]
 8003f86:	e005      	b.n	8003f94 <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f88:	231f      	movs	r3, #31
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	189b      	adds	r3, r3, r2
 8003f8e:	19db      	adds	r3, r3, r7
 8003f90:	2201      	movs	r2, #1
 8003f92:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f96:	226a      	movs	r2, #106	@ 0x6a
 8003f98:	2101      	movs	r1, #1
 8003f9a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f9e:	2268      	movs	r2, #104	@ 0x68
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	2200      	movs	r2, #0
 8003fae:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003fb0:	231f      	movs	r3, #31
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	189b      	adds	r3, r3, r2
 8003fb6:	19db      	adds	r3, r3, r7
 8003fb8:	781b      	ldrb	r3, [r3, #0]
}
 8003fba:	0018      	movs	r0, r3
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	b012      	add	sp, #72	@ 0x48
 8003fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003fc2:	46c0      	nop			@ (mov r8, r8)
 8003fc4:	cfff69f3 	.word	0xcfff69f3
 8003fc8:	ffffcfff 	.word	0xffffcfff
 8003fcc:	40008000 	.word	0x40008000
 8003fd0:	40008400 	.word	0x40008400
 8003fd4:	11fff4ff 	.word	0x11fff4ff
 8003fd8:	40013800 	.word	0x40013800
 8003fdc:	40004400 	.word	0x40004400
 8003fe0:	40004800 	.word	0x40004800
 8003fe4:	40004c00 	.word	0x40004c00
 8003fe8:	08004818 	.word	0x08004818

08003fec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	d00b      	beq.n	8004016 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	4a4a      	ldr	r2, [pc, #296]	@ (8004130 <UART_AdvFeatureConfig+0x144>)
 8004006:	4013      	ands	r3, r2
 8004008:	0019      	movs	r1, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	430a      	orrs	r2, r1
 8004014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800401a:	2201      	movs	r2, #1
 800401c:	4013      	ands	r3, r2
 800401e:	d00b      	beq.n	8004038 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	4a43      	ldr	r2, [pc, #268]	@ (8004134 <UART_AdvFeatureConfig+0x148>)
 8004028:	4013      	ands	r3, r2
 800402a:	0019      	movs	r1, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	430a      	orrs	r2, r1
 8004036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403c:	2202      	movs	r2, #2
 800403e:	4013      	ands	r3, r2
 8004040:	d00b      	beq.n	800405a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	4a3b      	ldr	r2, [pc, #236]	@ (8004138 <UART_AdvFeatureConfig+0x14c>)
 800404a:	4013      	ands	r3, r2
 800404c:	0019      	movs	r1, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405e:	2204      	movs	r2, #4
 8004060:	4013      	ands	r3, r2
 8004062:	d00b      	beq.n	800407c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4a34      	ldr	r2, [pc, #208]	@ (800413c <UART_AdvFeatureConfig+0x150>)
 800406c:	4013      	ands	r3, r2
 800406e:	0019      	movs	r1, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004080:	2210      	movs	r2, #16
 8004082:	4013      	ands	r3, r2
 8004084:	d00b      	beq.n	800409e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	4a2c      	ldr	r2, [pc, #176]	@ (8004140 <UART_AdvFeatureConfig+0x154>)
 800408e:	4013      	ands	r3, r2
 8004090:	0019      	movs	r1, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a2:	2220      	movs	r2, #32
 80040a4:	4013      	ands	r3, r2
 80040a6:	d00b      	beq.n	80040c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	4a25      	ldr	r2, [pc, #148]	@ (8004144 <UART_AdvFeatureConfig+0x158>)
 80040b0:	4013      	ands	r3, r2
 80040b2:	0019      	movs	r1, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	430a      	orrs	r2, r1
 80040be:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c4:	2240      	movs	r2, #64	@ 0x40
 80040c6:	4013      	ands	r3, r2
 80040c8:	d01d      	beq.n	8004106 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004148 <UART_AdvFeatureConfig+0x15c>)
 80040d2:	4013      	ands	r3, r2
 80040d4:	0019      	movs	r1, r3
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	430a      	orrs	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040e6:	2380      	movs	r3, #128	@ 0x80
 80040e8:	035b      	lsls	r3, r3, #13
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d10b      	bne.n	8004106 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	4a15      	ldr	r2, [pc, #84]	@ (800414c <UART_AdvFeatureConfig+0x160>)
 80040f6:	4013      	ands	r3, r2
 80040f8:	0019      	movs	r1, r3
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410a:	2280      	movs	r2, #128	@ 0x80
 800410c:	4013      	ands	r3, r2
 800410e:	d00b      	beq.n	8004128 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4a0e      	ldr	r2, [pc, #56]	@ (8004150 <UART_AdvFeatureConfig+0x164>)
 8004118:	4013      	ands	r3, r2
 800411a:	0019      	movs	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  }
}
 8004128:	46c0      	nop			@ (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	b002      	add	sp, #8
 800412e:	bd80      	pop	{r7, pc}
 8004130:	ffff7fff 	.word	0xffff7fff
 8004134:	fffdffff 	.word	0xfffdffff
 8004138:	fffeffff 	.word	0xfffeffff
 800413c:	fffbffff 	.word	0xfffbffff
 8004140:	ffffefff 	.word	0xffffefff
 8004144:	ffffdfff 	.word	0xffffdfff
 8004148:	ffefffff 	.word	0xffefffff
 800414c:	ff9fffff 	.word	0xff9fffff
 8004150:	fff7ffff 	.word	0xfff7ffff

08004154 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b092      	sub	sp, #72	@ 0x48
 8004158:	af02      	add	r7, sp, #8
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2290      	movs	r2, #144	@ 0x90
 8004160:	2100      	movs	r1, #0
 8004162:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004164:	f7fc ff32 	bl	8000fcc <HAL_GetTick>
 8004168:	0003      	movs	r3, r0
 800416a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2208      	movs	r2, #8
 8004174:	4013      	ands	r3, r2
 8004176:	2b08      	cmp	r3, #8
 8004178:	d12d      	bne.n	80041d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800417a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800417c:	2280      	movs	r2, #128	@ 0x80
 800417e:	0391      	lsls	r1, r2, #14
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	4a47      	ldr	r2, [pc, #284]	@ (80042a0 <UART_CheckIdleState+0x14c>)
 8004184:	9200      	str	r2, [sp, #0]
 8004186:	2200      	movs	r2, #0
 8004188:	f000 f88e 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 800418c:	1e03      	subs	r3, r0, #0
 800418e:	d022      	beq.n	80041d6 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004190:	f3ef 8310 	mrs	r3, PRIMASK
 8004194:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004198:	63bb      	str	r3, [r7, #56]	@ 0x38
 800419a:	2301      	movs	r3, #1
 800419c:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a0:	f383 8810 	msr	PRIMASK, r3
}
 80041a4:	46c0      	nop			@ (mov r8, r8)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2180      	movs	r1, #128	@ 0x80
 80041b2:	438a      	bics	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041bc:	f383 8810 	msr	PRIMASK, r3
}
 80041c0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2288      	movs	r2, #136	@ 0x88
 80041c6:	2120      	movs	r1, #32
 80041c8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2284      	movs	r2, #132	@ 0x84
 80041ce:	2100      	movs	r1, #0
 80041d0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e060      	b.n	8004298 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2204      	movs	r2, #4
 80041de:	4013      	ands	r3, r2
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d146      	bne.n	8004272 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041e6:	2280      	movs	r2, #128	@ 0x80
 80041e8:	03d1      	lsls	r1, r2, #15
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	4a2c      	ldr	r2, [pc, #176]	@ (80042a0 <UART_CheckIdleState+0x14c>)
 80041ee:	9200      	str	r2, [sp, #0]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f000 f859 	bl	80042a8 <UART_WaitOnFlagUntilTimeout>
 80041f6:	1e03      	subs	r3, r0, #0
 80041f8:	d03b      	beq.n	8004272 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041fa:	f3ef 8310 	mrs	r3, PRIMASK
 80041fe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004200:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004202:	637b      	str	r3, [r7, #52]	@ 0x34
 8004204:	2301      	movs	r3, #1
 8004206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f383 8810 	msr	PRIMASK, r3
}
 800420e:	46c0      	nop			@ (mov r8, r8)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4922      	ldr	r1, [pc, #136]	@ (80042a4 <UART_CheckIdleState+0x150>)
 800421c:	400a      	ands	r2, r1
 800421e:	601a      	str	r2, [r3, #0]
 8004220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004222:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f383 8810 	msr	PRIMASK, r3
}
 800422a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800422c:	f3ef 8310 	mrs	r3, PRIMASK
 8004230:	61bb      	str	r3, [r7, #24]
  return(result);
 8004232:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004234:	633b      	str	r3, [r7, #48]	@ 0x30
 8004236:	2301      	movs	r3, #1
 8004238:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	f383 8810 	msr	PRIMASK, r3
}
 8004240:	46c0      	nop			@ (mov r8, r8)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2101      	movs	r1, #1
 800424e:	438a      	bics	r2, r1
 8004250:	609a      	str	r2, [r3, #8]
 8004252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004254:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	f383 8810 	msr	PRIMASK, r3
}
 800425c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	228c      	movs	r2, #140	@ 0x8c
 8004262:	2120      	movs	r1, #32
 8004264:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2284      	movs	r2, #132	@ 0x84
 800426a:	2100      	movs	r1, #0
 800426c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e012      	b.n	8004298 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2288      	movs	r2, #136	@ 0x88
 8004276:	2120      	movs	r1, #32
 8004278:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	228c      	movs	r2, #140	@ 0x8c
 800427e:	2120      	movs	r1, #32
 8004280:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2284      	movs	r2, #132	@ 0x84
 8004292:	2100      	movs	r1, #0
 8004294:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	0018      	movs	r0, r3
 800429a:	46bd      	mov	sp, r7
 800429c:	b010      	add	sp, #64	@ 0x40
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	01ffffff 	.word	0x01ffffff
 80042a4:	fffffedf 	.word	0xfffffedf

080042a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	603b      	str	r3, [r7, #0]
 80042b4:	1dfb      	adds	r3, r7, #7
 80042b6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b8:	e051      	b.n	800435e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	3301      	adds	r3, #1
 80042be:	d04e      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c0:	f7fc fe84 	bl	8000fcc <HAL_GetTick>
 80042c4:	0002      	movs	r2, r0
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d302      	bcc.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e051      	b.n	800437e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2204      	movs	r2, #4
 80042e2:	4013      	ands	r3, r2
 80042e4:	d03b      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0xb6>
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	2b80      	cmp	r3, #128	@ 0x80
 80042ea:	d038      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0xb6>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b40      	cmp	r3, #64	@ 0x40
 80042f0:	d035      	beq.n	800435e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	2208      	movs	r2, #8
 80042fa:	4013      	ands	r3, r2
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d111      	bne.n	8004324 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2208      	movs	r2, #8
 8004306:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	0018      	movs	r0, r3
 800430c:	f000 f83c 	bl	8004388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2290      	movs	r2, #144	@ 0x90
 8004314:	2108      	movs	r1, #8
 8004316:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2284      	movs	r2, #132	@ 0x84
 800431c:	2100      	movs	r1, #0
 800431e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e02c      	b.n	800437e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	2380      	movs	r3, #128	@ 0x80
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	401a      	ands	r2, r3
 8004330:	2380      	movs	r3, #128	@ 0x80
 8004332:	011b      	lsls	r3, r3, #4
 8004334:	429a      	cmp	r2, r3
 8004336:	d112      	bne.n	800435e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2280      	movs	r2, #128	@ 0x80
 800433e:	0112      	lsls	r2, r2, #4
 8004340:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	0018      	movs	r0, r3
 8004346:	f000 f81f 	bl	8004388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2290      	movs	r2, #144	@ 0x90
 800434e:	2120      	movs	r1, #32
 8004350:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2284      	movs	r2, #132	@ 0x84
 8004356:	2100      	movs	r1, #0
 8004358:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e00f      	b.n	800437e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	68ba      	ldr	r2, [r7, #8]
 8004366:	4013      	ands	r3, r2
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	425a      	negs	r2, r3
 800436e:	4153      	adcs	r3, r2
 8004370:	b2db      	uxtb	r3, r3
 8004372:	001a      	movs	r2, r3
 8004374:	1dfb      	adds	r3, r7, #7
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d09e      	beq.n	80042ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	0018      	movs	r0, r3
 8004380:	46bd      	mov	sp, r7
 8004382:	b004      	add	sp, #16
 8004384:	bd80      	pop	{r7, pc}
	...

08004388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08e      	sub	sp, #56	@ 0x38
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004390:	f3ef 8310 	mrs	r3, PRIMASK
 8004394:	617b      	str	r3, [r7, #20]
  return(result);
 8004396:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004398:	637b      	str	r3, [r7, #52]	@ 0x34
 800439a:	2301      	movs	r3, #1
 800439c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			@ (mov r8, r8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4926      	ldr	r1, [pc, #152]	@ (800444c <UART_EndRxTransfer+0xc4>)
 80043b2:	400a      	ands	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	f383 8810 	msr	PRIMASK, r3
}
 80043c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043c2:	f3ef 8310 	mrs	r3, PRIMASK
 80043c6:	623b      	str	r3, [r7, #32]
  return(result);
 80043c8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80043cc:	2301      	movs	r3, #1
 80043ce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d2:	f383 8810 	msr	PRIMASK, r3
}
 80043d6:	46c0      	nop			@ (mov r8, r8)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	491b      	ldr	r1, [pc, #108]	@ (8004450 <UART_EndRxTransfer+0xc8>)
 80043e4:	400a      	ands	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ee:	f383 8810 	msr	PRIMASK, r3
}
 80043f2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d118      	bne.n	800442e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043fc:	f3ef 8310 	mrs	r3, PRIMASK
 8004400:	60bb      	str	r3, [r7, #8]
  return(result);
 8004402:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004404:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004406:	2301      	movs	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f383 8810 	msr	PRIMASK, r3
}
 8004410:	46c0      	nop			@ (mov r8, r8)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2110      	movs	r1, #16
 800441e:	438a      	bics	r2, r1
 8004420:	601a      	str	r2, [r3, #0]
 8004422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f383 8810 	msr	PRIMASK, r3
}
 800442c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	228c      	movs	r2, #140	@ 0x8c
 8004432:	2120      	movs	r1, #32
 8004434:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	46bd      	mov	sp, r7
 8004446:	b00e      	add	sp, #56	@ 0x38
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			@ (mov r8, r8)
 800444c:	fffffedf 	.word	0xfffffedf
 8004450:	effffffe 	.word	0xeffffffe

08004454 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2284      	movs	r2, #132	@ 0x84
 8004460:	5c9b      	ldrb	r3, [r3, r2]
 8004462:	2b01      	cmp	r3, #1
 8004464:	d101      	bne.n	800446a <HAL_UARTEx_DisableFifoMode+0x16>
 8004466:	2302      	movs	r3, #2
 8004468:	e027      	b.n	80044ba <HAL_UARTEx_DisableFifoMode+0x66>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2284      	movs	r2, #132	@ 0x84
 800446e:	2101      	movs	r1, #1
 8004470:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2288      	movs	r2, #136	@ 0x88
 8004476:	2124      	movs	r1, #36	@ 0x24
 8004478:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2101      	movs	r1, #1
 800448e:	438a      	bics	r2, r1
 8004490:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4a0b      	ldr	r2, [pc, #44]	@ (80044c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004496:	4013      	ands	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2288      	movs	r2, #136	@ 0x88
 80044ac:	2120      	movs	r1, #32
 80044ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2284      	movs	r2, #132	@ 0x84
 80044b4:	2100      	movs	r1, #0
 80044b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b004      	add	sp, #16
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	46c0      	nop			@ (mov r8, r8)
 80044c4:	dfffffff 	.word	0xdfffffff

080044c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
 80044d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2284      	movs	r2, #132	@ 0x84
 80044d6:	5c9b      	ldrb	r3, [r3, r2]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d101      	bne.n	80044e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044dc:	2302      	movs	r3, #2
 80044de:	e02e      	b.n	800453e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2284      	movs	r2, #132	@ 0x84
 80044e4:	2101      	movs	r1, #1
 80044e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2288      	movs	r2, #136	@ 0x88
 80044ec:	2124      	movs	r1, #36	@ 0x24
 80044ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2101      	movs	r1, #1
 8004504:	438a      	bics	r2, r1
 8004506:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	08d9      	lsrs	r1, r3, #3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	430a      	orrs	r2, r1
 800451a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	0018      	movs	r0, r3
 8004520:	f000 f854 	bl	80045cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2288      	movs	r2, #136	@ 0x88
 8004530:	2120      	movs	r1, #32
 8004532:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2284      	movs	r2, #132	@ 0x84
 8004538:	2100      	movs	r1, #0
 800453a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	0018      	movs	r0, r3
 8004540:	46bd      	mov	sp, r7
 8004542:	b004      	add	sp, #16
 8004544:	bd80      	pop	{r7, pc}
	...

08004548 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2284      	movs	r2, #132	@ 0x84
 8004556:	5c9b      	ldrb	r3, [r3, r2]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d101      	bne.n	8004560 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800455c:	2302      	movs	r3, #2
 800455e:	e02f      	b.n	80045c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2284      	movs	r2, #132	@ 0x84
 8004564:	2101      	movs	r1, #1
 8004566:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2288      	movs	r2, #136	@ 0x88
 800456c:	2124      	movs	r1, #36	@ 0x24
 800456e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2101      	movs	r1, #1
 8004584:	438a      	bics	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	4a0e      	ldr	r2, [pc, #56]	@ (80045c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004590:	4013      	ands	r3, r2
 8004592:	0019      	movs	r1, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	430a      	orrs	r2, r1
 800459c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f000 f813 	bl	80045cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2288      	movs	r2, #136	@ 0x88
 80045b2:	2120      	movs	r1, #32
 80045b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2284      	movs	r2, #132	@ 0x84
 80045ba:	2100      	movs	r1, #0
 80045bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	0018      	movs	r0, r3
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b004      	add	sp, #16
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	f1ffffff 	.word	0xf1ffffff

080045cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80045cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d108      	bne.n	80045ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	226a      	movs	r2, #106	@ 0x6a
 80045e0:	2101      	movs	r1, #1
 80045e2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2268      	movs	r2, #104	@ 0x68
 80045e8:	2101      	movs	r1, #1
 80045ea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045ec:	e043      	b.n	8004676 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045ee:	260f      	movs	r6, #15
 80045f0:	19bb      	adds	r3, r7, r6
 80045f2:	2208      	movs	r2, #8
 80045f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045f6:	200e      	movs	r0, #14
 80045f8:	183b      	adds	r3, r7, r0
 80045fa:	2208      	movs	r2, #8
 80045fc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	0e5b      	lsrs	r3, r3, #25
 8004606:	b2da      	uxtb	r2, r3
 8004608:	240d      	movs	r4, #13
 800460a:	193b      	adds	r3, r7, r4
 800460c:	2107      	movs	r1, #7
 800460e:	400a      	ands	r2, r1
 8004610:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	0f5b      	lsrs	r3, r3, #29
 800461a:	b2da      	uxtb	r2, r3
 800461c:	250c      	movs	r5, #12
 800461e:	197b      	adds	r3, r7, r5
 8004620:	2107      	movs	r1, #7
 8004622:	400a      	ands	r2, r1
 8004624:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004626:	183b      	adds	r3, r7, r0
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	197a      	adds	r2, r7, r5
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	4914      	ldr	r1, [pc, #80]	@ (8004680 <UARTEx_SetNbDataToProcess+0xb4>)
 8004630:	5c8a      	ldrb	r2, [r1, r2]
 8004632:	435a      	muls	r2, r3
 8004634:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004636:	197b      	adds	r3, r7, r5
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	4a12      	ldr	r2, [pc, #72]	@ (8004684 <UARTEx_SetNbDataToProcess+0xb8>)
 800463c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800463e:	0019      	movs	r1, r3
 8004640:	f7fb fdec 	bl	800021c <__divsi3>
 8004644:	0003      	movs	r3, r0
 8004646:	b299      	uxth	r1, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	226a      	movs	r2, #106	@ 0x6a
 800464c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800464e:	19bb      	adds	r3, r7, r6
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	193a      	adds	r2, r7, r4
 8004654:	7812      	ldrb	r2, [r2, #0]
 8004656:	490a      	ldr	r1, [pc, #40]	@ (8004680 <UARTEx_SetNbDataToProcess+0xb4>)
 8004658:	5c8a      	ldrb	r2, [r1, r2]
 800465a:	435a      	muls	r2, r3
 800465c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800465e:	193b      	adds	r3, r7, r4
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	4a08      	ldr	r2, [pc, #32]	@ (8004684 <UARTEx_SetNbDataToProcess+0xb8>)
 8004664:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004666:	0019      	movs	r1, r3
 8004668:	f7fb fdd8 	bl	800021c <__divsi3>
 800466c:	0003      	movs	r3, r0
 800466e:	b299      	uxth	r1, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2268      	movs	r2, #104	@ 0x68
 8004674:	5299      	strh	r1, [r3, r2]
}
 8004676:	46c0      	nop			@ (mov r8, r8)
 8004678:	46bd      	mov	sp, r7
 800467a:	b005      	add	sp, #20
 800467c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	08004830 	.word	0x08004830
 8004684:	08004838 	.word	0x08004838

08004688 <memset>:
 8004688:	0003      	movs	r3, r0
 800468a:	1882      	adds	r2, r0, r2
 800468c:	4293      	cmp	r3, r2
 800468e:	d100      	bne.n	8004692 <memset+0xa>
 8004690:	4770      	bx	lr
 8004692:	7019      	strb	r1, [r3, #0]
 8004694:	3301      	adds	r3, #1
 8004696:	e7f9      	b.n	800468c <memset+0x4>

08004698 <__libc_init_array>:
 8004698:	b570      	push	{r4, r5, r6, lr}
 800469a:	2600      	movs	r6, #0
 800469c:	4c0c      	ldr	r4, [pc, #48]	@ (80046d0 <__libc_init_array+0x38>)
 800469e:	4d0d      	ldr	r5, [pc, #52]	@ (80046d4 <__libc_init_array+0x3c>)
 80046a0:	1b64      	subs	r4, r4, r5
 80046a2:	10a4      	asrs	r4, r4, #2
 80046a4:	42a6      	cmp	r6, r4
 80046a6:	d109      	bne.n	80046bc <__libc_init_array+0x24>
 80046a8:	2600      	movs	r6, #0
 80046aa:	f000 f819 	bl	80046e0 <_init>
 80046ae:	4c0a      	ldr	r4, [pc, #40]	@ (80046d8 <__libc_init_array+0x40>)
 80046b0:	4d0a      	ldr	r5, [pc, #40]	@ (80046dc <__libc_init_array+0x44>)
 80046b2:	1b64      	subs	r4, r4, r5
 80046b4:	10a4      	asrs	r4, r4, #2
 80046b6:	42a6      	cmp	r6, r4
 80046b8:	d105      	bne.n	80046c6 <__libc_init_array+0x2e>
 80046ba:	bd70      	pop	{r4, r5, r6, pc}
 80046bc:	00b3      	lsls	r3, r6, #2
 80046be:	58eb      	ldr	r3, [r5, r3]
 80046c0:	4798      	blx	r3
 80046c2:	3601      	adds	r6, #1
 80046c4:	e7ee      	b.n	80046a4 <__libc_init_array+0xc>
 80046c6:	00b3      	lsls	r3, r6, #2
 80046c8:	58eb      	ldr	r3, [r5, r3]
 80046ca:	4798      	blx	r3
 80046cc:	3601      	adds	r6, #1
 80046ce:	e7f2      	b.n	80046b6 <__libc_init_array+0x1e>
 80046d0:	08004848 	.word	0x08004848
 80046d4:	08004848 	.word	0x08004848
 80046d8:	0800484c 	.word	0x0800484c
 80046dc:	08004848 	.word	0x08004848

080046e0 <_init>:
 80046e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046e2:	46c0      	nop			@ (mov r8, r8)
 80046e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046e6:	bc08      	pop	{r3}
 80046e8:	469e      	mov	lr, r3
 80046ea:	4770      	bx	lr

080046ec <_fini>:
 80046ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ee:	46c0      	nop			@ (mov r8, r8)
 80046f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046f2:	bc08      	pop	{r3}
 80046f4:	469e      	mov	lr, r3
 80046f6:	4770      	bx	lr
