
rfid_semb.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004600  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  080046c0  080046c0  000056c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004808  08004808  0000600c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004808  08004808  00005808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004810  08004810  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004810  08004810  00005810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004814  08004814  00005814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08004818  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f8  2000000c  08004824  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000204  08004824  00006204  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00013dcb  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 0000006f  00000000  00000000  00019dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00012f57  00000000  00000000  00019e6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000025b5  00000000  00000000  0002cdc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001130  00000000  00000000  0002f380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000acf54  00000000  00000000  000304b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000d94  00000000  00000000  000dd404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001a33d  00000000  00000000  000de198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f84d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f0c  00000000  00000000  000f8518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080046a8 	.word	0x080046a8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080046a8 	.word	0x080046a8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	@ (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	@ (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			@ (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			@ (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	@ (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000620:	480d      	ldr	r0, [pc, #52]	@ (8000658 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000622:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000624:	f000 fc18 	bl	8000e58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000628:	480c      	ldr	r0, [pc, #48]	@ (800065c <LoopForever+0x6>)
  ldr r1, =_edata
 800062a:	490d      	ldr	r1, [pc, #52]	@ (8000660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800062c:	4a0d      	ldr	r2, [pc, #52]	@ (8000664 <LoopForever+0xe>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0a      	ldr	r2, [pc, #40]	@ (8000668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000640:	4c0a      	ldr	r4, [pc, #40]	@ (800066c <LoopForever+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800064e:	f004 f807 	bl	8004660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000652:	f000 f80e 	bl	8000672 <main>

08000656 <LoopForever>:

LoopForever:
  b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   r0, =_estack
 8000658:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000664:	08004818 	.word	0x08004818
  ldr r2, =_sbss
 8000668:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800066c:	20000204 	.word	0x20000204

08000670 <ADC_COMP1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC_COMP1_IRQHandler>

08000672 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000676:	f000 fc1b 	bl	8000eb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800067a:	f000 f80e 	bl	800069a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067e:	f000 f9ad 	bl	80009dc <MX_GPIO_Init>
  MX_LPUART2_UART_Init();
 8000682:	f000 f853 	bl	800072c <MX_LPUART2_UART_Init>
  MX_RTC_Init();
 8000686:	f000 f89d 	bl	80007c4 <MX_RTC_Init>
  MX_SPI1_Init();
 800068a:	f000 f8cb 	bl	8000824 <MX_SPI1_Init>
  MX_SPI2_Init();
 800068e:	f000 f907 	bl	80008a0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000692:	f000 f943 	bl	800091c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	e7fd      	b.n	8000696 <main+0x24>

0800069a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069a:	b590      	push	{r4, r7, lr}
 800069c:	b097      	sub	sp, #92	@ 0x5c
 800069e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a0:	2410      	movs	r4, #16
 80006a2:	193b      	adds	r3, r7, r4
 80006a4:	0018      	movs	r0, r3
 80006a6:	2348      	movs	r3, #72	@ 0x48
 80006a8:	001a      	movs	r2, r3
 80006aa:	2100      	movs	r1, #0
 80006ac:	f003 ffd0 	bl	8004650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	003b      	movs	r3, r7
 80006b2:	0018      	movs	r0, r3
 80006b4:	2310      	movs	r3, #16
 80006b6:	001a      	movs	r2, r3
 80006b8:	2100      	movs	r1, #0
 80006ba:	f003 ffc9 	bl	8004650 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006be:	2380      	movs	r3, #128	@ 0x80
 80006c0:	00db      	lsls	r3, r3, #3
 80006c2:	0018      	movs	r0, r3
 80006c4:	f000 feae 	bl	8001424 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006c8:	193b      	adds	r3, r7, r4
 80006ca:	220a      	movs	r2, #10
 80006cc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ce:	193b      	adds	r3, r7, r4
 80006d0:	2280      	movs	r2, #128	@ 0x80
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2240      	movs	r2, #64	@ 0x40
 80006da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2201      	movs	r2, #1
 80006e0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	0018      	movs	r0, r3
 80006ec:	f000 ff06 	bl	80014fc <HAL_RCC_OscConfig>
 80006f0:	1e03      	subs	r3, r0, #0
 80006f2:	d001      	beq.n	80006f8 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80006f4:	f000 f9ee 	bl	8000ad4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f8:	003b      	movs	r3, r7
 80006fa:	2207      	movs	r2, #7
 80006fc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006fe:	003b      	movs	r3, r7
 8000700:	2201      	movs	r2, #1
 8000702:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	003b      	movs	r3, r7
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800070a:	003b      	movs	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000710:	003b      	movs	r3, r7
 8000712:	2101      	movs	r1, #1
 8000714:	0018      	movs	r0, r3
 8000716:	f001 fad7 	bl	8001cc8 <HAL_RCC_ClockConfig>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800071e:	f000 f9d9 	bl	8000ad4 <Error_Handler>
  }
}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	b017      	add	sp, #92	@ 0x5c
 8000728:	bd90      	pop	{r4, r7, pc}
	...

0800072c <MX_LPUART2_UART_Init>:
  * @brief LPUART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART2_Init 0 */

  /* USER CODE BEGIN LPUART2_Init 1 */

  /* USER CODE END LPUART2_Init 1 */
  hlpuart2.Instance = LPUART2;
 8000730:	4b21      	ldr	r3, [pc, #132]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000732:	4a22      	ldr	r2, [pc, #136]	@ (80007bc <MX_LPUART2_UART_Init+0x90>)
 8000734:	601a      	str	r2, [r3, #0]
  hlpuart2.Init.BaudRate = 209700;
 8000736:	4b20      	ldr	r3, [pc, #128]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000738:	4a21      	ldr	r2, [pc, #132]	@ (80007c0 <MX_LPUART2_UART_Init+0x94>)
 800073a:	605a      	str	r2, [r3, #4]
  hlpuart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073c:	4b1e      	ldr	r3, [pc, #120]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  hlpuart2.Init.StopBits = UART_STOPBITS_1;
 8000742:	4b1d      	ldr	r3, [pc, #116]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000744:	2200      	movs	r2, #0
 8000746:	60da      	str	r2, [r3, #12]
  hlpuart2.Init.Parity = UART_PARITY_NONE;
 8000748:	4b1b      	ldr	r3, [pc, #108]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 800074a:	2200      	movs	r2, #0
 800074c:	611a      	str	r2, [r3, #16]
  hlpuart2.Init.Mode = UART_MODE_TX_RX;
 800074e:	4b1a      	ldr	r3, [pc, #104]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000750:	220c      	movs	r2, #12
 8000752:	615a      	str	r2, [r3, #20]
  hlpuart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000754:	4b18      	ldr	r3, [pc, #96]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000756:	2200      	movs	r2, #0
 8000758:	619a      	str	r2, [r3, #24]
  hlpuart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800075a:	4b17      	ldr	r3, [pc, #92]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
  hlpuart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000760:	4b15      	ldr	r3, [pc, #84]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart2.FifoMode = UART_FIFOMODE_DISABLE;
 8000766:	4b14      	ldr	r3, [pc, #80]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000768:	2200      	movs	r2, #0
 800076a:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart2) != HAL_OK)
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 800076e:	0018      	movs	r0, r3
 8000770:	f003 fa10 	bl	8003b94 <HAL_UART_Init>
 8000774:	1e03      	subs	r3, r0, #0
 8000776:	d001      	beq.n	800077c <MX_LPUART2_UART_Init+0x50>
  {
    Error_Handler();
 8000778:	f000 f9ac 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 800077e:	2100      	movs	r1, #0
 8000780:	0018      	movs	r0, r3
 8000782:	f003 fe85 	bl	8004490 <HAL_UARTEx_SetTxFifoThreshold>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <MX_LPUART2_UART_Init+0x62>
  {
    Error_Handler();
 800078a:	f000 f9a3 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800078e:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 8000790:	2100      	movs	r1, #0
 8000792:	0018      	movs	r0, r3
 8000794:	f003 febc 	bl	8004510 <HAL_UARTEx_SetRxFifoThreshold>
 8000798:	1e03      	subs	r3, r0, #0
 800079a:	d001      	beq.n	80007a0 <MX_LPUART2_UART_Init+0x74>
  {
    Error_Handler();
 800079c:	f000 f99a 	bl	8000ad4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart2) != HAL_OK)
 80007a0:	4b05      	ldr	r3, [pc, #20]	@ (80007b8 <MX_LPUART2_UART_Init+0x8c>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f003 fe3a 	bl	800441c <HAL_UARTEx_DisableFifoMode>
 80007a8:	1e03      	subs	r3, r0, #0
 80007aa:	d001      	beq.n	80007b0 <MX_LPUART2_UART_Init+0x84>
  {
    Error_Handler();
 80007ac:	f000 f992 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART2_Init 2 */

  /* USER CODE END LPUART2_Init 2 */

}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	20000028 	.word	0x20000028
 80007bc:	40008400 	.word	0x40008400
 80007c0:	00033324 	.word	0x00033324

080007c4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007c8:	4b14      	ldr	r3, [pc, #80]	@ (800081c <MX_RTC_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <MX_RTC_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_RTC_Init+0x58>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_RTC_Init+0x58>)
 80007d6:	227f      	movs	r2, #127	@ 0x7f
 80007d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_RTC_Init+0x58>)
 80007dc:	22ff      	movs	r2, #255	@ 0xff
 80007de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_RTC_Init+0x58>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <MX_RTC_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007ec:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_RTC_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007f2:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <MX_RTC_Init+0x58>)
 80007f4:	2280      	movs	r2, #128	@ 0x80
 80007f6:	05d2      	lsls	r2, r2, #23
 80007f8:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_RTC_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_RTC_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000806:	4b05      	ldr	r3, [pc, #20]	@ (800081c <MX_RTC_Init+0x58>)
 8000808:	0018      	movs	r0, r3
 800080a:	f002 fb3d 	bl	8002e88 <HAL_RTC_Init>
 800080e:	1e03      	subs	r3, r0, #0
 8000810:	d001      	beq.n	8000816 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f95f 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	200000bc 	.word	0x200000bc
 8000820:	40002800 	.word	0x40002800

08000824 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	@ (8000898 <MX_SPI1_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <MX_SPI1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800082e:	4b1a      	ldr	r3, [pc, #104]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000830:	2282      	movs	r2, #130	@ 0x82
 8000832:	0052      	lsls	r2, r2, #1
 8000834:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000836:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 800083c:	4b16      	ldr	r3, [pc, #88]	@ (8000898 <MX_SPI1_Init+0x74>)
 800083e:	22c0      	movs	r2, #192	@ 0xc0
 8000840:	0092      	lsls	r2, r2, #2
 8000842:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000844:	4b14      	ldr	r3, [pc, #80]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800084a:	4b13      	ldr	r3, [pc, #76]	@ (8000898 <MX_SPI1_Init+0x74>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000850:	4b11      	ldr	r3, [pc, #68]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000852:	2280      	movs	r2, #128	@ 0x80
 8000854:	02d2      	lsls	r2, r2, #11
 8000856:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000858:	4b0f      	ldr	r3, [pc, #60]	@ (8000898 <MX_SPI1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800085e:	4b0e      	ldr	r3, [pc, #56]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000864:	4b0c      	ldr	r3, [pc, #48]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <MX_SPI1_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000870:	4b09      	ldr	r3, [pc, #36]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000872:	2207      	movs	r2, #7
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000876:	4b08      	ldr	r3, [pc, #32]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <MX_SPI1_Init+0x74>)
 800087e:	2208      	movs	r2, #8
 8000880:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000882:	4b05      	ldr	r3, [pc, #20]	@ (8000898 <MX_SPI1_Init+0x74>)
 8000884:	0018      	movs	r0, r3
 8000886:	f002 fbf7 	bl	8003078 <HAL_SPI_Init>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f921 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200000ec 	.word	0x200000ec
 800089c:	40013000 	.word	0x40013000

080008a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000918 <MX_SPI2_Init+0x78>)
 80008a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008ac:	2282      	movs	r2, #130	@ 0x82
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008b2:	4b18      	ldr	r3, [pc, #96]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80008b8:	4b16      	ldr	r3, [pc, #88]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008ba:	22c0      	movs	r2, #192	@ 0xc0
 80008bc:	0092      	lsls	r2, r2, #2
 80008be:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008c0:	4b14      	ldr	r3, [pc, #80]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008c6:	4b13      	ldr	r3, [pc, #76]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008cc:	4b11      	ldr	r3, [pc, #68]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008ce:	2280      	movs	r2, #128	@ 0x80
 80008d0:	0092      	lsls	r2, r2, #2
 80008d2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008dc:	2200      	movs	r2, #0
 80008de:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008ee:	2207      	movs	r2, #7
 80008f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008f2:	4b08      	ldr	r3, [pc, #32]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008f8:	4b06      	ldr	r3, [pc, #24]	@ (8000914 <MX_SPI2_Init+0x74>)
 80008fa:	2208      	movs	r2, #8
 80008fc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80008fe:	4b05      	ldr	r3, [pc, #20]	@ (8000914 <MX_SPI2_Init+0x74>)
 8000900:	0018      	movs	r0, r3
 8000902:	f002 fbb9 	bl	8003078 <HAL_SPI_Init>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800090a:	f000 f8e3 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800090e:	46c0      	nop			@ (mov r8, r8)
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	20000150 	.word	0x20000150
 8000918:	40003800 	.word	0x40003800

0800091c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	@ 0x28
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	231c      	movs	r3, #28
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	0018      	movs	r0, r3
 8000928:	230c      	movs	r3, #12
 800092a:	001a      	movs	r2, r3
 800092c:	2100      	movs	r1, #0
 800092e:	f003 fe8f 	bl	8004650 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000932:	003b      	movs	r3, r7
 8000934:	0018      	movs	r0, r3
 8000936:	231c      	movs	r3, #28
 8000938:	001a      	movs	r2, r3
 800093a:	2100      	movs	r1, #0
 800093c:	f003 fe88 	bl	8004650 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000940:	4b25      	ldr	r3, [pc, #148]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 8000942:	2280      	movs	r2, #128	@ 0x80
 8000944:	05d2      	lsls	r2, r2, #23
 8000946:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000948:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 800094a:	2200      	movs	r2, #0
 800094c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800094e:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000954:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 8000956:	2201      	movs	r2, #1
 8000958:	4252      	negs	r2, r2
 800095a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800095c:	4b1e      	ldr	r3, [pc, #120]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000962:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000968:	4b1b      	ldr	r3, [pc, #108]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 800096a:	0018      	movs	r0, r3
 800096c:	f002 fc32 	bl	80031d4 <HAL_TIM_PWM_Init>
 8000970:	1e03      	subs	r3, r0, #0
 8000972:	d001      	beq.n	8000978 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000974:	f000 f8ae 	bl	8000ad4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000978:	211c      	movs	r1, #28
 800097a:	187b      	adds	r3, r7, r1
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000980:	187b      	adds	r3, r7, r1
 8000982:	2200      	movs	r2, #0
 8000984:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000986:	187a      	adds	r2, r7, r1
 8000988:	4b13      	ldr	r3, [pc, #76]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 800098a:	0011      	movs	r1, r2
 800098c:	0018      	movs	r0, r3
 800098e:	f003 f893 	bl	8003ab8 <HAL_TIMEx_MasterConfigSynchronization>
 8000992:	1e03      	subs	r3, r0, #0
 8000994:	d001      	beq.n	800099a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000996:	f000 f89d 	bl	8000ad4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800099a:	003b      	movs	r3, r7
 800099c:	2260      	movs	r2, #96	@ 0x60
 800099e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80009a0:	003b      	movs	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009a6:	003b      	movs	r3, r7
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ac:	003b      	movs	r3, r7
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009b2:	0039      	movs	r1, r7
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	0018      	movs	r0, r3
 80009ba:	f002 fc63 	bl	8003284 <HAL_TIM_PWM_ConfigChannel>
 80009be:	1e03      	subs	r3, r0, #0
 80009c0:	d001      	beq.n	80009c6 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80009c2:	f000 f887 	bl	8000ad4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009c6:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <MX_TIM2_Init+0xbc>)
 80009c8:	0018      	movs	r0, r3
 80009ca:	f000 f9ef 	bl	8000dac <HAL_TIM_MspPostInit>

}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b00a      	add	sp, #40	@ 0x28
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	200001b4 	.word	0x200001b4

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b590      	push	{r4, r7, lr}
 80009de:	b089      	sub	sp, #36	@ 0x24
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	240c      	movs	r4, #12
 80009e4:	193b      	adds	r3, r7, r4
 80009e6:	0018      	movs	r0, r3
 80009e8:	2314      	movs	r3, #20
 80009ea:	001a      	movs	r2, r3
 80009ec:	2100      	movs	r1, #0
 80009ee:	f003 fe2f 	bl	8004650 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b36      	ldr	r3, [pc, #216]	@ (8000acc <MX_GPIO_Init+0xf0>)
 80009f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80009f6:	4b35      	ldr	r3, [pc, #212]	@ (8000acc <MX_GPIO_Init+0xf0>)
 80009f8:	2104      	movs	r1, #4
 80009fa:	430a      	orrs	r2, r1
 80009fc:	64da      	str	r2, [r3, #76]	@ 0x4c
 80009fe:	4b33      	ldr	r3, [pc, #204]	@ (8000acc <MX_GPIO_Init+0xf0>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a02:	2204      	movs	r2, #4
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b30      	ldr	r3, [pc, #192]	@ (8000acc <MX_GPIO_Init+0xf0>)
 8000a0c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000acc <MX_GPIO_Init+0xf0>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	430a      	orrs	r2, r1
 8000a14:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <MX_GPIO_Init+0xf0>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b2a      	ldr	r3, [pc, #168]	@ (8000acc <MX_GPIO_Init+0xf0>)
 8000a24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000a26:	4b29      	ldr	r3, [pc, #164]	@ (8000acc <MX_GPIO_Init+0xf0>)
 8000a28:	2102      	movs	r1, #2
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000a2e:	4b27      	ldr	r3, [pc, #156]	@ (8000acc <MX_GPIO_Init+0xf0>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a32:	2202      	movs	r2, #2
 8000a34:	4013      	ands	r3, r2
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRSTPD_RFID_Pin|nRESET_FLASH_Pin|nWP_FLASH_Pin|nCS_FLASH_Pin, GPIO_PIN_RESET);
 8000a3a:	23e1      	movs	r3, #225	@ 0xe1
 8000a3c:	00d9      	lsls	r1, r3, #3
 8000a3e:	23a0      	movs	r3, #160	@ 0xa0
 8000a40:	05db      	lsls	r3, r3, #23
 8000a42:	2200      	movs	r2, #0
 8000a44:	0018      	movs	r0, r3
 8000a46:	f000 fccf 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_01_Pin|LED_02_Pin, GPIO_PIN_RESET);
 8000a4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ad0 <MX_GPIO_Init+0xf4>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2118      	movs	r1, #24
 8000a50:	0018      	movs	r0, r3
 8000a52:	f000 fcc9 	bl	80013e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NRSTPD_RFID_Pin nRESET_FLASH_Pin nWP_FLASH_Pin nCS_FLASH_Pin */
  GPIO_InitStruct.Pin = NRSTPD_RFID_Pin|nRESET_FLASH_Pin|nWP_FLASH_Pin|nCS_FLASH_Pin;
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	22e1      	movs	r2, #225	@ 0xe1
 8000a5a:	00d2      	lsls	r2, r2, #3
 8000a5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	193b      	adds	r3, r7, r4
 8000a60:	2201      	movs	r2, #1
 8000a62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a70:	193a      	adds	r2, r7, r4
 8000a72:	23a0      	movs	r3, #160	@ 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	0011      	movs	r1, r2
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f000 fb49 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_01_Pin LED_02_Pin */
  GPIO_InitStruct.Pin = LED_01_Pin|LED_02_Pin;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2218      	movs	r2, #24
 8000a82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	2201      	movs	r2, #1
 8000a88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2200      	movs	r2, #0
 8000a94:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad0 <MX_GPIO_Init+0xf4>)
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	0010      	movs	r0, r2
 8000a9e:	f000 fb37 	bl	8001110 <HAL_GPIO_Init>

  /*Configure GPIO pin : PUSH_BUTTON_01_Pin */
  GPIO_InitStruct.Pin = PUSH_BUTTON_01_Pin;
 8000aa2:	0021      	movs	r1, r4
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aaa:	187b      	adds	r3, r7, r1
 8000aac:	2200      	movs	r2, #0
 8000aae:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	187b      	adds	r3, r7, r1
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PUSH_BUTTON_01_GPIO_Port, &GPIO_InitStruct);
 8000ab6:	187b      	adds	r3, r7, r1
 8000ab8:	4a05      	ldr	r2, [pc, #20]	@ (8000ad0 <MX_GPIO_Init+0xf4>)
 8000aba:	0019      	movs	r1, r3
 8000abc:	0010      	movs	r0, r2
 8000abe:	f000 fb27 	bl	8001110 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	b009      	add	sp, #36	@ 0x24
 8000ac8:	bd90      	pop	{r4, r7, pc}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	50000400 	.word	0x50000400

08000ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad8:	b672      	cpsid	i
}
 8000ada:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	e7fd      	b.n	8000adc <Error_Handler+0x8>

08000ae0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_MspInit+0x44>)
 8000ae8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000aea:	4b0e      	ldr	r3, [pc, #56]	@ (8000b24 <HAL_MspInit+0x44>)
 8000aec:	2180      	movs	r1, #128	@ 0x80
 8000aee:	0549      	lsls	r1, r1, #21
 8000af0:	430a      	orrs	r2, r1
 8000af2:	659a      	str	r2, [r3, #88]	@ 0x58
 8000af4:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <HAL_MspInit+0x44>)
 8000af6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000af8:	2380      	movs	r3, #128	@ 0x80
 8000afa:	055b      	lsls	r3, r3, #21
 8000afc:	4013      	ands	r3, r2
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <HAL_MspInit+0x44>)
 8000b04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000b06:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <HAL_MspInit+0x44>)
 8000b08:	2101      	movs	r1, #1
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8000b0e:	4b05      	ldr	r3, [pc, #20]	@ (8000b24 <HAL_MspInit+0x44>)
 8000b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b12:	2201      	movs	r2, #1
 8000b14:	4013      	ands	r3, r2
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	46c0      	nop			@ (mov r8, r8)
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	b002      	add	sp, #8
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			@ (mov r8, r8)
 8000b24:	40021000 	.word	0x40021000

08000b28 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b590      	push	{r4, r7, lr}
 8000b2a:	b099      	sub	sp, #100	@ 0x64
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	234c      	movs	r3, #76	@ 0x4c
 8000b32:	18fb      	adds	r3, r7, r3
 8000b34:	0018      	movs	r0, r3
 8000b36:	2314      	movs	r3, #20
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f003 fd88 	bl	8004650 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b40:	2414      	movs	r4, #20
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	0018      	movs	r0, r3
 8000b46:	2338      	movs	r3, #56	@ 0x38
 8000b48:	001a      	movs	r2, r3
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	f003 fd80 	bl	8004650 <memset>
  if(huart->Instance==LPUART2)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a21      	ldr	r2, [pc, #132]	@ (8000bdc <HAL_UART_MspInit+0xb4>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d13b      	bne.n	8000bd2 <HAL_UART_MspInit+0xaa>

    /* USER CODE END LPUART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART2;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2208      	movs	r2, #8
 8000b5e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Lpuart2ClockSelection = RCC_LPUART2CLKSOURCE_PCLK1;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	0018      	movs	r0, r3
 8000b6a:	f001 fac3 	bl	80020f4 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	1e03      	subs	r3, r0, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b72:	f7ff ffaf 	bl	8000ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART2_CLK_ENABLE();
 8000b76:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b78:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b7c:	2180      	movs	r1, #128	@ 0x80
 8000b7e:	430a      	orrs	r2, r1
 8000b80:	659a      	str	r2, [r3, #88]	@ 0x58
 8000b82:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b86:	2280      	movs	r2, #128	@ 0x80
 8000b88:	4013      	ands	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b14      	ldr	r3, [pc, #80]	@ (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b90:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000b92:	4b13      	ldr	r3, [pc, #76]	@ (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b94:	2102      	movs	r1, #2
 8000b96:	430a      	orrs	r2, r1
 8000b98:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000b9a:	4b11      	ldr	r3, [pc, #68]	@ (8000be0 <HAL_UART_MspInit+0xb8>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
    /**LPUART2 GPIO Configuration
    PB6     ------> LPUART2_TX
    PB7     ------> LPUART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ba6:	214c      	movs	r1, #76	@ 0x4c
 8000ba8:	187b      	adds	r3, r7, r1
 8000baa:	22c0      	movs	r2, #192	@ 0xc0
 8000bac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_LPUART2;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	220a      	movs	r2, #10
 8000bc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	4a06      	ldr	r2, [pc, #24]	@ (8000be4 <HAL_UART_MspInit+0xbc>)
 8000bca:	0019      	movs	r1, r3
 8000bcc:	0010      	movs	r0, r2
 8000bce:	f000 fa9f 	bl	8001110 <HAL_GPIO_Init>

    /* USER CODE END LPUART2_MspInit 1 */

  }

}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	b019      	add	sp, #100	@ 0x64
 8000bd8:	bd90      	pop	{r4, r7, pc}
 8000bda:	46c0      	nop			@ (mov r8, r8)
 8000bdc:	40008400 	.word	0x40008400
 8000be0:	40021000 	.word	0x40021000
 8000be4:	50000400 	.word	0x50000400

08000be8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000be8:	b590      	push	{r4, r7, lr}
 8000bea:	b093      	sub	sp, #76	@ 0x4c
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bf0:	2410      	movs	r4, #16
 8000bf2:	193b      	adds	r3, r7, r4
 8000bf4:	0018      	movs	r0, r3
 8000bf6:	2338      	movs	r3, #56	@ 0x38
 8000bf8:	001a      	movs	r2, r3
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	f003 fd28 	bl	8004650 <memset>
  if(hrtc->Instance==RTC)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a16      	ldr	r2, [pc, #88]	@ (8000c60 <HAL_RTC_MspInit+0x78>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d126      	bne.n	8000c58 <HAL_RTC_MspInit+0x70>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c0a:	193b      	adds	r3, r7, r4
 8000c0c:	2280      	movs	r2, #128	@ 0x80
 8000c0e:	0212      	lsls	r2, r2, #8
 8000c10:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c12:	193b      	adds	r3, r7, r4
 8000c14:	2280      	movs	r2, #128	@ 0x80
 8000c16:	0092      	lsls	r2, r2, #2
 8000c18:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	f001 fa69 	bl	80020f4 <HAL_RCCEx_PeriphCLKConfig>
 8000c22:	1e03      	subs	r3, r0, #0
 8000c24:	d001      	beq.n	8000c2a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c26:	f7ff ff55 	bl	8000ad4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <HAL_RTC_MspInit+0x7c>)
 8000c2c:	2390      	movs	r3, #144	@ 0x90
 8000c2e:	58d3      	ldr	r3, [r2, r3]
 8000c30:	490c      	ldr	r1, [pc, #48]	@ (8000c64 <HAL_RTC_MspInit+0x7c>)
 8000c32:	2280      	movs	r2, #128	@ 0x80
 8000c34:	0212      	lsls	r2, r2, #8
 8000c36:	4313      	orrs	r3, r2
 8000c38:	2290      	movs	r2, #144	@ 0x90
 8000c3a:	508b      	str	r3, [r1, r2]
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c3c:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_RTC_MspInit+0x7c>)
 8000c3e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c40:	4b08      	ldr	r3, [pc, #32]	@ (8000c64 <HAL_RTC_MspInit+0x7c>)
 8000c42:	2180      	movs	r1, #128	@ 0x80
 8000c44:	00c9      	lsls	r1, r1, #3
 8000c46:	430a      	orrs	r2, r1
 8000c48:	659a      	str	r2, [r3, #88]	@ 0x58
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_RTC_MspInit+0x7c>)
 8000c4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000c4e:	2380      	movs	r3, #128	@ 0x80
 8000c50:	00db      	lsls	r3, r3, #3
 8000c52:	4013      	ands	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000c58:	46c0      	nop			@ (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	b013      	add	sp, #76	@ 0x4c
 8000c5e:	bd90      	pop	{r4, r7, pc}
 8000c60:	40002800 	.word	0x40002800
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c68:	b590      	push	{r4, r7, lr}
 8000c6a:	b08d      	sub	sp, #52	@ 0x34
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	241c      	movs	r4, #28
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	0018      	movs	r0, r3
 8000c76:	2314      	movs	r3, #20
 8000c78:	001a      	movs	r2, r3
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	f003 fce8 	bl	8004650 <memset>
  if(hspi->Instance==SPI1)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a37      	ldr	r2, [pc, #220]	@ (8000d64 <HAL_SPI_MspInit+0xfc>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d131      	bne.n	8000cee <HAL_SPI_MspInit+0x86>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c8a:	4b37      	ldr	r3, [pc, #220]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000c8c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c8e:	4b36      	ldr	r3, [pc, #216]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000c90:	2180      	movs	r1, #128	@ 0x80
 8000c92:	0149      	lsls	r1, r1, #5
 8000c94:	430a      	orrs	r2, r1
 8000c96:	661a      	str	r2, [r3, #96]	@ 0x60
 8000c98:	4b33      	ldr	r3, [pc, #204]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000c9a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000c9c:	2380      	movs	r3, #128	@ 0x80
 8000c9e:	015b      	lsls	r3, r3, #5
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	4b30      	ldr	r3, [pc, #192]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000ca8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000caa:	4b2f      	ldr	r3, [pc, #188]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000cac:	2101      	movs	r1, #1
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000cb2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	4013      	ands	r3, r2
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697b      	ldr	r3, [r7, #20]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_NSS_RFID_Pin|SPI1_SCK_RFID_Pin|SPI1_MISO_RFID_Pin|SPI1_MOSI_RFID_Pin;
 8000cbe:	0021      	movs	r1, r4
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	22f0      	movs	r2, #240	@ 0xf0
 8000cc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2202      	movs	r2, #2
 8000cca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cd8:	187b      	adds	r3, r7, r1
 8000cda:	2205      	movs	r2, #5
 8000cdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	187a      	adds	r2, r7, r1
 8000ce0:	23a0      	movs	r3, #160	@ 0xa0
 8000ce2:	05db      	lsls	r3, r3, #23
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f000 fa12 	bl	8001110 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cec:	e035      	b.n	8000d5a <HAL_SPI_MspInit+0xf2>
  else if(hspi->Instance==SPI2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d6c <HAL_SPI_MspInit+0x104>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d130      	bne.n	8000d5a <HAL_SPI_MspInit+0xf2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cf8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000cfa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000cfe:	2180      	movs	r1, #128	@ 0x80
 8000d00:	01c9      	lsls	r1, r1, #7
 8000d02:	430a      	orrs	r2, r1
 8000d04:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d06:	4b18      	ldr	r3, [pc, #96]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000d08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d0a:	2380      	movs	r3, #128	@ 0x80
 8000d0c:	01db      	lsls	r3, r3, #7
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d14:	4b14      	ldr	r3, [pc, #80]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000d16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000d18:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <HAL_SPI_MspInit+0x100>)
 8000d22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d24:	2201      	movs	r2, #1
 8000d26:	4013      	ands	r3, r2
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SPI2_SCK_FLASH_Pin|SPI2_MISO_FLASH_Pin|SPI2_MOSI_FLASH_Pin;
 8000d2c:	211c      	movs	r1, #28
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	4a0f      	ldr	r2, [pc, #60]	@ (8000d70 <HAL_SPI_MspInit+0x108>)
 8000d32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2202      	movs	r2, #2
 8000d38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	187b      	adds	r3, r7, r1
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2206      	movs	r2, #6
 8000d4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	187a      	adds	r2, r7, r1
 8000d4e:	23a0      	movs	r3, #160	@ 0xa0
 8000d50:	05db      	lsls	r3, r3, #23
 8000d52:	0011      	movs	r1, r2
 8000d54:	0018      	movs	r0, r3
 8000d56:	f000 f9db 	bl	8001110 <HAL_GPIO_Init>
}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	b00d      	add	sp, #52	@ 0x34
 8000d60:	bd90      	pop	{r4, r7, pc}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	40013000 	.word	0x40013000
 8000d68:	40021000 	.word	0x40021000
 8000d6c:	40003800 	.word	0x40003800
 8000d70:	00001802 	.word	0x00001802

08000d74 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2380      	movs	r3, #128	@ 0x80
 8000d82:	05db      	lsls	r3, r3, #23
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d10b      	bne.n	8000da0 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d88:	4b07      	ldr	r3, [pc, #28]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x34>)
 8000d8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x34>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	430a      	orrs	r2, r1
 8000d92:	659a      	str	r2, [r3, #88]	@ 0x58
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <HAL_TIM_PWM_MspInit+0x34>)
 8000d96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000da0:	46c0      	nop			@ (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b004      	add	sp, #16
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40021000 	.word	0x40021000

08000dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000dac:	b590      	push	{r4, r7, lr}
 8000dae:	b089      	sub	sp, #36	@ 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	240c      	movs	r4, #12
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	0018      	movs	r0, r3
 8000dba:	2314      	movs	r3, #20
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	f003 fc46 	bl	8004650 <memset>
  if(htim->Instance==TIM2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	2380      	movs	r3, #128	@ 0x80
 8000dca:	05db      	lsls	r3, r3, #23
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d123      	bne.n	8000e18 <HAL_TIM_MspPostInit+0x6c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd0:	4b13      	ldr	r3, [pc, #76]	@ (8000e20 <HAL_TIM_MspPostInit+0x74>)
 8000dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_TIM_MspPostInit+0x74>)
 8000dd6:	2101      	movs	r1, #1
 8000dd8:	430a      	orrs	r2, r1
 8000dda:	64da      	str	r2, [r3, #76]	@ 0x4c
 8000ddc:	4b10      	ldr	r3, [pc, #64]	@ (8000e20 <HAL_TIM_MspPostInit+0x74>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de0:	2201      	movs	r2, #1
 8000de2:	4013      	ands	r3, r2
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIM2_CH1_PWM_Pin;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	2280      	movs	r2, #128	@ 0x80
 8000dec:	0212      	lsls	r2, r2, #8
 8000dee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	0021      	movs	r1, r4
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2202      	movs	r2, #2
 8000df6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2201      	movs	r2, #1
 8000e08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(TIM2_CH1_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	187a      	adds	r2, r7, r1
 8000e0c:	23a0      	movs	r3, #160	@ 0xa0
 8000e0e:	05db      	lsls	r3, r3, #23
 8000e10:	0011      	movs	r1, r2
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 f97c 	bl	8001110 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000e18:	46c0      	nop			@ (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b009      	add	sp, #36	@ 0x24
 8000e1e:	bd90      	pop	{r4, r7, pc}
 8000e20:	40021000 	.word	0x40021000

08000e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e28:	46c0      	nop			@ (mov r8, r8)
 8000e2a:	e7fd      	b.n	8000e28 <NMI_Handler+0x4>

08000e2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e30:	46c0      	nop			@ (mov r8, r8)
 8000e32:	e7fd      	b.n	8000e30 <HardFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SVC instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e38:	46c0      	nop			@ (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	46c0      	nop			@ (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e4c:	f000 f892 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e50:	46c0      	nop			@ (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
#endif /* ENABLE_DBG_SWEN */
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <SystemInit+0x50>)
 8000e60:	2280      	movs	r2, #128	@ 0x80
 8000e62:	0512      	lsls	r2, r2, #20
 8000e64:	609a      	str	r2, [r3, #8]
#endif /* VECT_TAB_SRAM */

/* Software workaround added to keep Debug enabled after Boot_Lock activation and RDP=1  */
#ifdef ENABLE_DBG_SWEN
  tmp_seccr = FLASH->SECR;
 8000e66:	4a11      	ldr	r2, [pc, #68]	@ (8000eac <SystemInit+0x54>)
 8000e68:	2380      	movs	r3, #128	@ 0x80
 8000e6a:	58d3      	ldr	r3, [r2, r3]
 8000e6c:	607b      	str	r3, [r7, #4]
  tmp_optr = FLASH->OPTR;
 8000e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000eac <SystemInit+0x54>)
 8000e70:	6a1b      	ldr	r3, [r3, #32]
 8000e72:	603b      	str	r3, [r7, #0]
  if (((tmp_seccr & FLASH_SECR_BOOT_LOCK) == FLASH_SECR_BOOT_LOCK)         \
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	2380      	movs	r3, #128	@ 0x80
 8000e78:	025b      	lsls	r3, r3, #9
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	d010      	beq.n	8000ea0 <SystemInit+0x48>
      && (((tmp_optr & FLASH_OPTR_RDP) != 0xCCU)                           \
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	22ff      	movs	r2, #255	@ 0xff
 8000e82:	4013      	ands	r3, r2
 8000e84:	2bcc      	cmp	r3, #204	@ 0xcc
 8000e86:	d00b      	beq.n	8000ea0 <SystemInit+0x48>
      && ((tmp_optr & FLASH_OPTR_RDP) != 0xAAU)))
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	22ff      	movs	r2, #255	@ 0xff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2baa      	cmp	r3, #170	@ 0xaa
 8000e90:	d006      	beq.n	8000ea0 <SystemInit+0x48>
  {
    FLASH->ACR |= FLASH_ACR_DBG_SWEN;  /* Debug access software enabled to avoid the chip
 8000e92:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <SystemInit+0x54>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b05      	ldr	r3, [pc, #20]	@ (8000eac <SystemInit+0x54>)
 8000e98:	2180      	movs	r1, #128	@ 0x80
 8000e9a:	02c9      	lsls	r1, r1, #11
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
                                          to be locked when RDP=1 and Boot_Lock=1        */
  }
#endif /* ENABLE_DBG_SWEN */
}
 8000ea0:	46c0      	nop			@ (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b002      	add	sp, #8
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	e000ed00 	.word	0xe000ed00
 8000eac:	40022000 	.word	0x40022000

08000eb0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ebc:	2003      	movs	r0, #3
 8000ebe:	f000 f80f 	bl	8000ee0 <HAL_InitTick>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	2201      	movs	r2, #1
 8000eca:	701a      	strb	r2, [r3, #0]
 8000ecc:	e001      	b.n	8000ed2 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ece:	f7ff fe07 	bl	8000ae0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
}
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	b002      	add	sp, #8
 8000edc:	bd80      	pop	{r7, pc}
	...

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b590      	push	{r4, r7, lr}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	230f      	movs	r3, #15
 8000eea:	18fb      	adds	r3, r7, r3
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <HAL_InitTick+0x88>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d02b      	beq.n	8000f50 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ef8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f6c <HAL_InitTick+0x8c>)
 8000efa:	681c      	ldr	r4, [r3, #0]
 8000efc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <HAL_InitTick+0x88>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	0019      	movs	r1, r3
 8000f02:	23fa      	movs	r3, #250	@ 0xfa
 8000f04:	0098      	lsls	r0, r3, #2
 8000f06:	f7ff f8ff 	bl	8000108 <__udivsi3>
 8000f0a:	0003      	movs	r3, r0
 8000f0c:	0019      	movs	r1, r3
 8000f0e:	0020      	movs	r0, r4
 8000f10:	f7ff f8fa 	bl	8000108 <__udivsi3>
 8000f14:	0003      	movs	r3, r0
 8000f16:	0018      	movs	r0, r3
 8000f18:	f000 f8ed 	bl	80010f6 <HAL_SYSTICK_Config>
 8000f1c:	1e03      	subs	r3, r0, #0
 8000f1e:	d112      	bne.n	8000f46 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d80a      	bhi.n	8000f3c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	2301      	movs	r3, #1
 8000f2a:	425b      	negs	r3, r3
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	0018      	movs	r0, r3
 8000f30:	f000 f8cc 	bl	80010cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f34:	4b0e      	ldr	r3, [pc, #56]	@ (8000f70 <HAL_InitTick+0x90>)
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
 8000f3a:	e00d      	b.n	8000f58 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	2201      	movs	r2, #1
 8000f42:	701a      	strb	r2, [r3, #0]
 8000f44:	e008      	b.n	8000f58 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f46:	230f      	movs	r3, #15
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	701a      	strb	r2, [r3, #0]
 8000f4e:	e003      	b.n	8000f58 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f50:	230f      	movs	r3, #15
 8000f52:	18fb      	adds	r3, r7, r3
 8000f54:	2201      	movs	r2, #1
 8000f56:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000f58:	230f      	movs	r3, #15
 8000f5a:	18fb      	adds	r3, r7, r3
 8000f5c:	781b      	ldrb	r3, [r3, #0]
}
 8000f5e:	0018      	movs	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b005      	add	sp, #20
 8000f64:	bd90      	pop	{r4, r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	20000008 	.word	0x20000008
 8000f6c:	20000000 	.word	0x20000000
 8000f70:	20000004 	.word	0x20000004

08000f74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b04      	ldr	r3, [pc, #16]	@ (8000f8c <HAL_IncTick+0x18>)
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <HAL_IncTick+0x1c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	18d2      	adds	r2, r2, r3
 8000f82:	4b02      	ldr	r3, [pc, #8]	@ (8000f8c <HAL_IncTick+0x18>)
 8000f84:	601a      	str	r2, [r3, #0]
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000200 	.word	0x20000200
 8000f90:	20000008 	.word	0x20000008

08000f94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
  return uwTick;
 8000f98:	4b02      	ldr	r3, [pc, #8]	@ (8000fa4 <HAL_GetTick+0x10>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	20000200 	.word	0x20000200

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b590      	push	{r4, r7, lr}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	0002      	movs	r2, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000fb6:	1dfb      	adds	r3, r7, #7
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fbc:	d828      	bhi.n	8001010 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fbe:	4a2f      	ldr	r2, [pc, #188]	@ (800107c <__NVIC_SetPriority+0xd4>)
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	089b      	lsrs	r3, r3, #2
 8000fc8:	33c0      	adds	r3, #192	@ 0xc0
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	589b      	ldr	r3, [r3, r2]
 8000fce:	1dfa      	adds	r2, r7, #7
 8000fd0:	7812      	ldrb	r2, [r2, #0]
 8000fd2:	0011      	movs	r1, r2
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	400a      	ands	r2, r1
 8000fd8:	00d2      	lsls	r2, r2, #3
 8000fda:	21ff      	movs	r1, #255	@ 0xff
 8000fdc:	4091      	lsls	r1, r2
 8000fde:	000a      	movs	r2, r1
 8000fe0:	43d2      	mvns	r2, r2
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	019b      	lsls	r3, r3, #6
 8000fea:	22ff      	movs	r2, #255	@ 0xff
 8000fec:	401a      	ands	r2, r3
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	4003      	ands	r3, r0
 8000ff8:	00db      	lsls	r3, r3, #3
 8000ffa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ffc:	481f      	ldr	r0, [pc, #124]	@ (800107c <__NVIC_SetPriority+0xd4>)
 8000ffe:	1dfb      	adds	r3, r7, #7
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	b25b      	sxtb	r3, r3
 8001004:	089b      	lsrs	r3, r3, #2
 8001006:	430a      	orrs	r2, r1
 8001008:	33c0      	adds	r3, #192	@ 0xc0
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800100e:	e031      	b.n	8001074 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001010:	4a1b      	ldr	r2, [pc, #108]	@ (8001080 <__NVIC_SetPriority+0xd8>)
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	0019      	movs	r1, r3
 8001018:	230f      	movs	r3, #15
 800101a:	400b      	ands	r3, r1
 800101c:	3b08      	subs	r3, #8
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3306      	adds	r3, #6
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	18d3      	adds	r3, r2, r3
 8001026:	3304      	adds	r3, #4
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	1dfa      	adds	r2, r7, #7
 800102c:	7812      	ldrb	r2, [r2, #0]
 800102e:	0011      	movs	r1, r2
 8001030:	2203      	movs	r2, #3
 8001032:	400a      	ands	r2, r1
 8001034:	00d2      	lsls	r2, r2, #3
 8001036:	21ff      	movs	r1, #255	@ 0xff
 8001038:	4091      	lsls	r1, r2
 800103a:	000a      	movs	r2, r1
 800103c:	43d2      	mvns	r2, r2
 800103e:	401a      	ands	r2, r3
 8001040:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	019b      	lsls	r3, r3, #6
 8001046:	22ff      	movs	r2, #255	@ 0xff
 8001048:	401a      	ands	r2, r3
 800104a:	1dfb      	adds	r3, r7, #7
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	0018      	movs	r0, r3
 8001050:	2303      	movs	r3, #3
 8001052:	4003      	ands	r3, r0
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001058:	4809      	ldr	r0, [pc, #36]	@ (8001080 <__NVIC_SetPriority+0xd8>)
 800105a:	1dfb      	adds	r3, r7, #7
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	001c      	movs	r4, r3
 8001060:	230f      	movs	r3, #15
 8001062:	4023      	ands	r3, r4
 8001064:	3b08      	subs	r3, #8
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	430a      	orrs	r2, r1
 800106a:	3306      	adds	r3, #6
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	18c3      	adds	r3, r0, r3
 8001070:	3304      	adds	r3, #4
 8001072:	601a      	str	r2, [r3, #0]
}
 8001074:	46c0      	nop			@ (mov r8, r8)
 8001076:	46bd      	mov	sp, r7
 8001078:	b003      	add	sp, #12
 800107a:	bd90      	pop	{r4, r7, pc}
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	1e5a      	subs	r2, r3, #1
 8001090:	2380      	movs	r3, #128	@ 0x80
 8001092:	045b      	lsls	r3, r3, #17
 8001094:	429a      	cmp	r2, r3
 8001096:	d301      	bcc.n	800109c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001098:	2301      	movs	r3, #1
 800109a:	e010      	b.n	80010be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109c:	4b0a      	ldr	r3, [pc, #40]	@ (80010c8 <SysTick_Config+0x44>)
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	3a01      	subs	r2, #1
 80010a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a4:	2301      	movs	r3, #1
 80010a6:	425b      	negs	r3, r3
 80010a8:	2103      	movs	r1, #3
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff ff7c 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	@ (80010c8 <SysTick_Config+0x44>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <SysTick_Config+0x44>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	0018      	movs	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	b002      	add	sp, #8
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriority>:
  *         with stm32u0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	210f      	movs	r1, #15
 80010d8:	187b      	adds	r3, r7, r1
 80010da:	1c02      	adds	r2, r0, #0
 80010dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80010de:	68ba      	ldr	r2, [r7, #8]
 80010e0:	187b      	adds	r3, r7, r1
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b25b      	sxtb	r3, r3
 80010e6:	0011      	movs	r1, r2
 80010e8:	0018      	movs	r0, r3
 80010ea:	f7ff ff5d 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ee:	46c0      	nop			@ (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b004      	add	sp, #16
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	0018      	movs	r0, r3
 8001102:	f7ff ffbf 	bl	8001084 <SysTick_Config>
 8001106:	0003      	movs	r3, r0
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b002      	add	sp, #8
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	e14d      	b.n	80013bc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2101      	movs	r1, #1
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4091      	lsls	r1, r2
 800112a:	000a      	movs	r2, r1
 800112c:	4013      	ands	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d100      	bne.n	8001138 <HAL_GPIO_Init+0x28>
 8001136:	e13e      	b.n	80013b6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2203      	movs	r2, #3
 800113e:	4013      	ands	r3, r2
 8001140:	2b01      	cmp	r3, #1
 8001142:	d005      	beq.n	8001150 <HAL_GPIO_Init+0x40>
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2203      	movs	r2, #3
 800114a:	4013      	ands	r3, r2
 800114c:	2b02      	cmp	r3, #2
 800114e:	d130      	bne.n	80011b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	409a      	lsls	r2, r3
 800115e:	0013      	movs	r3, r2
 8001160:	43da      	mvns	r2, r3
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	409a      	lsls	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001186:	2201      	movs	r2, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_POS) << position);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	2201      	movs	r2, #1
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2203      	movs	r2, #3
 80011b8:	4013      	ands	r3, r2
 80011ba:	2b03      	cmp	r3, #3
 80011bc:	d017      	beq.n	80011ee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	2203      	movs	r2, #3
 80011ca:	409a      	lsls	r2, r3
 80011cc:	0013      	movs	r3, r2
 80011ce:	43da      	mvns	r2, r3
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	4013      	ands	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	2203      	movs	r2, #3
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d123      	bne.n	8001242 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	08da      	lsrs	r2, r3, #3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3208      	adds	r2, #8
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	58d3      	ldr	r3, [r2, r3]
 8001206:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	2207      	movs	r2, #7
 800120c:	4013      	ands	r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	220f      	movs	r2, #15
 8001212:	409a      	lsls	r2, r3
 8001214:	0013      	movs	r3, r2
 8001216:	43da      	mvns	r2, r3
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	4013      	ands	r3, r2
 800121c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691a      	ldr	r2, [r3, #16]
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	2107      	movs	r1, #7
 8001226:	400b      	ands	r3, r1
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	409a      	lsls	r2, r3
 800122c:	0013      	movs	r3, r2
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	08da      	lsrs	r2, r3, #3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3208      	adds	r2, #8
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	6939      	ldr	r1, [r7, #16]
 8001240:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	2203      	movs	r2, #3
 800124e:	409a      	lsls	r2, r3
 8001250:	0013      	movs	r3, r2
 8001252:	43da      	mvns	r2, r3
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4013      	ands	r3, r2
 8001258:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2203      	movs	r2, #3
 8001260:	401a      	ands	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685a      	ldr	r2, [r3, #4]
 800127a:	23c0      	movs	r3, #192	@ 0xc0
 800127c:	029b      	lsls	r3, r3, #10
 800127e:	4013      	ands	r3, r2
 8001280:	d100      	bne.n	8001284 <HAL_GPIO_Init+0x174>
 8001282:	e098      	b.n	80013b6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001284:	4a53      	ldr	r2, [pc, #332]	@ (80013d4 <HAL_GPIO_Init+0x2c4>)
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	089b      	lsrs	r3, r3, #2
 800128a:	3318      	adds	r3, #24
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	589b      	ldr	r3, [r3, r2]
 8001290:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	2203      	movs	r2, #3
 8001296:	4013      	ands	r3, r2
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	220f      	movs	r2, #15
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03u)));
 80012a8:	687a      	ldr	r2, [r7, #4]
 80012aa:	23a0      	movs	r3, #160	@ 0xa0
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d019      	beq.n	80012e6 <HAL_GPIO_Init+0x1d6>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a48      	ldr	r2, [pc, #288]	@ (80013d8 <HAL_GPIO_Init+0x2c8>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d013      	beq.n	80012e2 <HAL_GPIO_Init+0x1d2>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a47      	ldr	r2, [pc, #284]	@ (80013dc <HAL_GPIO_Init+0x2cc>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x1ce>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a46      	ldr	r2, [pc, #280]	@ (80013e0 <HAL_GPIO_Init+0x2d0>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x1ca>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a45      	ldr	r2, [pc, #276]	@ (80013e4 <HAL_GPIO_Init+0x2d4>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x1c6>
 80012d2:	2305      	movs	r3, #5
 80012d4:	e008      	b.n	80012e8 <HAL_GPIO_Init+0x1d8>
 80012d6:	2306      	movs	r3, #6
 80012d8:	e006      	b.n	80012e8 <HAL_GPIO_Init+0x1d8>
 80012da:	2303      	movs	r3, #3
 80012dc:	e004      	b.n	80012e8 <HAL_GPIO_Init+0x1d8>
 80012de:	2302      	movs	r3, #2
 80012e0:	e002      	b.n	80012e8 <HAL_GPIO_Init+0x1d8>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <HAL_GPIO_Init+0x1d8>
 80012e6:	2300      	movs	r3, #0
 80012e8:	697a      	ldr	r2, [r7, #20]
 80012ea:	2103      	movs	r1, #3
 80012ec:	400a      	ands	r2, r1
 80012ee:	00d2      	lsls	r2, r2, #3
 80012f0:	4093      	lsls	r3, r2
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80012f8:	4936      	ldr	r1, [pc, #216]	@ (80013d4 <HAL_GPIO_Init+0x2c4>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3318      	adds	r3, #24
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	693a      	ldr	r2, [r7, #16]
 8001304:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001306:	4b33      	ldr	r3, [pc, #204]	@ (80013d4 <HAL_GPIO_Init+0x2c4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	2380      	movs	r3, #128	@ 0x80
 800131c:	035b      	lsls	r3, r3, #13
 800131e:	4013      	ands	r3, r2
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	4313      	orrs	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800132a:	4b2a      	ldr	r3, [pc, #168]	@ (80013d4 <HAL_GPIO_Init+0x2c4>)
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001330:	4b28      	ldr	r3, [pc, #160]	@ (80013d4 <HAL_GPIO_Init+0x2c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43da      	mvns	r2, r3
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	039b      	lsls	r3, r3, #14
 8001348:	4013      	ands	r3, r2
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001354:	4b1f      	ldr	r3, [pc, #124]	@ (80013d4 <HAL_GPIO_Init+0x2c4>)
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800135a:	4a1e      	ldr	r2, [pc, #120]	@ (80013d4 <HAL_GPIO_Init+0x2c4>)
 800135c:	2384      	movs	r3, #132	@ 0x84
 800135e:	58d3      	ldr	r3, [r2, r3]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	43da      	mvns	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4013      	ands	r3, r2
 800136a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685a      	ldr	r2, [r3, #4]
 8001370:	2380      	movs	r3, #128	@ 0x80
 8001372:	029b      	lsls	r3, r3, #10
 8001374:	4013      	ands	r3, r2
 8001376:	d003      	beq.n	8001380 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001380:	4914      	ldr	r1, [pc, #80]	@ (80013d4 <HAL_GPIO_Init+0x2c4>)
 8001382:	2284      	movs	r2, #132	@ 0x84
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001388:	4a12      	ldr	r2, [pc, #72]	@ (80013d4 <HAL_GPIO_Init+0x2c4>)
 800138a:	2380      	movs	r3, #128	@ 0x80
 800138c:	58d3      	ldr	r3, [r2, r3]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	43da      	mvns	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	2380      	movs	r3, #128	@ 0x80
 80013a0:	025b      	lsls	r3, r3, #9
 80013a2:	4013      	ands	r3, r2
 80013a4:	d003      	beq.n	80013ae <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013ae:	4909      	ldr	r1, [pc, #36]	@ (80013d4 <HAL_GPIO_Init+0x2c4>)
 80013b0:	2280      	movs	r2, #128	@ 0x80
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3301      	adds	r3, #1
 80013ba:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	40da      	lsrs	r2, r3
 80013c4:	1e13      	subs	r3, r2, #0
 80013c6:	d000      	beq.n	80013ca <HAL_GPIO_Init+0x2ba>
 80013c8:	e6aa      	b.n	8001120 <HAL_GPIO_Init+0x10>
  }
}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b006      	add	sp, #24
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40021800 	.word	0x40021800
 80013d8:	50000400 	.word	0x50000400
 80013dc:	50000800 	.word	0x50000800
 80013e0:	50000c00 	.word	0x50000c00
 80013e4:	50001400 	.word	0x50001400

080013e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	0008      	movs	r0, r1
 80013f2:	0011      	movs	r1, r2
 80013f4:	1cbb      	adds	r3, r7, #2
 80013f6:	1c02      	adds	r2, r0, #0
 80013f8:	801a      	strh	r2, [r3, #0]
 80013fa:	1c7b      	adds	r3, r7, #1
 80013fc:	1c0a      	adds	r2, r1, #0
 80013fe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001400:	1c7b      	adds	r3, r7, #1
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d004      	beq.n	8001412 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001408:	1cbb      	adds	r3, r7, #2
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001410:	e003      	b.n	800141a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001412:	1cbb      	adds	r3, r7, #2
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800141a:	46c0      	nop			@ (mov r8, r8)
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	2380      	movs	r3, #128	@ 0x80
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	429a      	cmp	r2, r3
 8001434:	d137      	bne.n	80014a6 <HAL_PWREx_ControlVoltageScaling+0x82>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001436:	4b27      	ldr	r3, [pc, #156]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	23c0      	movs	r3, #192	@ 0xc0
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	401a      	ands	r2, r3
 8001440:	2380      	movs	r3, #128	@ 0x80
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	429a      	cmp	r2, r3
 8001446:	d040      	beq.n	80014ca <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a22      	ldr	r2, [pc, #136]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800144e:	401a      	ands	r2, r3
 8001450:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001452:	2180      	movs	r1, #128	@ 0x80
 8001454:	0089      	lsls	r1, r1, #2
 8001456:	430a      	orrs	r2, r1
 8001458:	601a      	str	r2, [r3, #0]
      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800145a:	4b20      	ldr	r3, [pc, #128]	@ (80014dc <HAL_PWREx_ControlVoltageScaling+0xb8>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2232      	movs	r2, #50	@ 0x32
 8001460:	4353      	muls	r3, r2
 8001462:	491f      	ldr	r1, [pc, #124]	@ (80014e0 <HAL_PWREx_ControlVoltageScaling+0xbc>)
 8001464:	0018      	movs	r0, r3
 8001466:	f7fe fe4f 	bl	8000108 <__udivsi3>
 800146a:	0003      	movs	r3, r0
 800146c:	3301      	adds	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001470:	e002      	b.n	8001478 <HAL_PWREx_ControlVoltageScaling+0x54>
      {
        wait_loop_index--;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3b01      	subs	r3, #1
 8001476:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001478:	4b16      	ldr	r3, [pc, #88]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	401a      	ands	r2, r3
 8001482:	2380      	movs	r3, #128	@ 0x80
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	429a      	cmp	r2, r3
 8001488:	d102      	bne.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x6c>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f0      	bne.n	8001472 <HAL_PWREx_ControlVoltageScaling+0x4e>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001490:	4b10      	ldr	r3, [pc, #64]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	00db      	lsls	r3, r3, #3
 8001498:	401a      	ands	r2, r3
 800149a:	2380      	movs	r3, #128	@ 0x80
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	429a      	cmp	r2, r3
 80014a0:	d113      	bne.n	80014ca <HAL_PWREx_ControlVoltageScaling+0xa6>
      {
        return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e012      	b.n	80014cc <HAL_PWREx_ControlVoltageScaling+0xa8>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014a6:	4b0b      	ldr	r3, [pc, #44]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	23c0      	movs	r3, #192	@ 0xc0
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	401a      	ands	r2, r3
 80014b0:	2380      	movs	r3, #128	@ 0x80
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d008      	beq.n	80014ca <HAL_PWREx_ControlVoltageScaling+0xa6>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a06      	ldr	r2, [pc, #24]	@ (80014d8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 80014be:	401a      	ands	r2, r3
 80014c0:	4b04      	ldr	r3, [pc, #16]	@ (80014d4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 80014c2:	2180      	movs	r1, #128	@ 0x80
 80014c4:	00c9      	lsls	r1, r1, #3
 80014c6:	430a      	orrs	r2, r1
 80014c8:	601a      	str	r2, [r3, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	0018      	movs	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b004      	add	sp, #16
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40007000 	.word	0x40007000
 80014d8:	fffff9ff 	.word	0xfffff9ff
 80014dc:	20000000 	.word	0x20000000
 80014e0:	000f4240 	.word	0x000f4240

080014e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  *
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <HAL_PWREx_GetVoltageRange+0x14>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	23c0      	movs	r3, #192	@ 0xc0
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	4013      	ands	r3, r2
}
 80014f2:	0018      	movs	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40007000 	.word	0x40007000

080014fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014fc:	b5b0      	push	{r4, r5, r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001504:	4bc8      	ldr	r3, [pc, #800]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2238      	movs	r2, #56	@ 0x38
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800150e:	4bc6      	ldr	r3, [pc, #792]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001510:	68db      	ldr	r3, [r3, #12]
 8001512:	2203      	movs	r2, #3
 8001514:	4013      	ands	r3, r2
 8001516:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2210      	movs	r2, #16
 800151e:	4013      	ands	r3, r2
 8001520:	d100      	bne.n	8001524 <HAL_RCC_OscConfig+0x28>
 8001522:	e0ee      	b.n	8001702 <HAL_RCC_OscConfig+0x206>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <HAL_RCC_OscConfig+0x3e>
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b18      	cmp	r3, #24
 800152e:	d000      	beq.n	8001532 <HAL_RCC_OscConfig+0x36>
 8001530:	e093      	b.n	800165a <HAL_RCC_OscConfig+0x15e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d000      	beq.n	800153a <HAL_RCC_OscConfig+0x3e>
 8001538:	e08f      	b.n	800165a <HAL_RCC_OscConfig+0x15e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800153a:	4bbb      	ldr	r3, [pc, #748]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2202      	movs	r2, #2
 8001540:	4013      	ands	r3, r2
 8001542:	d006      	beq.n	8001552 <HAL_RCC_OscConfig+0x56>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	69db      	ldr	r3, [r3, #28]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <HAL_RCC_OscConfig+0x56>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	f000 fbae 	bl	8001cae <HAL_RCC_OscConfig+0x7b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001556:	4bb4      	ldr	r3, [pc, #720]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2108      	movs	r1, #8
 800155c:	400b      	ands	r3, r1
 800155e:	d004      	beq.n	800156a <HAL_RCC_OscConfig+0x6e>
 8001560:	4bb1      	ldr	r3, [pc, #708]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	21f0      	movs	r1, #240	@ 0xf0
 8001566:	400b      	ands	r3, r1
 8001568:	e005      	b.n	8001576 <HAL_RCC_OscConfig+0x7a>
 800156a:	49af      	ldr	r1, [pc, #700]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800156c:	2394      	movs	r3, #148	@ 0x94
 800156e:	58cb      	ldr	r3, [r1, r3]
 8001570:	091b      	lsrs	r3, r3, #4
 8001572:	21f0      	movs	r1, #240	@ 0xf0
 8001574:	400b      	ands	r3, r1
 8001576:	4293      	cmp	r3, r2
 8001578:	d225      	bcs.n	80015c6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157e:	0018      	movs	r0, r3
 8001580:	f000 fd4c 	bl	800201c <RCC_SetFlashLatencyFromMSIRange>
 8001584:	1e03      	subs	r3, r0, #0
 8001586:	d002      	beq.n	800158e <HAL_RCC_OscConfig+0x92>
          {
            return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	f000 fb90 	bl	8001cae <HAL_RCC_OscConfig+0x7b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800158e:	4ba6      	ldr	r3, [pc, #664]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4ba5      	ldr	r3, [pc, #660]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001594:	2108      	movs	r1, #8
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	4ba3      	ldr	r3, [pc, #652]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	22f0      	movs	r2, #240	@ 0xf0
 80015a0:	4393      	bics	r3, r2
 80015a2:	0019      	movs	r1, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015a8:	4b9f      	ldr	r3, [pc, #636]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015aa:	430a      	orrs	r2, r1
 80015ac:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ae:	4b9e      	ldr	r3, [pc, #632]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4a9e      	ldr	r2, [pc, #632]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	0019      	movs	r1, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	021a      	lsls	r2, r3, #8
 80015be:	4b9a      	ldr	r3, [pc, #616]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015c0:	430a      	orrs	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	e027      	b.n	8001616 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c6:	4b98      	ldr	r3, [pc, #608]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	4b97      	ldr	r3, [pc, #604]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015cc:	2108      	movs	r1, #8
 80015ce:	430a      	orrs	r2, r1
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	4b95      	ldr	r3, [pc, #596]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	22f0      	movs	r2, #240	@ 0xf0
 80015d8:	4393      	bics	r3, r2
 80015da:	0019      	movs	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80015e0:	4b91      	ldr	r3, [pc, #580]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e6:	4b90      	ldr	r3, [pc, #576]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	4a90      	ldr	r2, [pc, #576]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 80015ec:	4013      	ands	r3, r2
 80015ee:	0019      	movs	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	021a      	lsls	r2, r3, #8
 80015f6:	4b8c      	ldr	r3, [pc, #560]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d109      	bne.n	8001616 <HAL_RCC_OscConfig+0x11a>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001606:	0018      	movs	r0, r3
 8001608:	f000 fd08 	bl	800201c <RCC_SetFlashLatencyFromMSIRange>
 800160c:	1e03      	subs	r3, r0, #0
 800160e:	d002      	beq.n	8001616 <HAL_RCC_OscConfig+0x11a>
            {
              return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	f000 fb4c 	bl	8001cae <HAL_RCC_OscConfig+0x7b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001616:	f000 fc43 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 800161a:	0001      	movs	r1, r0
 800161c:	4b82      	ldr	r3, [pc, #520]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800161e:	689b      	ldr	r3, [r3, #8]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	220f      	movs	r2, #15
 8001624:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001626:	4a82      	ldr	r2, [pc, #520]	@ (8001830 <HAL_RCC_OscConfig+0x334>)
 8001628:	5cd3      	ldrb	r3, [r2, r3]
                                                                      >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800162a:	001a      	movs	r2, r3
 800162c:	231f      	movs	r3, #31
 800162e:	4013      	ands	r3, r2
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001630:	000a      	movs	r2, r1
 8001632:	40da      	lsrs	r2, r3
 8001634:	4b7f      	ldr	r3, [pc, #508]	@ (8001834 <HAL_RCC_OscConfig+0x338>)
 8001636:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001638:	4b7f      	ldr	r3, [pc, #508]	@ (8001838 <HAL_RCC_OscConfig+0x33c>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	250f      	movs	r5, #15
 800163e:	197c      	adds	r4, r7, r5
 8001640:	0018      	movs	r0, r3
 8001642:	f7ff fc4d 	bl	8000ee0 <HAL_InitTick>
 8001646:	0003      	movs	r3, r0
 8001648:	7023      	strb	r3, [r4, #0]
        if (status != HAL_OK)
 800164a:	197b      	adds	r3, r7, r5
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d056      	beq.n	8001700 <HAL_RCC_OscConfig+0x204>
        {
          return status;
 8001652:	197b      	adds	r3, r7, r5
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	f000 fb2a 	bl	8001cae <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d034      	beq.n	80016cc <HAL_RCC_OscConfig+0x1d0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001662:	4b71      	ldr	r3, [pc, #452]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	4b70      	ldr	r3, [pc, #448]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001668:	2101      	movs	r1, #1
 800166a:	430a      	orrs	r2, r1
 800166c:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800166e:	f7ff fc91 	bl	8000f94 <HAL_GetTick>
 8001672:	0003      	movs	r3, r0
 8001674:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001676:	e008      	b.n	800168a <HAL_RCC_OscConfig+0x18e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 8001678:	f7ff fc8c 	bl	8000f94 <HAL_GetTick>
 800167c:	0002      	movs	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x18e>
          {
            return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e311      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800168a:	4b67      	ldr	r3, [pc, #412]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2202      	movs	r2, #2
 8001690:	4013      	ands	r3, r2
 8001692:	d0f1      	beq.n	8001678 <HAL_RCC_OscConfig+0x17c>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001694:	4b64      	ldr	r3, [pc, #400]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b63      	ldr	r3, [pc, #396]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800169a:	2108      	movs	r1, #8
 800169c:	430a      	orrs	r2, r1
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	4b61      	ldr	r3, [pc, #388]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	22f0      	movs	r2, #240	@ 0xf0
 80016a6:	4393      	bics	r3, r2
 80016a8:	0019      	movs	r1, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80016ae:	4b5e      	ldr	r3, [pc, #376]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016b4:	4b5c      	ldr	r3, [pc, #368]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	4a5c      	ldr	r2, [pc, #368]	@ (800182c <HAL_RCC_OscConfig+0x330>)
 80016ba:	4013      	ands	r3, r2
 80016bc:	0019      	movs	r1, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	021a      	lsls	r2, r3, #8
 80016c4:	4b58      	ldr	r3, [pc, #352]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016c6:	430a      	orrs	r2, r1
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	e01a      	b.n	8001702 <HAL_RCC_OscConfig+0x206>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016cc:	4b56      	ldr	r3, [pc, #344]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b55      	ldr	r3, [pc, #340]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016d2:	2101      	movs	r1, #1
 80016d4:	438a      	bics	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fc5c 	bl	8000f94 <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	613b      	str	r3, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
 80016e2:	f7ff fc57 	bl	8000f94 <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e2dc      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2202      	movs	r2, #2
 80016fa:	4013      	ands	r3, r2
 80016fc:	d1f1      	bne.n	80016e2 <HAL_RCC_OscConfig+0x1e6>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x206>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001700:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2201      	movs	r2, #1
 8001708:	4013      	ands	r3, r2
 800170a:	d100      	bne.n	800170e <HAL_RCC_OscConfig+0x212>
 800170c:	e065      	b.n	80017da <HAL_RCC_OscConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	2b10      	cmp	r3, #16
 8001712:	d005      	beq.n	8001720 <HAL_RCC_OscConfig+0x224>
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	2b18      	cmp	r3, #24
 8001718:	d10e      	bne.n	8001738 <HAL_RCC_OscConfig+0x23c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2b03      	cmp	r3, #3
 800171e:	d10b      	bne.n	8001738 <HAL_RCC_OscConfig+0x23c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	4b41      	ldr	r3, [pc, #260]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	2380      	movs	r3, #128	@ 0x80
 8001726:	029b      	lsls	r3, r3, #10
 8001728:	4013      	ands	r3, r2
 800172a:	d055      	beq.n	80017d8 <HAL_RCC_OscConfig+0x2dc>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d151      	bne.n	80017d8 <HAL_RCC_OscConfig+0x2dc>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e2ba      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685a      	ldr	r2, [r3, #4]
 800173c:	2380      	movs	r3, #128	@ 0x80
 800173e:	025b      	lsls	r3, r3, #9
 8001740:	429a      	cmp	r2, r3
 8001742:	d107      	bne.n	8001754 <HAL_RCC_OscConfig+0x258>
 8001744:	4b38      	ldr	r3, [pc, #224]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b37      	ldr	r3, [pc, #220]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 800174a:	2180      	movs	r1, #128	@ 0x80
 800174c:	0249      	lsls	r1, r1, #9
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e013      	b.n	800177c <HAL_RCC_OscConfig+0x280>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	23a0      	movs	r3, #160	@ 0xa0
 800175a:	02db      	lsls	r3, r3, #11
 800175c:	429a      	cmp	r2, r3
 800175e:	d107      	bne.n	8001770 <HAL_RCC_OscConfig+0x274>
 8001760:	4b31      	ldr	r3, [pc, #196]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b30      	ldr	r3, [pc, #192]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001766:	21a0      	movs	r1, #160	@ 0xa0
 8001768:	02c9      	lsls	r1, r1, #11
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]
 800176e:	e005      	b.n	800177c <HAL_RCC_OscConfig+0x280>
 8001770:	4b2d      	ldr	r3, [pc, #180]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b2c      	ldr	r3, [pc, #176]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001776:	4931      	ldr	r1, [pc, #196]	@ (800183c <HAL_RCC_OscConfig+0x340>)
 8001778:	400a      	ands	r2, r1
 800177a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d014      	beq.n	80017ae <HAL_RCC_OscConfig+0x2b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7ff fc06 	bl	8000f94 <HAL_GetTick>
 8001788:	0003      	movs	r3, r0
 800178a:	613b      	str	r3, [r7, #16]
        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x2a4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800178e:	f7ff fc01 	bl	8000f94 <HAL_GetTick>
 8001792:	0002      	movs	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b64      	cmp	r3, #100	@ 0x64
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x2a4>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e286      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017a0:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	029b      	lsls	r3, r3, #10
 80017a8:	4013      	ands	r3, r2
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x292>
 80017ac:	e015      	b.n	80017da <HAL_RCC_OscConfig+0x2de>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017ae:	f7ff fbf1 	bl	8000f94 <HAL_GetTick>
 80017b2:	0003      	movs	r3, r0
 80017b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80017b8:	f7ff fbec 	bl	8000f94 <HAL_GetTick>
 80017bc:	0002      	movs	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b64      	cmp	r3, #100	@ 0x64
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e271      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017ca:	4b17      	ldr	r3, [pc, #92]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	2380      	movs	r3, #128	@ 0x80
 80017d0:	029b      	lsls	r3, r3, #10
 80017d2:	4013      	ands	r3, r2
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2bc>
 80017d6:	e000      	b.n	80017da <HAL_RCC_OscConfig+0x2de>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d8:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2202      	movs	r2, #2
 80017e0:	4013      	ands	r3, r2
 80017e2:	d100      	bne.n	80017e6 <HAL_RCC_OscConfig+0x2ea>
 80017e4:	e073      	b.n	80018ce <HAL_RCC_OscConfig+0x3d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x2fc>
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	2b18      	cmp	r3, #24
 80017f0:	d128      	bne.n	8001844 <HAL_RCC_OscConfig+0x348>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	2b02      	cmp	r3, #2
 80017f6:	d125      	bne.n	8001844 <HAL_RCC_OscConfig+0x348>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	2380      	movs	r3, #128	@ 0x80
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4013      	ands	r3, r2
 8001802:	d005      	beq.n	8001810 <HAL_RCC_OscConfig+0x314>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_RCC_OscConfig+0x314>
      {
        return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e24e      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001810:	4b05      	ldr	r3, [pc, #20]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <HAL_RCC_OscConfig+0x344>)
 8001816:	4013      	ands	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	691b      	ldr	r3, [r3, #16]
 800181e:	061a      	lsls	r2, r3, #24
 8001820:	4b01      	ldr	r3, [pc, #4]	@ (8001828 <HAL_RCC_OscConfig+0x32c>)
 8001822:	430a      	orrs	r2, r1
 8001824:	605a      	str	r2, [r3, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001826:	e052      	b.n	80018ce <HAL_RCC_OscConfig+0x3d2>
 8001828:	40021000 	.word	0x40021000
 800182c:	ffff00ff 	.word	0xffff00ff
 8001830:	080046c0 	.word	0x080046c0
 8001834:	20000000 	.word	0x20000000
 8001838:	20000004 	.word	0x20000004
 800183c:	fffaffff 	.word	0xfffaffff
 8001840:	80ffffff 	.word	0x80ffffff
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d026      	beq.n	800189a <HAL_RCC_OscConfig+0x39e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184c:	4bc7      	ldr	r3, [pc, #796]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4bc6      	ldr	r3, [pc, #792]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001852:	2180      	movs	r1, #128	@ 0x80
 8001854:	0049      	lsls	r1, r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800185a:	f7ff fb9b 	bl	8000f94 <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x37a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001864:	f7ff fb96 	bl	8000f94 <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b02      	cmp	r3, #2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x37a>
          {
            return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e21b      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001876:	4bbd      	ldr	r3, [pc, #756]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	@ 0x80
 800187c:	00db      	lsls	r3, r3, #3
 800187e:	4013      	ands	r3, r2
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x368>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001882:	4bba      	ldr	r3, [pc, #744]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	4aba      	ldr	r2, [pc, #744]	@ (8001b70 <HAL_RCC_OscConfig+0x674>)
 8001888:	4013      	ands	r3, r2
 800188a:	0019      	movs	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	691b      	ldr	r3, [r3, #16]
 8001890:	061a      	lsls	r2, r3, #24
 8001892:	4bb6      	ldr	r3, [pc, #728]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001894:	430a      	orrs	r2, r1
 8001896:	605a      	str	r2, [r3, #4]
 8001898:	e019      	b.n	80018ce <HAL_RCC_OscConfig+0x3d2>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800189a:	4bb4      	ldr	r3, [pc, #720]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4bb3      	ldr	r3, [pc, #716]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 80018a0:	49b4      	ldr	r1, [pc, #720]	@ (8001b74 <HAL_RCC_OscConfig+0x678>)
 80018a2:	400a      	ands	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a6:	f7ff fb75 	bl	8000f94 <HAL_GetTick>
 80018aa:	0003      	movs	r3, r0
 80018ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x3c6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fb70 	bl	8000f94 <HAL_GetTick>
 80018b4:	0002      	movs	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x3c6>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e1f5      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018c2:	4baa      	ldr	r3, [pc, #680]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	2380      	movs	r3, #128	@ 0x80
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	4013      	ands	r3, r2
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x3b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2208      	movs	r2, #8
 80018d4:	4013      	ands	r3, r2
 80018d6:	d051      	beq.n	800197c <HAL_RCC_OscConfig+0x480>
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d031      	beq.n	8001944 <HAL_RCC_OscConfig+0x448>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	699b      	ldr	r3, [r3, #24]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d108      	bne.n	80018fa <HAL_RCC_OscConfig+0x3fe>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80018e8:	4aa0      	ldr	r2, [pc, #640]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 80018ea:	2394      	movs	r3, #148	@ 0x94
 80018ec:	58d3      	ldr	r3, [r2, r3]
 80018ee:	499f      	ldr	r1, [pc, #636]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 80018f0:	2204      	movs	r2, #4
 80018f2:	4393      	bics	r3, r2
 80018f4:	2294      	movs	r2, #148	@ 0x94
 80018f6:	508b      	str	r3, [r1, r2]
 80018f8:	e007      	b.n	800190a <HAL_RCC_OscConfig+0x40e>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPREDIV);
 80018fa:	4a9c      	ldr	r2, [pc, #624]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 80018fc:	2394      	movs	r3, #148	@ 0x94
 80018fe:	58d3      	ldr	r3, [r2, r3]
 8001900:	499a      	ldr	r1, [pc, #616]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001902:	2204      	movs	r2, #4
 8001904:	4313      	orrs	r3, r2
 8001906:	2294      	movs	r2, #148	@ 0x94
 8001908:	508b      	str	r3, [r1, r2]
      }
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	4a98      	ldr	r2, [pc, #608]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 800190c:	2394      	movs	r3, #148	@ 0x94
 800190e:	58d3      	ldr	r3, [r2, r3]
 8001910:	4996      	ldr	r1, [pc, #600]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001912:	2201      	movs	r2, #1
 8001914:	4313      	orrs	r3, r2
 8001916:	2294      	movs	r2, #148	@ 0x94
 8001918:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800191a:	f7ff fb3b 	bl	8000f94 <HAL_GetTick>
 800191e:	0003      	movs	r3, r0
 8001920:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001922:	e008      	b.n	8001936 <HAL_RCC_OscConfig+0x43a>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fb36 	bl	8000f94 <HAL_GetTick>
 8001928:	0002      	movs	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b11      	cmp	r3, #17
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x43a>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e1bb      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001936:	4a8d      	ldr	r2, [pc, #564]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001938:	2394      	movs	r3, #148	@ 0x94
 800193a:	58d3      	ldr	r3, [r2, r3]
 800193c:	2202      	movs	r2, #2
 800193e:	4013      	ands	r3, r2
 8001940:	d0f0      	beq.n	8001924 <HAL_RCC_OscConfig+0x428>
 8001942:	e01b      	b.n	800197c <HAL_RCC_OscConfig+0x480>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001944:	4a89      	ldr	r2, [pc, #548]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001946:	2394      	movs	r3, #148	@ 0x94
 8001948:	58d3      	ldr	r3, [r2, r3]
 800194a:	4988      	ldr	r1, [pc, #544]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 800194c:	2201      	movs	r2, #1
 800194e:	4393      	bics	r3, r2
 8001950:	2294      	movs	r2, #148	@ 0x94
 8001952:	508b      	str	r3, [r1, r2]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff fb1e 	bl	8000f94 <HAL_GetTick>
 8001958:	0003      	movs	r3, r0
 800195a:	613b      	str	r3, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800195c:	e008      	b.n	8001970 <HAL_RCC_OscConfig+0x474>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195e:	f7ff fb19 	bl	8000f94 <HAL_GetTick>
 8001962:	0002      	movs	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b11      	cmp	r3, #17
 800196a:	d901      	bls.n	8001970 <HAL_RCC_OscConfig+0x474>
        {
          return HAL_TIMEOUT;
 800196c:	2303      	movs	r3, #3
 800196e:	e19e      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001970:	4a7e      	ldr	r2, [pc, #504]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001972:	2394      	movs	r3, #148	@ 0x94
 8001974:	58d3      	ldr	r3, [r2, r3]
 8001976:	2202      	movs	r2, #2
 8001978:	4013      	ands	r3, r2
 800197a:	d1f0      	bne.n	800195e <HAL_RCC_OscConfig+0x462>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2204      	movs	r2, #4
 8001982:	4013      	ands	r3, r2
 8001984:	d100      	bne.n	8001988 <HAL_RCC_OscConfig+0x48c>
 8001986:	e10d      	b.n	8001ba4 <HAL_RCC_OscConfig+0x6a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001988:	201f      	movs	r0, #31
 800198a:	183b      	adds	r3, r7, r0
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APBENR1, RCC_APBENR1_PWREN))
 8001990:	4b76      	ldr	r3, [pc, #472]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001992:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001994:	2380      	movs	r3, #128	@ 0x80
 8001996:	055b      	lsls	r3, r3, #21
 8001998:	4013      	ands	r3, r2
 800199a:	d110      	bne.n	80019be <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800199c:	4b73      	ldr	r3, [pc, #460]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 800199e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019a0:	4b72      	ldr	r3, [pc, #456]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 80019a2:	2180      	movs	r1, #128	@ 0x80
 80019a4:	0549      	lsls	r1, r1, #21
 80019a6:	430a      	orrs	r2, r1
 80019a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80019aa:	4b70      	ldr	r3, [pc, #448]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 80019ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019ae:	2380      	movs	r3, #128	@ 0x80
 80019b0:	055b      	lsls	r3, r3, #21
 80019b2:	4013      	ands	r3, r2
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b8:	183b      	adds	r3, r7, r0
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019be:	4b6e      	ldr	r3, [pc, #440]	@ (8001b78 <HAL_RCC_OscConfig+0x67c>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	@ 0x80
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	d11a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x504>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019ca:	4b6b      	ldr	r3, [pc, #428]	@ (8001b78 <HAL_RCC_OscConfig+0x67c>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001b78 <HAL_RCC_OscConfig+0x67c>)
 80019d0:	2180      	movs	r1, #128	@ 0x80
 80019d2:	0049      	lsls	r1, r1, #1
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d8:	f7ff fadc 	bl	8000f94 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	613b      	str	r3, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e2:	f7ff fad7 	bl	8000f94 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x4f8>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e15c      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f4:	4b60      	ldr	r3, [pc, #384]	@ (8001b78 <HAL_RCC_OscConfig+0x67c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCC_OscConfig+0x4e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	2201      	movs	r2, #1
 8001a06:	4013      	ands	r3, r2
 8001a08:	d01e      	beq.n	8001a48 <HAL_RCC_OscConfig+0x54c>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2204      	movs	r2, #4
 8001a10:	4013      	ands	r3, r2
 8001a12:	d010      	beq.n	8001a36 <HAL_RCC_OscConfig+0x53a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a14:	4a55      	ldr	r2, [pc, #340]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001a16:	2390      	movs	r3, #144	@ 0x90
 8001a18:	58d3      	ldr	r3, [r2, r3]
 8001a1a:	4954      	ldr	r1, [pc, #336]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001a1c:	2204      	movs	r2, #4
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	2290      	movs	r2, #144	@ 0x90
 8001a22:	508b      	str	r3, [r1, r2]
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a24:	4a51      	ldr	r2, [pc, #324]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001a26:	2390      	movs	r3, #144	@ 0x90
 8001a28:	58d3      	ldr	r3, [r2, r3]
 8001a2a:	4950      	ldr	r1, [pc, #320]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	2290      	movs	r2, #144	@ 0x90
 8001a32:	508b      	str	r3, [r1, r2]
 8001a34:	e018      	b.n	8001a68 <HAL_RCC_OscConfig+0x56c>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a36:	4a4d      	ldr	r2, [pc, #308]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001a38:	2390      	movs	r3, #144	@ 0x90
 8001a3a:	58d3      	ldr	r3, [r2, r3]
 8001a3c:	494b      	ldr	r1, [pc, #300]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4313      	orrs	r3, r2
 8001a42:	2290      	movs	r2, #144	@ 0x90
 8001a44:	508b      	str	r3, [r1, r2]
 8001a46:	e00f      	b.n	8001a68 <HAL_RCC_OscConfig+0x56c>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a48:	4a48      	ldr	r2, [pc, #288]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001a4a:	2390      	movs	r3, #144	@ 0x90
 8001a4c:	58d3      	ldr	r3, [r2, r3]
 8001a4e:	4947      	ldr	r1, [pc, #284]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001a50:	2201      	movs	r2, #1
 8001a52:	4393      	bics	r3, r2
 8001a54:	2290      	movs	r2, #144	@ 0x90
 8001a56:	508b      	str	r3, [r1, r2]
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001a58:	4a44      	ldr	r2, [pc, #272]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001a5a:	2390      	movs	r3, #144	@ 0x90
 8001a5c:	58d3      	ldr	r3, [r2, r3]
 8001a5e:	4943      	ldr	r1, [pc, #268]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001a60:	2204      	movs	r2, #4
 8001a62:	4393      	bics	r3, r2
 8001a64:	2290      	movs	r2, #144	@ 0x90
 8001a66:	508b      	str	r3, [r1, r2]
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d04f      	beq.n	8001b10 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a70:	f7ff fa90 	bl	8000f94 <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a78:	e009      	b.n	8001a8e <HAL_RCC_OscConfig+0x592>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7a:	f7ff fa8b 	bl	8000f94 <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	4a3d      	ldr	r2, [pc, #244]	@ (8001b7c <HAL_RCC_OscConfig+0x680>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x592>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e10f      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a8e:	4a37      	ldr	r2, [pc, #220]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001a90:	2390      	movs	r3, #144	@ 0x90
 8001a92:	58d3      	ldr	r3, [r2, r3]
 8001a94:	2202      	movs	r2, #2
 8001a96:	4013      	ands	r3, r2
 8001a98:	d0ef      	beq.n	8001a7a <HAL_RCC_OscConfig+0x57e>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	2280      	movs	r2, #128	@ 0x80
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	d01a      	beq.n	8001ada <HAL_RCC_OscConfig+0x5de>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001aa4:	4a31      	ldr	r2, [pc, #196]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001aa6:	2390      	movs	r3, #144	@ 0x90
 8001aa8:	58d3      	ldr	r3, [r2, r3]
 8001aaa:	4930      	ldr	r1, [pc, #192]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001aac:	2280      	movs	r2, #128	@ 0x80
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	2290      	movs	r2, #144	@ 0x90
 8001ab2:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001ab4:	e009      	b.n	8001aca <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab6:	f7ff fa6d 	bl	8000f94 <HAL_GetTick>
 8001aba:	0002      	movs	r2, r0
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	4a2e      	ldr	r2, [pc, #184]	@ (8001b7c <HAL_RCC_OscConfig+0x680>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e0f1      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001aca:	4a28      	ldr	r2, [pc, #160]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001acc:	2390      	movs	r3, #144	@ 0x90
 8001ace:	58d2      	ldr	r2, [r2, r3]
 8001ad0:	2380      	movs	r3, #128	@ 0x80
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	d0ee      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x5ba>
 8001ad8:	e059      	b.n	8001b8e <HAL_RCC_OscConfig+0x692>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001ada:	4a24      	ldr	r2, [pc, #144]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001adc:	2390      	movs	r3, #144	@ 0x90
 8001ade:	58d3      	ldr	r3, [r2, r3]
 8001ae0:	4922      	ldr	r1, [pc, #136]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001ae2:	2280      	movs	r2, #128	@ 0x80
 8001ae4:	4393      	bics	r3, r2
 8001ae6:	2290      	movs	r2, #144	@ 0x90
 8001ae8:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001aea:	e009      	b.n	8001b00 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aec:	f7ff fa52 	bl	8000f94 <HAL_GetTick>
 8001af0:	0002      	movs	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	4a21      	ldr	r2, [pc, #132]	@ (8001b7c <HAL_RCC_OscConfig+0x680>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e0d6      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b00:	4a1a      	ldr	r2, [pc, #104]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001b02:	2390      	movs	r3, #144	@ 0x90
 8001b04:	58d2      	ldr	r2, [r2, r3]
 8001b06:	2380      	movs	r3, #128	@ 0x80
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d1ee      	bne.n	8001aec <HAL_RCC_OscConfig+0x5f0>
 8001b0e:	e03e      	b.n	8001b8e <HAL_RCC_OscConfig+0x692>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff fa40 	bl	8000f94 <HAL_GetTick>
 8001b14:	0003      	movs	r3, r0
 8001b16:	613b      	str	r3, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b18:	e009      	b.n	8001b2e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b1a:	f7ff fa3b 	bl	8000f94 <HAL_GetTick>
 8001b1e:	0002      	movs	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	4a15      	ldr	r2, [pc, #84]	@ (8001b7c <HAL_RCC_OscConfig+0x680>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e0bf      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b2e:	4a0f      	ldr	r2, [pc, #60]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001b30:	2390      	movs	r3, #144	@ 0x90
 8001b32:	58d3      	ldr	r3, [r2, r3]
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d1ef      	bne.n	8001b1a <HAL_RCC_OscConfig+0x61e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001b3a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001b3c:	2390      	movs	r3, #144	@ 0x90
 8001b3e:	58d3      	ldr	r3, [r2, r3]
 8001b40:	2280      	movs	r2, #128	@ 0x80
 8001b42:	4013      	ands	r3, r2
 8001b44:	d023      	beq.n	8001b8e <HAL_RCC_OscConfig+0x692>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b46:	4a09      	ldr	r2, [pc, #36]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001b48:	2390      	movs	r3, #144	@ 0x90
 8001b4a:	58d3      	ldr	r3, [r2, r3]
 8001b4c:	4907      	ldr	r1, [pc, #28]	@ (8001b6c <HAL_RCC_OscConfig+0x670>)
 8001b4e:	2280      	movs	r2, #128	@ 0x80
 8001b50:	4393      	bics	r3, r2
 8001b52:	2290      	movs	r2, #144	@ 0x90
 8001b54:	508b      	str	r3, [r1, r2]

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b56:	e013      	b.n	8001b80 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b58:	f7ff fa1c 	bl	8000f94 <HAL_GetTick>
 8001b5c:	0002      	movs	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	4a06      	ldr	r2, [pc, #24]	@ (8001b7c <HAL_RCC_OscConfig+0x680>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d90b      	bls.n	8001b80 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e0a0      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	80ffffff 	.word	0x80ffffff
 8001b74:	fffffeff 	.word	0xfffffeff
 8001b78:	40007000 	.word	0x40007000
 8001b7c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b80:	4a4d      	ldr	r2, [pc, #308]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001b82:	2390      	movs	r3, #144	@ 0x90
 8001b84:	58d2      	ldr	r2, [r2, r3]
 8001b86:	2380      	movs	r3, #128	@ 0x80
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	d1e4      	bne.n	8001b58 <HAL_RCC_OscConfig+0x65c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b8e:	231f      	movs	r3, #31
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x6a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b47      	ldr	r3, [pc, #284]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001b9a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001b9c:	4b46      	ldr	r3, [pc, #280]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001b9e:	4947      	ldr	r1, [pc, #284]	@ (8001cbc <HAL_RCC_OscConfig+0x7c0>)
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	659a      	str	r2, [r3, #88]	@ 0x58
#endif /* RCC_CRRCR_HSI48ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d100      	bne.n	8001bae <HAL_RCC_OscConfig+0x6b2>
 8001bac:	e07e      	b.n	8001cac <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bae:	4b42      	ldr	r3, [pc, #264]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2238      	movs	r2, #56	@ 0x38
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b18      	cmp	r3, #24
 8001bb8:	d100      	bne.n	8001bbc <HAL_RCC_OscConfig+0x6c0>
 8001bba:	e075      	b.n	8001ca8 <HAL_RCC_OscConfig+0x7ac>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d156      	bne.n	8001c72 <HAL_RCC_OscConfig+0x776>
        assert_param(IS_RCC_PLL_DIVP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLL_DIVQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLL_DIVR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc4:	4b3c      	ldr	r3, [pc, #240]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001bca:	493d      	ldr	r1, [pc, #244]	@ (8001cc0 <HAL_RCC_OscConfig+0x7c4>)
 8001bcc:	400a      	ands	r2, r1
 8001bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f9e0 	bl	8000f94 <HAL_GetTick>
 8001bd4:	0003      	movs	r3, r0
 8001bd6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x6f0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bda:	f7ff f9db 	bl	8000f94 <HAL_GetTick>
 8001bde:	0002      	movs	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x6f0>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e060      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bec:	4b32      	ldr	r3, [pc, #200]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	2380      	movs	r3, #128	@ 0x80
 8001bf2:	049b      	lsls	r3, r3, #18
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x6de>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	4a31      	ldr	r2, [pc, #196]	@ (8001cc4 <HAL_RCC_OscConfig+0x7c8>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	431a      	orrs	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c24:	431a      	orrs	r2, r3
 8001c26:	4b24      	ldr	r3, [pc, #144]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVR);
 8001c2c:	4b22      	ldr	r3, [pc, #136]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	4b21      	ldr	r3, [pc, #132]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001c32:	2180      	movs	r1, #128	@ 0x80
 8001c34:	0549      	lsls	r1, r1, #21
 8001c36:	430a      	orrs	r2, r1
 8001c38:	60da      	str	r2, [r3, #12]

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001c40:	2180      	movs	r1, #128	@ 0x80
 8001c42:	0449      	lsls	r1, r1, #17
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f9a4 	bl	8000f94 <HAL_GetTick>
 8001c4c:	0003      	movs	r3, r0
 8001c4e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c50:	e008      	b.n	8001c64 <HAL_RCC_OscConfig+0x768>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c52:	f7ff f99f 	bl	8000f94 <HAL_GetTick>
 8001c56:	0002      	movs	r2, r0
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	1ad3      	subs	r3, r2, r3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d901      	bls.n	8001c64 <HAL_RCC_OscConfig+0x768>
          {
            return HAL_TIMEOUT;
 8001c60:	2303      	movs	r3, #3
 8001c62:	e024      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	2380      	movs	r3, #128	@ 0x80
 8001c6a:	049b      	lsls	r3, r3, #18
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	d0f0      	beq.n	8001c52 <HAL_RCC_OscConfig+0x756>
 8001c70:	e01c      	b.n	8001cac <HAL_RCC_OscConfig+0x7b0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c72:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001c78:	4911      	ldr	r1, [pc, #68]	@ (8001cc0 <HAL_RCC_OscConfig+0x7c4>)
 8001c7a:	400a      	ands	r2, r1
 8001c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f989 	bl	8000f94 <HAL_GetTick>
 8001c82:	0003      	movs	r3, r0
 8001c84:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x79e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c88:	f7ff f984 	bl	8000f94 <HAL_GetTick>
 8001c8c:	0002      	movs	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x79e>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e009      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9a:	4b07      	ldr	r3, [pc, #28]	@ (8001cb8 <HAL_RCC_OscConfig+0x7bc>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	2380      	movs	r3, #128	@ 0x80
 8001ca0:	049b      	lsls	r3, r3, #18
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x78c>
 8001ca6:	e001      	b.n	8001cac <HAL_RCC_OscConfig+0x7b0>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_RCC_OscConfig+0x7b2>
    }
  }
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	0018      	movs	r0, r3
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	b008      	add	sp, #32
 8001cb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb6:	46c0      	nop			@ (mov r8, r8)
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	efffffff 	.word	0xefffffff
 8001cc0:	feffffff 	.word	0xfeffffff
 8001cc4:	11c1808c 	.word	0x11c1808c

08001cc8 <HAL_RCC_ClockConfig>:

HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *const RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b5b0      	push	{r4, r5, r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd2:	4b6c      	ldr	r3, [pc, #432]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2207      	movs	r2, #7
 8001cd8:	4013      	ands	r3, r2
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d911      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce0:	4b68      	ldr	r3, [pc, #416]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	4393      	bics	r3, r2
 8001ce8:	0019      	movs	r1, r3
 8001cea:	4b66      	ldr	r3, [pc, #408]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b64      	ldr	r3, [pc, #400]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2207      	movs	r2, #7
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0bb      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	d100      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x48>
 8001d0e:	e064      	b.n	8001dda <HAL_RCC_ClockConfig+0x112>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b03      	cmp	r3, #3
 8001d16:	d107      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x60>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d18:	4b5b      	ldr	r3, [pc, #364]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	2380      	movs	r3, #128	@ 0x80
 8001d1e:	049b      	lsls	r3, r3, #18
 8001d20:	4013      	ands	r3, r2
 8001d22:	d138      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xce>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0a9      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1b4>
      }
    }
    else
    {
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x78>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d30:	4b55      	ldr	r3, [pc, #340]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	2380      	movs	r3, #128	@ 0x80
 8001d36:	029b      	lsls	r3, r3, #10
 8001d38:	4013      	ands	r3, r2
 8001d3a:	d12c      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e09d      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d106      	bne.n	8001d56 <HAL_RCC_ClockConfig+0x8e>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d48:	4b4f      	ldr	r3, [pc, #316]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d121      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e092      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
      /* HSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d107      	bne.n	8001d6e <HAL_RCC_ClockConfig+0xa6>
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	@ 0x80
 8001d64:	00db      	lsls	r3, r3, #3
 8001d66:	4013      	ands	r3, r2
 8001d68:	d115      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e086      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1b4>
        }
      }

      /* LSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d107      	bne.n	8001d86 <HAL_RCC_ClockConfig+0xbe>
      {
        /* Check the LSI ready flag */
        if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d76:	4a44      	ldr	r2, [pc, #272]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d78:	2394      	movs	r3, #148	@ 0x94
 8001d7a:	58d3      	ldr	r3, [r2, r3]
 8001d7c:	2202      	movs	r2, #2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d109      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e07a      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1b4>

      /* LSE is selected as System Clock Source */
      else
      {
        /* Check the LSE ready flag */
        if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d86:	4a40      	ldr	r2, [pc, #256]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d88:	2390      	movs	r3, #144	@ 0x90
 8001d8a:	58d3      	ldr	r3, [r2, r3]
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xce>
        {
          return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e072      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1b4>
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d96:	4b3c      	ldr	r3, [pc, #240]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	2207      	movs	r2, #7
 8001d9c:	4393      	bics	r3, r2
 8001d9e:	0019      	movs	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4b38      	ldr	r3, [pc, #224]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001da6:	430a      	orrs	r2, r1
 8001da8:	609a      	str	r2, [r3, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001daa:	f7ff f8f3 	bl	8000f94 <HAL_GetTick>
 8001dae:	0003      	movs	r3, r0
 8001db0:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db2:	e009      	b.n	8001dc8 <HAL_RCC_ClockConfig+0x100>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db4:	f7ff f8ee 	bl	8000f94 <HAL_GetTick>
 8001db8:	0002      	movs	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	4a33      	ldr	r2, [pc, #204]	@ (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x100>
      {
        return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e059      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1b4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2238      	movs	r2, #56	@ 0x38
 8001dce:	401a      	ands	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d1ec      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d009      	beq.n	8001df8 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001de4:	4b28      	ldr	r3, [pc, #160]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	4a29      	ldr	r2, [pc, #164]	@ (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001dea:	4013      	ands	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	4b25      	ldr	r3, [pc, #148]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	609a      	str	r2, [r3, #8]
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001df8:	4b22      	ldr	r3, [pc, #136]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2207      	movs	r2, #7
 8001dfe:	4013      	ands	r3, r2
 8001e00:	683a      	ldr	r2, [r7, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d211      	bcs.n	8001e2a <HAL_RCC_ClockConfig+0x162>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e06:	4b1f      	ldr	r3, [pc, #124]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2207      	movs	r2, #7
 8001e0c:	4393      	bics	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e18:	4b1a      	ldr	r3, [pc, #104]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2207      	movs	r2, #7
 8001e1e:	4013      	ands	r3, r2
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_ClockConfig+0x162>
    {
      return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e028      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1b4>
    }
  }

  /*-------------------------- PCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	4013      	ands	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x180>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001e34:	4b14      	ldr	r3, [pc, #80]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	4a16      	ldr	r2, [pc, #88]	@ (8001e94 <HAL_RCC_ClockConfig+0x1cc>)
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	4b11      	ldr	r3, [pc, #68]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001e44:	430a      	orrs	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001e48:	f000 f82a 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8001e4c:	0001      	movs	r1, r0
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001e50:	689b      	ldr	r3, [r3, #8]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	220f      	movs	r2, #15
 8001e56:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001e58:	4a0f      	ldr	r2, [pc, #60]	@ (8001e98 <HAL_RCC_ClockConfig+0x1d0>)
 8001e5a:	5cd3      	ldrb	r3, [r2, r3]
                                                                >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	231f      	movs	r3, #31
 8001e60:	4013      	ands	r3, r2
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) \
 8001e62:	000a      	movs	r2, r1
 8001e64:	40da      	lsrs	r2, r3
 8001e66:	4b0d      	ldr	r3, [pc, #52]	@ (8001e9c <HAL_RCC_ClockConfig+0x1d4>)
 8001e68:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	250b      	movs	r5, #11
 8001e6c:	197c      	adds	r4, r7, r5
 8001e6e:	2003      	movs	r0, #3
 8001e70:	f7ff f836 	bl	8000ee0 <HAL_InitTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	7023      	strb	r3, [r4, #0]

  return halstatus;
 8001e78:	197b      	adds	r3, r7, r5
 8001e7a:	781b      	ldrb	r3, [r3, #0]
}
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	b004      	add	sp, #16
 8001e82:	bdb0      	pop	{r4, r5, r7, pc}
 8001e84:	40022000 	.word	0x40022000
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	00001388 	.word	0x00001388
 8001e90:	fffff0ff 	.word	0xfffff0ff
 8001e94:	ffff8fff 	.word	0xffff8fff
 8001e98:	080046c0 	.word	0x080046c0
 8001e9c:	20000000 	.word	0x20000000

08001ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b08a      	sub	sp, #40	@ 0x28
 8001ea4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t sysclockfreq = 0U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	623b      	str	r3, [r7, #32]
  uint32_t pllm;
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  uint32_t pllsourcefreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eae:	4b46      	ldr	r3, [pc, #280]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2238      	movs	r2, #56	@ 0x38
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eb8:	4b43      	ldr	r3, [pc, #268]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	2b18      	cmp	r3, #24
 8001ecc:	d125      	bne.n	8001f1a <HAL_RCC_GetSysClockFreq+0x7a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d122      	bne.n	8001f1a <HAL_RCC_GetSysClockFreq+0x7a>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2208      	movs	r2, #8
 8001eda:	4013      	ands	r3, r2
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_GetSysClockFreq+0x4e>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISTBYRG) >> RCC_CSR_MSISTBYRG_Pos;
 8001ede:	4a3a      	ldr	r2, [pc, #232]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001ee0:	2394      	movs	r3, #148	@ 0x94
 8001ee2:	58d3      	ldr	r3, [r2, r3]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	4013      	ands	r3, r2
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eec:	e005      	b.n	8001efa <HAL_RCC_GetSysClockFreq+0x5a>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eee:	4b36      	ldr	r3, [pc, #216]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    if (msirange > 11U)
 8001efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efc:	2b0b      	cmp	r3, #11
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_GetSysClockFreq+0x64>
    {
      msirange = 0U;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    msirange = MSIRangeTable[msirange];
 8001f04:	4b31      	ldr	r3, [pc, #196]	@ (8001fcc <HAL_RCC_GetSysClockFreq+0x12c>)
 8001f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	58d3      	ldr	r3, [r2, r3]
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d11b      	bne.n	8001f4c <HAL_RCC_GetSysClockFreq+0xac>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f16:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f18:	e018      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xac>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	2b08      	cmp	r3, #8
 8001f1e:	d102      	bne.n	8001f26 <HAL_RCC_GetSysClockFreq+0x86>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f20:	4b2b      	ldr	r3, [pc, #172]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x130>)
 8001f22:	623b      	str	r3, [r7, #32]
 8001f24:	e012      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	2b10      	cmp	r3, #16
 8001f2a:	d102      	bne.n	8001f32 <HAL_RCC_GetSysClockFreq+0x92>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f2c:	4b29      	ldr	r3, [pc, #164]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x134>)
 8001f2e:	623b      	str	r3, [r7, #32]
 8001f30:	e00c      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	2b20      	cmp	r3, #32
 8001f36:	d103      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0xa0>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f38:	23fa      	movs	r3, #250	@ 0xfa
 8001f3a:	01db      	lsls	r3, r3, #7
 8001f3c:	623b      	str	r3, [r7, #32]
 8001f3e:	e005      	b.n	8001f4c <HAL_RCC_GetSysClockFreq+0xac>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	2b28      	cmp	r3, #40	@ 0x28
 8001f44:	d102      	bne.n	8001f4c <HAL_RCC_GetSysClockFreq+0xac>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f46:	2380      	movs	r3, #128	@ 0x80
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	623b      	str	r3, [r7, #32]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	2b18      	cmp	r3, #24
 8001f50:	d135      	bne.n	8001fbe <HAL_RCC_GetSysClockFreq+0x11e>
    /* PLL used as system clock  source */
    /* The allowed input (pllinput/M) frequency range is from 2.66 to 16 MHZ */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f52:	4b1d      	ldr	r3, [pc, #116]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2203      	movs	r2, #3
 8001f58:	4013      	ands	r3, r2
 8001f5a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	091b      	lsrs	r3, r3, #4
 8001f62:	2207      	movs	r2, #7
 8001f64:	4013      	ands	r3, r2
 8001f66:	3301      	adds	r3, #1
 8001f68:	60fb      	str	r3, [r7, #12]

    switch (pllsource)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d003      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0xd8>
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b03      	cmp	r3, #3
 8001f74:	d003      	beq.n	8001f7e <HAL_RCC_GetSysClockFreq+0xde>
 8001f76:	e005      	b.n	8001f84 <HAL_RCC_GetSysClockFreq+0xe4>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllsourcefreq = HSI_VALUE;
 8001f78:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <HAL_RCC_GetSysClockFreq+0x130>)
 8001f7a:	61fb      	str	r3, [r7, #28]
        break;
 8001f7c:	e005      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllsourcefreq = HSE_VALUE;
 8001f7e:	4b15      	ldr	r3, [pc, #84]	@ (8001fd4 <HAL_RCC_GetSysClockFreq+0x134>)
 8001f80:	61fb      	str	r3, [r7, #28]
        break;
 8001f82:	e002      	b.n	8001f8a <HAL_RCC_GetSysClockFreq+0xea>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllsourcefreq = msirange;
 8001f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f86:	61fb      	str	r3, [r7, #28]
        break;
 8001f88:	46c0      	nop			@ (mov r8, r8)
    }
    pllvco = (pllsourcefreq * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm ;
 8001f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	227f      	movs	r2, #127	@ 0x7f
 8001f92:	4013      	ands	r3, r2
 8001f94:	69fa      	ldr	r2, [r7, #28]
 8001f96:	4353      	muls	r3, r2
 8001f98:	68f9      	ldr	r1, [r7, #12]
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f7fe f8b4 	bl	8000108 <__udivsi3>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	60bb      	str	r3, [r7, #8]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001fa4:	4b08      	ldr	r3, [pc, #32]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0x128>)
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	0f5b      	lsrs	r3, r3, #29
 8001faa:	2207      	movs	r2, #7
 8001fac:	4013      	ands	r3, r2
 8001fae:	3301      	adds	r3, #1
 8001fb0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68b8      	ldr	r0, [r7, #8]
 8001fb6:	f7fe f8a7 	bl	8000108 <__udivsi3>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8001fbe:	6a3b      	ldr	r3, [r7, #32]
}
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	b00a      	add	sp, #40	@ 0x28
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	080046d8 	.word	0x080046d8
 8001fd0:	00f42400 	.word	0x00f42400
 8001fd4:	003d0900 	.word	0x003d0900

08001fd8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fdc:	4b02      	ldr	r3, [pc, #8]	@ (8001fe8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001fde:	681b      	ldr	r3, [r3, #0]
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	20000000 	.word	0x20000000

08001fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos] & 0x1FU));
 8001ff0:	f7ff fff2 	bl	8001fd8 <HAL_RCC_GetHCLKFreq>
 8001ff4:	0001      	movs	r1, r0
 8001ff6:	4b07      	ldr	r3, [pc, #28]	@ (8002014 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	0b1b      	lsrs	r3, r3, #12
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	4013      	ands	r3, r2
 8002000:	4a05      	ldr	r2, [pc, #20]	@ (8002018 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002002:	5cd3      	ldrb	r3, [r2, r3]
 8002004:	001a      	movs	r2, r3
 8002006:	231f      	movs	r3, #31
 8002008:	4013      	ands	r3, r2
 800200a:	40d9      	lsrs	r1, r3
 800200c:	000b      	movs	r3, r1
}
 800200e:	0018      	movs	r0, r3
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	080046d0 	.word	0x080046d0

0800201c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSISRANGE_0 to RCC_MSISRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002024:	2300      	movs	r3, #0
 8002026:	613b      	str	r3, [r7, #16]

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002028:	4b2f      	ldr	r3, [pc, #188]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800202a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800202c:	2380      	movs	r3, #128	@ 0x80
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	4013      	ands	r3, r2
 8002032:	d004      	beq.n	800203e <RCC_SetFlashLatencyFromMSIRange+0x22>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002034:	f7ff fa56 	bl	80014e4 <HAL_PWREx_GetVoltageRange>
 8002038:	0003      	movs	r3, r0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e017      	b.n	800206e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002040:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002042:	4b29      	ldr	r3, [pc, #164]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002044:	2180      	movs	r1, #128	@ 0x80
 8002046:	0549      	lsls	r1, r1, #21
 8002048:	430a      	orrs	r2, r1
 800204a:	659a      	str	r2, [r3, #88]	@ 0x58
 800204c:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 800204e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002050:	2380      	movs	r3, #128	@ 0x80
 8002052:	055b      	lsls	r3, r3, #21
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800205a:	f7ff fa43 	bl	80014e4 <HAL_PWREx_GetVoltageRange>
 800205e:	0003      	movs	r3, r0
 8002060:	617b      	str	r3, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002062:	4b21      	ldr	r3, [pc, #132]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002064:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002066:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <RCC_SetFlashLatencyFromMSIRange+0xcc>)
 8002068:	4920      	ldr	r1, [pc, #128]	@ (80020ec <RCC_SetFlashLatencyFromMSIRange+0xd0>)
 800206a:	400a      	ands	r2, r1
 800206c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  if (vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800206e:	697a      	ldr	r2, [r7, #20]
 8002070:	2380      	movs	r3, #128	@ 0x80
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	429a      	cmp	r2, r3
 8002076:	d111      	bne.n	800209c <RCC_SetFlashLatencyFromMSIRange+0x80>
  {
    if (msirange > RCC_MSIRANGE_8)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b80      	cmp	r3, #128	@ 0x80
 800207c:	d91c      	bls.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_11)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2bb0      	cmp	r3, #176	@ 0xb0
 8002082:	d902      	bls.n	800208a <RCC_SetFlashLatencyFromMSIRange+0x6e>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002084:	2302      	movs	r3, #2
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	e016      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else if (msirange > RCC_MSIRANGE_9)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2b90      	cmp	r3, #144	@ 0x90
 800208e:	d902      	bls.n	8002096 <RCC_SetFlashLatencyFromMSIRange+0x7a>
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002090:	2301      	movs	r3, #1
 8002092:	613b      	str	r3, [r7, #16]
 8002094:	e010      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
      }
      else
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_0; /* 0WS */
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	e00d      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange >= RCC_MSIRANGE_8)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b7f      	cmp	r3, #127	@ 0x7f
 80020a0:	d902      	bls.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_2; /* 3WS */
 80020a2:	2302      	movs	r3, #2
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	e007      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else if (msirange == RCC_MSIRANGE_7)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b70      	cmp	r3, #112	@ 0x70
 80020ac:	d102      	bne.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0x98>
    {
      /* MSI 8Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80020ae:	2301      	movs	r3, #1
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	e001      	b.n	80020b8 <RCC_SetFlashLatencyFromMSIRange+0x9c>
    }
    else
    {
      /* MSI 16Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
    }
    /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020b8:	4b0d      	ldr	r3, [pc, #52]	@ (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2207      	movs	r2, #7
 80020be:	4393      	bics	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80020c4:	693a      	ldr	r2, [r7, #16]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	601a      	str	r2, [r3, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80020ca:	4b09      	ldr	r3, [pc, #36]	@ (80020f0 <RCC_SetFlashLatencyFromMSIRange+0xd4>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2207      	movs	r2, #7
 80020d0:	4013      	ands	r3, r2
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d001      	beq.n	80020dc <RCC_SetFlashLatencyFromMSIRange+0xc0>
  {
    return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <RCC_SetFlashLatencyFromMSIRange+0xc2>
  }

  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	0018      	movs	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	b006      	add	sp, #24
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	40021000 	.word	0x40021000
 80020ec:	efffffff 	.word	0xefffffff
 80020f0:	40022000 	.word	0x40022000

080020f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b086      	sub	sp, #24
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020fc:	2313      	movs	r3, #19
 80020fe:	18fb      	adds	r3, r7, r3
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002104:	2312      	movs	r3, #18
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2380      	movs	r3, #128	@ 0x80
 8002112:	021b      	lsls	r3, r3, #8
 8002114:	4013      	ands	r3, r2
 8002116:	d100      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002118:	e0b7      	b.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    FlagStatus       pwrclkchanged = RESET;
 800211a:	2011      	movs	r0, #17
 800211c:	183b      	adds	r3, r7, r0
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002122:	4b4c      	ldr	r3, [pc, #304]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002124:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002126:	2380      	movs	r3, #128	@ 0x80
 8002128:	055b      	lsls	r3, r3, #21
 800212a:	4013      	ands	r3, r2
 800212c:	d110      	bne.n	8002150 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800212e:	4b49      	ldr	r3, [pc, #292]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002130:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002132:	4b48      	ldr	r3, [pc, #288]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002134:	2180      	movs	r1, #128	@ 0x80
 8002136:	0549      	lsls	r1, r1, #21
 8002138:	430a      	orrs	r2, r1
 800213a:	659a      	str	r2, [r3, #88]	@ 0x58
 800213c:	4b45      	ldr	r3, [pc, #276]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800213e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002140:	2380      	movs	r3, #128	@ 0x80
 8002142:	055b      	lsls	r3, r3, #21
 8002144:	4013      	ands	r3, r2
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800214a:	183b      	adds	r3, r7, r0
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002150:	4b41      	ldr	r3, [pc, #260]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	4b40      	ldr	r3, [pc, #256]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002156:	2180      	movs	r1, #128	@ 0x80
 8002158:	0049      	lsls	r1, r1, #1
 800215a:	430a      	orrs	r2, r1
 800215c:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800215e:	f7fe ff19 	bl	8000f94 <HAL_GetTick>
 8002162:	0003      	movs	r3, r0
 8002164:	60fb      	str	r3, [r7, #12]

    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002166:	e00b      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002168:	f7fe ff14 	bl	8000f94 <HAL_GetTick>
 800216c:	0002      	movs	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d904      	bls.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002176:	2313      	movs	r3, #19
 8002178:	18fb      	adds	r3, r7, r3
 800217a:	2203      	movs	r2, #3
 800217c:	701a      	strb	r2, [r3, #0]
        break;
 800217e:	e005      	b.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while (READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002180:	4b35      	ldr	r3, [pc, #212]	@ (8002258 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	@ 0x80
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4013      	ands	r3, r2
 800218a:	d0ed      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800218c:	2313      	movs	r3, #19
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d168      	bne.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002196:	4a2f      	ldr	r2, [pc, #188]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002198:	2390      	movs	r3, #144	@ 0x90
 800219a:	58d2      	ldr	r2, [r2, r3]
 800219c:	23c0      	movs	r3, #192	@ 0xc0
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4013      	ands	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d01f      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xf6>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d01a      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0xf6>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021b4:	4a27      	ldr	r2, [pc, #156]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021b6:	2390      	movs	r3, #144	@ 0x90
 80021b8:	58d3      	ldr	r3, [r2, r3]
 80021ba:	4a28      	ldr	r2, [pc, #160]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021bc:	4013      	ands	r3, r2
 80021be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021c0:	4a24      	ldr	r2, [pc, #144]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c2:	2390      	movs	r3, #144	@ 0x90
 80021c4:	58d3      	ldr	r3, [r2, r3]
 80021c6:	4923      	ldr	r1, [pc, #140]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021c8:	2280      	movs	r2, #128	@ 0x80
 80021ca:	0252      	lsls	r2, r2, #9
 80021cc:	4313      	orrs	r3, r2
 80021ce:	2290      	movs	r2, #144	@ 0x90
 80021d0:	508b      	str	r3, [r1, r2]
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021d2:	4a20      	ldr	r2, [pc, #128]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d4:	2390      	movs	r3, #144	@ 0x90
 80021d6:	58d3      	ldr	r3, [r2, r3]
 80021d8:	491e      	ldr	r1, [pc, #120]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021da:	4a21      	ldr	r2, [pc, #132]	@ (8002260 <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 80021dc:	4013      	ands	r3, r2
 80021de:	2290      	movs	r2, #144	@ 0x90
 80021e0:	508b      	str	r3, [r1, r2]
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021e2:	491c      	ldr	r1, [pc, #112]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e4:	2290      	movs	r2, #144	@ 0x90
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	508b      	str	r3, [r1, r2]
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2201      	movs	r2, #1
 80021ee:	4013      	ands	r3, r2
 80021f0:	d017      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x12e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f2:	f7fe fecf 	bl	8000f94 <HAL_GetTick>
 80021f6:	0003      	movs	r3, r0
 80021f8:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021fa:	e00c      	b.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7fe feca 	bl	8000f94 <HAL_GetTick>
 8002200:	0002      	movs	r2, r0
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	4a17      	ldr	r2, [pc, #92]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d904      	bls.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x122>
          {
            ret = HAL_TIMEOUT;
 800220c:	2313      	movs	r3, #19
 800220e:	18fb      	adds	r3, r7, r3
 8002210:	2203      	movs	r2, #3
 8002212:	701a      	strb	r2, [r3, #0]
            break;
 8002214:	e005      	b.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x12e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002216:	4a0f      	ldr	r2, [pc, #60]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002218:	2390      	movs	r3, #144	@ 0x90
 800221a:	58d3      	ldr	r3, [r2, r3]
 800221c:	2202      	movs	r2, #2
 800221e:	4013      	ands	r3, r2
 8002220:	d0ec      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x108>
          }
        }
      }

      if (ret == HAL_OK)
 8002222:	2313      	movs	r3, #19
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d10b      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800222c:	4a09      	ldr	r2, [pc, #36]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800222e:	2390      	movs	r3, #144	@ 0x90
 8002230:	58d3      	ldr	r3, [r2, r3]
 8002232:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002234:	401a      	ands	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800223a:	4906      	ldr	r1, [pc, #24]	@ (8002254 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800223c:	4313      	orrs	r3, r2
 800223e:	2290      	movs	r2, #144	@ 0x90
 8002240:	508b      	str	r3, [r1, r2]
 8002242:	e017      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002244:	2312      	movs	r3, #18
 8002246:	18fb      	adds	r3, r7, r3
 8002248:	2213      	movs	r2, #19
 800224a:	18ba      	adds	r2, r7, r2
 800224c:	7812      	ldrb	r2, [r2, #0]
 800224e:	701a      	strb	r2, [r3, #0]
 8002250:	e010      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8002252:	46c0      	nop			@ (mov r8, r8)
 8002254:	40021000 	.word	0x40021000
 8002258:	40007000 	.word	0x40007000
 800225c:	fffffcff 	.word	0xfffffcff
 8002260:	fffeffff 	.word	0xfffeffff
 8002264:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002268:	2312      	movs	r3, #18
 800226a:	18fb      	adds	r3, r7, r3
 800226c:	2213      	movs	r2, #19
 800226e:	18ba      	adds	r2, r7, r2
 8002270:	7812      	ldrb	r2, [r2, #0]
 8002272:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002274:	2311      	movs	r3, #17
 8002276:	18fb      	adds	r3, r7, r3
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d105      	bne.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800227e:	4b84      	ldr	r3, [pc, #528]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002280:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002282:	4b83      	ldr	r3, [pc, #524]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002284:	4983      	ldr	r1, [pc, #524]	@ (8002494 <HAL_RCCEx_PeriphCLKConfig+0x3a0>)
 8002286:	400a      	ands	r2, r1
 8002288:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2201      	movs	r2, #1
 8002290:	4013      	ands	r3, r2
 8002292:	d00b      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002294:	4a7e      	ldr	r2, [pc, #504]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002296:	2388      	movs	r3, #136	@ 0x88
 8002298:	58d3      	ldr	r3, [r2, r3]
 800229a:	2203      	movs	r2, #3
 800229c:	4393      	bics	r3, r2
 800229e:	001a      	movs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	497a      	ldr	r1, [pc, #488]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	2288      	movs	r2, #136	@ 0x88
 80022aa:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2202      	movs	r2, #2
 80022b2:	4013      	ands	r3, r2
 80022b4:	d00b      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022b6:	4a76      	ldr	r2, [pc, #472]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022b8:	2388      	movs	r3, #136	@ 0x88
 80022ba:	58d3      	ldr	r3, [r2, r3]
 80022bc:	220c      	movs	r2, #12
 80022be:	4393      	bics	r3, r2
 80022c0:	001a      	movs	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	4972      	ldr	r1, [pc, #456]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	2288      	movs	r2, #136	@ 0x88
 80022cc:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	2210      	movs	r2, #16
 80022d4:	4013      	ands	r3, r2
 80022d6:	d00a      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80022d8:	4a6d      	ldr	r2, [pc, #436]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022da:	2388      	movs	r3, #136	@ 0x88
 80022dc:	58d3      	ldr	r3, [r2, r3]
 80022de:	4a6e      	ldr	r2, [pc, #440]	@ (8002498 <HAL_RCCEx_PeriphCLKConfig+0x3a4>)
 80022e0:	401a      	ands	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	496a      	ldr	r1, [pc, #424]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	2288      	movs	r2, #136	@ 0x88
 80022ec:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2208      	movs	r2, #8
 80022f4:	4013      	ands	r3, r2
 80022f6:	d00a      	beq.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART2 clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80022f8:	4a65      	ldr	r2, [pc, #404]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80022fa:	2388      	movs	r3, #136	@ 0x88
 80022fc:	58d3      	ldr	r3, [r2, r3]
 80022fe:	4a67      	ldr	r2, [pc, #412]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x3a8>)
 8002300:	401a      	ands	r2, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	4962      	ldr	r1, [pc, #392]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002308:	4313      	orrs	r3, r2
 800230a:	2288      	movs	r2, #136	@ 0x88
 800230c:	508b      	str	r3, [r1, r2]
    /* Configure the LPUART3 clock source */
    __HAL_RCC_LPUART3_CONFIG(PeriphClkInit->Lpuart3ClockSelection);
  }
#endif /* LPUART3 */
  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2220      	movs	r2, #32
 8002314:	4013      	ands	r3, r2
 8002316:	d00a      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002318:	4a5d      	ldr	r2, [pc, #372]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800231a:	2388      	movs	r3, #136	@ 0x88
 800231c:	58d3      	ldr	r3, [r2, r3]
 800231e:	4a60      	ldr	r2, [pc, #384]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 8002320:	401a      	ands	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	495a      	ldr	r1, [pc, #360]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002328:	4313      	orrs	r3, r2
 800232a:	2288      	movs	r2, #136	@ 0x88
 800232c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2240      	movs	r2, #64	@ 0x40
 8002334:	4013      	ands	r3, r2
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002338:	4a55      	ldr	r2, [pc, #340]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800233a:	2388      	movs	r3, #136	@ 0x88
 800233c:	58d3      	ldr	r3, [r2, r3]
 800233e:	4a59      	ldr	r2, [pc, #356]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>)
 8002340:	401a      	ands	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	4952      	ldr	r1, [pc, #328]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002348:	4313      	orrs	r3, r2
 800234a:	2288      	movs	r2, #136	@ 0x88
 800234c:	508b      	str	r3, [r1, r2]
  }

  /*----------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2280      	movs	r2, #128	@ 0x80
 8002354:	4013      	ands	r3, r2
 8002356:	d00a      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002358:	4a4d      	ldr	r2, [pc, #308]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800235a:	2388      	movs	r3, #136	@ 0x88
 800235c:	58d3      	ldr	r3, [r2, r3]
 800235e:	4a52      	ldr	r2, [pc, #328]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x3b4>)
 8002360:	401a      	ands	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	494a      	ldr	r1, [pc, #296]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002368:	4313      	orrs	r3, r2
 800236a:	2288      	movs	r2, #136	@ 0x88
 800236c:	508b      	str	r3, [r1, r2]
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	2380      	movs	r3, #128	@ 0x80
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	4013      	ands	r3, r2
 8002378:	d00a      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800237a:	4a45      	ldr	r2, [pc, #276]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800237c:	2388      	movs	r3, #136	@ 0x88
 800237e:	58d3      	ldr	r3, [r2, r3]
 8002380:	4a4a      	ldr	r2, [pc, #296]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x3b8>)
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4941      	ldr	r1, [pc, #260]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800238a:	4313      	orrs	r3, r2
 800238c:	2288      	movs	r2, #136	@ 0x88
 800238e:	508b      	str	r3, [r1, r2]
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
  }
#endif /* LPTIM3 */
  /*-------------------------- ADC clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	01db      	lsls	r3, r3, #7
 8002398:	4013      	ands	r3, r2
 800239a:	d017      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLP)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023a0:	2380      	movs	r3, #128	@ 0x80
 80023a2:	055b      	lsls	r3, r3, #21
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d106      	bne.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVP);
 80023a8:	4b39      	ldr	r3, [pc, #228]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023aa:	68da      	ldr	r2, [r3, #12]
 80023ac:	4b38      	ldr	r3, [pc, #224]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023ae:	2180      	movs	r1, #128	@ 0x80
 80023b0:	0249      	lsls	r1, r1, #9
 80023b2:	430a      	orrs	r2, r1
 80023b4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023b6:	4a36      	ldr	r2, [pc, #216]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023b8:	2388      	movs	r3, #136	@ 0x88
 80023ba:	58d3      	ldr	r3, [r2, r3]
 80023bc:	4a3c      	ldr	r2, [pc, #240]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>)
 80023be:	401a      	ands	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c4:	4932      	ldr	r1, [pc, #200]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	2288      	movs	r2, #136	@ 0x88
 80023ca:	508b      	str	r3, [r1, r2]
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- RNG clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2380      	movs	r3, #128	@ 0x80
 80023d2:	019b      	lsls	r3, r3, #6
 80023d4:	4013      	ands	r3, r2
 80023d6:	d017      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLQ)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023dc:	2380      	movs	r3, #128	@ 0x80
 80023de:	051b      	lsls	r3, r3, #20
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d106      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 80023e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	4b29      	ldr	r3, [pc, #164]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023ea:	2180      	movs	r1, #128	@ 0x80
 80023ec:	0449      	lsls	r1, r1, #17
 80023ee:	430a      	orrs	r2, r1
 80023f0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80023f2:	4a27      	ldr	r2, [pc, #156]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 80023f4:	2388      	movs	r3, #136	@ 0x88
 80023f6:	58d3      	ldr	r3, [r2, r3]
 80023f8:	4a2e      	ldr	r2, [pc, #184]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>)
 80023fa:	401a      	ands	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002400:	4923      	ldr	r1, [pc, #140]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	2288      	movs	r2, #136	@ 0x88
 8002406:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM1 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	2380      	movs	r3, #128	@ 0x80
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4013      	ands	r3, r2
 8002412:	d017      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {

    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLLQ)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002418:	2380      	movs	r3, #128	@ 0x80
 800241a:	045b      	lsls	r3, r3, #17
 800241c:	429a      	cmp	r2, r3
 800241e:	d106      	bne.n	800242e <HAL_RCCEx_PeriphCLKConfig+0x33a>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002426:	2180      	movs	r1, #128	@ 0x80
 8002428:	0449      	lsls	r1, r1, #17
 800242a:	430a      	orrs	r2, r1
 800242c:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800242e:	4a18      	ldr	r2, [pc, #96]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002430:	2388      	movs	r3, #136	@ 0x88
 8002432:	58d3      	ldr	r3, [r2, r3]
 8002434:	4a20      	ldr	r2, [pc, #128]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8002436:	401a      	ands	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243c:	4914      	ldr	r1, [pc, #80]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800243e:	4313      	orrs	r3, r2
 8002440:	2288      	movs	r2, #136	@ 0x88
 8002442:	508b      	str	r3, [r1, r2]

  }
  /*-------------------------- TIM15 clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	2380      	movs	r3, #128	@ 0x80
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	4013      	ands	r3, r2
 800244e:	d017      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLLQ)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	049b      	lsls	r3, r3, #18
 8002458:	429a      	cmp	r2, r3
 800245a:	d106      	bne.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x376>
    {
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_DIVQ);
 800245c:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800245e:	68da      	ldr	r2, [r3, #12]
 8002460:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 8002462:	2180      	movs	r1, #128	@ 0x80
 8002464:	0449      	lsls	r1, r1, #17
 8002466:	430a      	orrs	r2, r1
 8002468:	60da      	str	r2, [r3, #12]
    }
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800246a:	4a09      	ldr	r2, [pc, #36]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800246c:	2388      	movs	r3, #136	@ 0x88
 800246e:	58d3      	ldr	r3, [r2, r3]
 8002470:	4a11      	ldr	r2, [pc, #68]	@ (80024b8 <HAL_RCCEx_PeriphCLKConfig+0x3c4>)
 8002472:	401a      	ands	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002478:	4905      	ldr	r1, [pc, #20]	@ (8002490 <HAL_RCCEx_PeriphCLKConfig+0x39c>)
 800247a:	4313      	orrs	r3, r2
 800247c:	2288      	movs	r2, #136	@ 0x88
 800247e:	508b      	str	r3, [r1, r2]

  }

  return status;
 8002480:	2312      	movs	r3, #18
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	781b      	ldrb	r3, [r3, #0]
}
 8002486:	0018      	movs	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	b006      	add	sp, #24
 800248c:	bd80      	pop	{r7, pc}
 800248e:	46c0      	nop			@ (mov r8, r8)
 8002490:	40021000 	.word	0x40021000
 8002494:	efffffff 	.word	0xefffffff
 8002498:	fffff3ff 	.word	0xfffff3ff
 800249c:	fffffcff 	.word	0xfffffcff
 80024a0:	ffffcfff 	.word	0xffffcfff
 80024a4:	fffcffff 	.word	0xfffcffff
 80024a8:	fff3ffff 	.word	0xfff3ffff
 80024ac:	ffcfffff 	.word	0xffcfffff
 80024b0:	cfffffff 	.word	0xcfffffff
 80024b4:	f3ffffff 	.word	0xf3ffffff
 80024b8:	feffffff 	.word	0xfeffffff

080024bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM1  TIM1 peripheral clock (only for devices with TIM1)
  *            @arg @ref RCC_PERIPHCLK_TIM15  TIM15 peripheral clock (only for devices with TIM15)
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	61fb      	str	r3, [r7, #28]
  PLL_ClocksTypeDef pll_freq;
  uint32_t msirange;
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	2380      	movs	r3, #128	@ 0x80
 80024cc:	021b      	lsls	r3, r3, #8
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d154      	bne.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0xc0>
  {
    /* Get the current RCC_PERIPHCLK_RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80024d2:	4ad0      	ldr	r2, [pc, #832]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80024d4:	2390      	movs	r3, #144	@ 0x90
 80024d6:	58d2      	ldr	r2, [r2, r3]
 80024d8:	23c0      	movs	r3, #192	@ 0xc0
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	4013      	ands	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

    switch (srcclk)
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	23c0      	movs	r3, #192	@ 0xc0
 80024e4:	009b      	lsls	r3, r3, #2
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d039      	beq.n	800255e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	23c0      	movs	r3, #192	@ 0xc0
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d901      	bls.n	80024f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80024f4:	f000 fbf3 	bl	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x822>
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	2380      	movs	r3, #128	@ 0x80
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	429a      	cmp	r2, r3
 8002500:	d006      	beq.n	8002510 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	429a      	cmp	r2, r3
 800250a:	d00f      	beq.n	800252c <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800250c:	f000 fbe7 	bl	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x822>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002510:	4ac0      	ldr	r2, [pc, #768]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002512:	2390      	movs	r3, #144	@ 0x90
 8002514:	58d3      	ldr	r3, [r2, r3]
 8002516:	2202      	movs	r2, #2
 8002518:	4013      	ands	r3, r2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d001      	beq.n	8002522 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
 800251e:	f000 fbe0 	bl	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
          frequency = LSE_VALUE;
 8002522:	2380      	movs	r3, #128	@ 0x80
 8002524:	021b      	lsls	r3, r3, #8
 8002526:	61fb      	str	r3, [r7, #28]
        break;
 8002528:	f000 fbdb 	bl	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x826>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800252c:	4ab9      	ldr	r2, [pc, #740]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800252e:	2394      	movs	r3, #148	@ 0x94
 8002530:	58d3      	ldr	r3, [r2, r3]
 8002532:	2202      	movs	r2, #2
 8002534:	4013      	ands	r3, r2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d001      	beq.n	800253e <HAL_RCCEx_GetPeriphCLKFreq+0x82>
 800253a:	f000 fbd4 	bl	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
          if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 800253e:	4ab5      	ldr	r2, [pc, #724]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002540:	2394      	movs	r3, #148	@ 0x94
 8002542:	58d3      	ldr	r3, [r2, r3]
 8002544:	2204      	movs	r2, #4
 8002546:	4013      	ands	r3, r2
 8002548:	2b04      	cmp	r3, #4
 800254a:	d103      	bne.n	8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            frequency = LSI_VALUE / 128U;
 800254c:	23fa      	movs	r3, #250	@ 0xfa
 800254e:	61fb      	str	r3, [r7, #28]
        break;
 8002550:	f000 fbc9 	bl	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
            frequency = LSI_VALUE;
 8002554:	23fa      	movs	r3, #250	@ 0xfa
 8002556:	01db      	lsls	r3, r3, #7
 8002558:	61fb      	str	r3, [r7, #28]
        break;
 800255a:	f000 fbc4 	bl	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800255e:	4bad      	ldr	r3, [pc, #692]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	2380      	movs	r3, #128	@ 0x80
 8002564:	029b      	lsls	r3, r3, #10
 8002566:	401a      	ands	r2, r3
 8002568:	2380      	movs	r3, #128	@ 0x80
 800256a:	029b      	lsls	r3, r3, #10
 800256c:	429a      	cmp	r2, r3
 800256e:	d001      	beq.n	8002574 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8002570:	f000 fbbb 	bl	8002cea <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
          frequency = HSE_VALUE / 32U;
 8002574:	4ba8      	ldr	r3, [pc, #672]	@ (8002818 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>)
 8002576:	61fb      	str	r3, [r7, #28]
        break;
 8002578:	f000 fbb7 	bl	8002cea <HAL_RCCEx_GetPeriphCLKFreq+0x82e>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    switch (PeriphClk)
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	2380      	movs	r3, #128	@ 0x80
 8002580:	029b      	lsls	r3, r3, #10
 8002582:	429a      	cmp	r2, r3
 8002584:	d100      	bne.n	8002588 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
 8002586:	e0f7      	b.n	8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	2380      	movs	r3, #128	@ 0x80
 800258c:	029b      	lsls	r3, r3, #10
 800258e:	429a      	cmp	r2, r3
 8002590:	d901      	bls.n	8002596 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8002592:	f000 fbac 	bl	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	2380      	movs	r3, #128	@ 0x80
 800259a:	025b      	lsls	r3, r3, #9
 800259c:	429a      	cmp	r2, r3
 800259e:	d100      	bne.n	80025a2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 80025a0:	e0ea      	b.n	8002778 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	2380      	movs	r3, #128	@ 0x80
 80025a6:	025b      	lsls	r3, r3, #9
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d901      	bls.n	80025b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 80025ac:	f000 fb9f 	bl	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80025b0:	687a      	ldr	r2, [r7, #4]
 80025b2:	2380      	movs	r3, #128	@ 0x80
 80025b4:	01db      	lsls	r3, r3, #7
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d100      	bne.n	80025bc <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80025ba:	e180      	b.n	80028be <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	2380      	movs	r3, #128	@ 0x80
 80025c0:	01db      	lsls	r3, r3, #7
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d901      	bls.n	80025ca <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80025c6:	f000 fb92 	bl	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	2380      	movs	r3, #128	@ 0x80
 80025ce:	019b      	lsls	r3, r3, #6
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d101      	bne.n	80025d8 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
 80025d4:	f000 fb29 	bl	8002c2a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	2380      	movs	r3, #128	@ 0x80
 80025dc:	019b      	lsls	r3, r3, #6
 80025de:	429a      	cmp	r2, r3
 80025e0:	d901      	bls.n	80025e6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80025e2:	f000 fb84 	bl	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80025e6:	687a      	ldr	r2, [r7, #4]
 80025e8:	2380      	movs	r3, #128	@ 0x80
 80025ea:	011b      	lsls	r3, r3, #4
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d100      	bne.n	80025f2 <HAL_RCCEx_GetPeriphCLKFreq+0x136>
 80025f0:	e2f0      	b.n	8002bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	2380      	movs	r3, #128	@ 0x80
 80025f6:	011b      	lsls	r3, r3, #4
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d901      	bls.n	8002600 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80025fc:	f000 fb77 	bl	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	2380      	movs	r3, #128	@ 0x80
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	429a      	cmp	r2, r3
 8002608:	d100      	bne.n	800260c <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 800260a:	e2b8      	b.n	8002b7e <HAL_RCCEx_GetPeriphCLKFreq+0x6c2>
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	2380      	movs	r3, #128	@ 0x80
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	429a      	cmp	r2, r3
 8002614:	d901      	bls.n	800261a <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8002616:	f000 fb6a 	bl	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	2380      	movs	r3, #128	@ 0x80
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	429a      	cmp	r2, r3
 8002622:	d100      	bne.n	8002626 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
 8002624:	e249      	b.n	8002aba <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	2380      	movs	r3, #128	@ 0x80
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	429a      	cmp	r2, r3
 800262e:	d901      	bls.n	8002634 <HAL_RCCEx_GetPeriphCLKFreq+0x178>
 8002630:	f000 fb5d 	bl	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b80      	cmp	r3, #128	@ 0x80
 8002638:	d100      	bne.n	800263c <HAL_RCCEx_GetPeriphCLKFreq+0x180>
 800263a:	e1e1      	b.n	8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b80      	cmp	r3, #128	@ 0x80
 8002640:	d901      	bls.n	8002646 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
 8002642:	f000 fb54 	bl	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b20      	cmp	r3, #32
 800264a:	d80f      	bhi.n	800266c <HAL_RCCEx_GetPeriphCLKFreq+0x1b0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCCEx_GetPeriphCLKFreq+0x19a>
 8002652:	f000 fb4c 	bl	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b20      	cmp	r3, #32
 800265a:	d901      	bls.n	8002660 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800265c:	f000 fb47 	bl	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	009a      	lsls	r2, r3, #2
 8002664:	4b6d      	ldr	r3, [pc, #436]	@ (800281c <HAL_RCCEx_GetPeriphCLKFreq+0x360>)
 8002666:	18d3      	adds	r3, r2, r3
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	469f      	mov	pc, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2b40      	cmp	r3, #64	@ 0x40
 8002670:	d100      	bne.n	8002674 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
 8002672:	e191      	b.n	8002998 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>
            break;
        }
        break;
      }
      default:
        break;
 8002674:	f000 fb3b 	bl	8002cee <HAL_RCCEx_GetPeriphCLKFreq+0x832>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8002678:	4a66      	ldr	r2, [pc, #408]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 800267a:	2388      	movs	r3, #136	@ 0x88
 800267c:	58d3      	ldr	r3, [r2, r3]
 800267e:	2203      	movs	r2, #3
 8002680:	4013      	ands	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b03      	cmp	r3, #3
 8002688:	d025      	beq.n	80026d6 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d82d      	bhi.n	80026ec <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b02      	cmp	r3, #2
 8002694:	d013      	beq.n	80026be <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d827      	bhi.n	80026ec <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d005      	beq.n	80026b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1f8>
            break;
 80026a8:	e020      	b.n	80026ec <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = HAL_RCC_GetPCLK1Freq();
 80026aa:	f7ff fc9f 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 80026ae:	0003      	movs	r3, r0
 80026b0:	61fb      	str	r3, [r7, #28]
            break;
 80026b2:	e020      	b.n	80026f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            frequency = HAL_RCC_GetSysClockFreq();
 80026b4:	f7ff fbf4 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 80026b8:	0003      	movs	r3, r0
 80026ba:	61fb      	str	r3, [r7, #28]
            break;
 80026bc:	e01b      	b.n	80026f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80026be:	4b55      	ldr	r3, [pc, #340]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	2380      	movs	r3, #128	@ 0x80
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	401a      	ands	r2, r3
 80026c8:	2380      	movs	r3, #128	@ 0x80
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d10f      	bne.n	80026f0 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
              frequency = HSI_VALUE;
 80026d0:	4b53      	ldr	r3, [pc, #332]	@ (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80026d2:	61fb      	str	r3, [r7, #28]
            break;
 80026d4:	e00c      	b.n	80026f0 <HAL_RCCEx_GetPeriphCLKFreq+0x234>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80026d6:	4a4f      	ldr	r2, [pc, #316]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80026d8:	2390      	movs	r3, #144	@ 0x90
 80026da:	58d3      	ldr	r3, [r2, r3]
 80026dc:	2202      	movs	r2, #2
 80026de:	4013      	ands	r3, r2
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d107      	bne.n	80026f4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
              frequency = LSE_VALUE;
 80026e4:	2380      	movs	r3, #128	@ 0x80
 80026e6:	021b      	lsls	r3, r3, #8
 80026e8:	61fb      	str	r3, [r7, #28]
            break;
 80026ea:	e003      	b.n	80026f4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
            break;
 80026ec:	46c0      	nop			@ (mov r8, r8)
 80026ee:	e2ff      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80026f0:	46c0      	nop			@ (mov r8, r8)
 80026f2:	e2fd      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80026f4:	46c0      	nop			@ (mov r8, r8)
        break;
 80026f6:	e2fb      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80026f8:	4a46      	ldr	r2, [pc, #280]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80026fa:	2388      	movs	r3, #136	@ 0x88
 80026fc:	58d3      	ldr	r3, [r2, r3]
 80026fe:	220c      	movs	r2, #12
 8002700:	4013      	ands	r3, r2
 8002702:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	2b0c      	cmp	r3, #12
 8002708:	d025      	beq.n	8002756 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	2b0c      	cmp	r3, #12
 800270e:	d82d      	bhi.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	2b08      	cmp	r3, #8
 8002714:	d013      	beq.n	800273e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b08      	cmp	r3, #8
 800271a:	d827      	bhi.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_RCCEx_GetPeriphCLKFreq+0x26e>
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	2b04      	cmp	r3, #4
 8002726:	d005      	beq.n	8002734 <HAL_RCCEx_GetPeriphCLKFreq+0x278>
            break;
 8002728:	e020      	b.n	800276c <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>
            frequency = HAL_RCC_GetPCLK1Freq();
 800272a:	f7ff fc5f 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 800272e:	0003      	movs	r3, r0
 8002730:	61fb      	str	r3, [r7, #28]
            break;
 8002732:	e020      	b.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HAL_RCC_GetSysClockFreq();
 8002734:	f7ff fbb4 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8002738:	0003      	movs	r3, r0
 800273a:	61fb      	str	r3, [r7, #28]
            break;
 800273c:	e01b      	b.n	8002776 <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800273e:	4b35      	ldr	r3, [pc, #212]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	2380      	movs	r3, #128	@ 0x80
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	401a      	ands	r2, r3
 8002748:	2380      	movs	r3, #128	@ 0x80
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	429a      	cmp	r2, r3
 800274e:	d10f      	bne.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
              frequency = HSI_VALUE;
 8002750:	4b33      	ldr	r3, [pc, #204]	@ (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 8002752:	61fb      	str	r3, [r7, #28]
            break;
 8002754:	e00c      	b.n	8002770 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002756:	4a2f      	ldr	r2, [pc, #188]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002758:	2390      	movs	r3, #144	@ 0x90
 800275a:	58d3      	ldr	r3, [r2, r3]
 800275c:	2202      	movs	r2, #2
 800275e:	4013      	ands	r3, r2
 8002760:	2b02      	cmp	r3, #2
 8002762:	d107      	bne.n	8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
              frequency = LSE_VALUE;
 8002764:	2380      	movs	r3, #128	@ 0x80
 8002766:	021b      	lsls	r3, r3, #8
 8002768:	61fb      	str	r3, [r7, #28]
            break;
 800276a:	e003      	b.n	8002774 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
            break;
 800276c:	46c0      	nop			@ (mov r8, r8)
 800276e:	e2bf      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002770:	46c0      	nop			@ (mov r8, r8)
 8002772:	e2bd      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002774:	46c0      	nop			@ (mov r8, r8)
        break;
 8002776:	e2bb      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        frequency = HAL_RCC_GetPCLK1Freq();
 8002778:	f7ff fc38 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 800277c:	0003      	movs	r3, r0
 800277e:	61fb      	str	r3, [r7, #28]
        break;
 8002780:	e2b6      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8002782:	4a24      	ldr	r2, [pc, #144]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 8002784:	2388      	movs	r3, #136	@ 0x88
 8002786:	58d2      	ldr	r2, [r2, r3]
 8002788:	23c0      	movs	r3, #192	@ 0xc0
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	4013      	ands	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	23c0      	movs	r3, #192	@ 0xc0
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	429a      	cmp	r2, r3
 8002798:	d02d      	beq.n	80027f6 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	23c0      	movs	r3, #192	@ 0xc0
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d833      	bhi.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	2380      	movs	r3, #128	@ 0x80
 80027a8:	011b      	lsls	r3, r3, #4
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d017      	beq.n	80027de <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d829      	bhi.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d005      	beq.n	80027ca <HAL_RCCEx_GetPeriphCLKFreq+0x30e>
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	2380      	movs	r3, #128	@ 0x80
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d005      	beq.n	80027d4 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
            break;
 80027c8:	e020      	b.n	800280c <HAL_RCCEx_GetPeriphCLKFreq+0x350>
            frequency = HAL_RCC_GetPCLK1Freq();
 80027ca:	f7ff fc0f 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 80027ce:	0003      	movs	r3, r0
 80027d0:	61fb      	str	r3, [r7, #28]
            break;
 80027d2:	e028      	b.n	8002826 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HAL_RCC_GetSysClockFreq();
 80027d4:	f7ff fb64 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 80027d8:	0003      	movs	r3, r0
 80027da:	61fb      	str	r3, [r7, #28]
            break;
 80027dc:	e023      	b.n	8002826 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	2380      	movs	r3, #128	@ 0x80
 80027e4:	00db      	lsls	r3, r3, #3
 80027e6:	401a      	ands	r2, r3
 80027e8:	2380      	movs	r3, #128	@ 0x80
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d10f      	bne.n	8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
              frequency = HSI_VALUE;
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_RCCEx_GetPeriphCLKFreq+0x364>)
 80027f2:	61fb      	str	r3, [r7, #28]
            break;
 80027f4:	e00c      	b.n	8002810 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80027f6:	4a07      	ldr	r2, [pc, #28]	@ (8002814 <HAL_RCCEx_GetPeriphCLKFreq+0x358>)
 80027f8:	2390      	movs	r3, #144	@ 0x90
 80027fa:	58d3      	ldr	r3, [r2, r3]
 80027fc:	2202      	movs	r2, #2
 80027fe:	4013      	ands	r3, r2
 8002800:	2b02      	cmp	r3, #2
 8002802:	d10f      	bne.n	8002824 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
              frequency = LSE_VALUE;
 8002804:	2380      	movs	r3, #128	@ 0x80
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	61fb      	str	r3, [r7, #28]
            break;
 800280a:	e00b      	b.n	8002824 <HAL_RCCEx_GetPeriphCLKFreq+0x368>
            break;
 800280c:	46c0      	nop			@ (mov r8, r8)
 800280e:	e26f      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002810:	46c0      	nop			@ (mov r8, r8)
 8002812:	e26d      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
 8002814:	40021000 	.word	0x40021000
 8002818:	0001e848 	.word	0x0001e848
 800281c:	08004708 	.word	0x08004708
 8002820:	00f42400 	.word	0x00f42400
            break;
 8002824:	46c0      	nop			@ (mov r8, r8)
        break;
 8002826:	e263      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPUART2_SOURCE();
 8002828:	4ac1      	ldr	r2, [pc, #772]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800282a:	2388      	movs	r3, #136	@ 0x88
 800282c:	58d2      	ldr	r2, [r2, r3]
 800282e:	23c0      	movs	r3, #192	@ 0xc0
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4013      	ands	r3, r2
 8002834:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	23c0      	movs	r3, #192	@ 0xc0
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d02d      	beq.n	800289c <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	23c0      	movs	r3, #192	@ 0xc0
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	429a      	cmp	r2, r3
 8002848:	d833      	bhi.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 800284a:	697a      	ldr	r2, [r7, #20]
 800284c:	2380      	movs	r3, #128	@ 0x80
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	429a      	cmp	r2, r3
 8002852:	d017      	beq.n	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
 8002854:	697a      	ldr	r2, [r7, #20]
 8002856:	2380      	movs	r3, #128	@ 0x80
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	429a      	cmp	r2, r3
 800285c:	d829      	bhi.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	2380      	movs	r3, #128	@ 0x80
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	429a      	cmp	r2, r3
 800286c:	d005      	beq.n	800287a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
            break;
 800286e:	e020      	b.n	80028b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002870:	f7ff fbbc 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002874:	0003      	movs	r3, r0
 8002876:	61fb      	str	r3, [r7, #28]
            break;
 8002878:	e020      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            frequency = HAL_RCC_GetSysClockFreq();
 800287a:	f7ff fb11 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 800287e:	0003      	movs	r3, r0
 8002880:	61fb      	str	r3, [r7, #28]
            break;
 8002882:	e01b      	b.n	80028bc <HAL_RCCEx_GetPeriphCLKFreq+0x400>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002884:	4baa      	ldr	r3, [pc, #680]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	2380      	movs	r3, #128	@ 0x80
 800288a:	00db      	lsls	r3, r3, #3
 800288c:	401a      	ands	r2, r3
 800288e:	2380      	movs	r3, #128	@ 0x80
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	429a      	cmp	r2, r3
 8002894:	d10f      	bne.n	80028b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
              frequency = HSI_VALUE;
 8002896:	4ba7      	ldr	r3, [pc, #668]	@ (8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002898:	61fb      	str	r3, [r7, #28]
            break;
 800289a:	e00c      	b.n	80028b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800289c:	4aa4      	ldr	r2, [pc, #656]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800289e:	2390      	movs	r3, #144	@ 0x90
 80028a0:	58d3      	ldr	r3, [r2, r3]
 80028a2:	2202      	movs	r2, #2
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d107      	bne.n	80028ba <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
              frequency = LSE_VALUE;
 80028aa:	2380      	movs	r3, #128	@ 0x80
 80028ac:	021b      	lsls	r3, r3, #8
 80028ae:	61fb      	str	r3, [r7, #28]
            break;
 80028b0:	e003      	b.n	80028ba <HAL_RCCEx_GetPeriphCLKFreq+0x3fe>
            break;
 80028b2:	46c0      	nop			@ (mov r8, r8)
 80028b4:	e21c      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80028b6:	46c0      	nop			@ (mov r8, r8)
 80028b8:	e21a      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80028ba:	46c0      	nop			@ (mov r8, r8)
        break;
 80028bc:	e218      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80028be:	4a9c      	ldr	r2, [pc, #624]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80028c0:	2388      	movs	r3, #136	@ 0x88
 80028c2:	58d2      	ldr	r2, [r2, r3]
 80028c4:	23c0      	movs	r3, #192	@ 0xc0
 80028c6:	059b      	lsls	r3, r3, #22
 80028c8:	4013      	ands	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80028cc:	697a      	ldr	r2, [r7, #20]
 80028ce:	2380      	movs	r3, #128	@ 0x80
 80028d0:	059b      	lsls	r3, r3, #22
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d012      	beq.n	80028fc <HAL_RCCEx_GetPeriphCLKFreq+0x440>
 80028d6:	697a      	ldr	r2, [r7, #20]
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	059b      	lsls	r3, r3, #22
 80028dc:	429a      	cmp	r2, r3
 80028de:	d825      	bhi.n	800292c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	055b      	lsls	r3, r3, #21
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d014      	beq.n	800291a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
            break;
 80028f0:	e01c      	b.n	800292c <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HAL_RCC_GetSysClockFreq();
 80028f2:	f7ff fad5 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 80028f6:	0003      	movs	r3, r0
 80028f8:	61fb      	str	r3, [r7, #28]
            break;
 80028fa:	e018      	b.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80028fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	2380      	movs	r3, #128	@ 0x80
 8002902:	00db      	lsls	r3, r3, #3
 8002904:	401a      	ands	r2, r3
 8002906:	2380      	movs	r3, #128	@ 0x80
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	429a      	cmp	r2, r3
 800290c:	d102      	bne.n	8002914 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
              frequency = HSI_VALUE;
 800290e:	4b89      	ldr	r3, [pc, #548]	@ (8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002910:	61fb      	str	r3, [r7, #28]
            break;
 8002912:	e00c      	b.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
              frequency = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
            break;
 8002918:	e009      	b.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 800291a:	2408      	movs	r4, #8
 800291c:	193b      	adds	r3, r7, r4
 800291e:	0018      	movs	r0, r3
 8002920:	f000 f9f4 	bl	8002d0c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_P_Frequency;
 8002924:	193b      	adds	r3, r7, r4
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	61fb      	str	r3, [r7, #28]
            break;
 800292a:	e000      	b.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
            break;
 800292c:	46c0      	nop			@ (mov r8, r8)
        break;
 800292e:	e1df      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8002930:	4a7f      	ldr	r2, [pc, #508]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002932:	2388      	movs	r3, #136	@ 0x88
 8002934:	58d2      	ldr	r2, [r2, r3]
 8002936:	23c0      	movs	r3, #192	@ 0xc0
 8002938:	019b      	lsls	r3, r3, #6
 800293a:	4013      	ands	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	2380      	movs	r3, #128	@ 0x80
 8002942:	019b      	lsls	r3, r3, #6
 8002944:	429a      	cmp	r2, r3
 8002946:	d017      	beq.n	8002978 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	2380      	movs	r3, #128	@ 0x80
 800294c:	019b      	lsls	r3, r3, #6
 800294e:	429a      	cmp	r2, r3
 8002950:	d81e      	bhi.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	2380      	movs	r3, #128	@ 0x80
 800295c:	015b      	lsls	r3, r3, #5
 800295e:	429a      	cmp	r2, r3
 8002960:	d005      	beq.n	800296e <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
            break;
 8002962:	e015      	b.n	8002990 <HAL_RCCEx_GetPeriphCLKFreq+0x4d4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002964:	f7ff fb42 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002968:	0003      	movs	r3, r0
 800296a:	61fb      	str	r3, [r7, #28]
            break;
 800296c:	e013      	b.n	8002996 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            frequency = HAL_RCC_GetSysClockFreq();
 800296e:	f7ff fa97 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 8002972:	0003      	movs	r3, r0
 8002974:	61fb      	str	r3, [r7, #28]
            break;
 8002976:	e00e      	b.n	8002996 <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002978:	4b6d      	ldr	r3, [pc, #436]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	2380      	movs	r3, #128	@ 0x80
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	401a      	ands	r2, r3
 8002982:	2380      	movs	r3, #128	@ 0x80
 8002984:	00db      	lsls	r3, r3, #3
 8002986:	429a      	cmp	r2, r3
 8002988:	d104      	bne.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
              frequency = HSI_VALUE;
 800298a:	4b6a      	ldr	r3, [pc, #424]	@ (8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 800298c:	61fb      	str	r3, [r7, #28]
            break;
 800298e:	e001      	b.n	8002994 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
            break;
 8002990:	46c0      	nop			@ (mov r8, r8)
 8002992:	e1ad      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002994:	46c0      	nop			@ (mov r8, r8)
        break;
 8002996:	e1ab      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8002998:	4a65      	ldr	r2, [pc, #404]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 800299a:	2388      	movs	r3, #136	@ 0x88
 800299c:	58d2      	ldr	r2, [r2, r3]
 800299e:	23c0      	movs	r3, #192	@ 0xc0
 80029a0:	029b      	lsls	r3, r3, #10
 80029a2:	4013      	ands	r3, r2
 80029a4:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	2380      	movs	r3, #128	@ 0x80
 80029aa:	029b      	lsls	r3, r3, #10
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d017      	beq.n	80029e0 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	2380      	movs	r3, #128	@ 0x80
 80029b4:	029b      	lsls	r3, r3, #10
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d81e      	bhi.n	80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <HAL_RCCEx_GetPeriphCLKFreq+0x510>
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	2380      	movs	r3, #128	@ 0x80
 80029c4:	025b      	lsls	r3, r3, #9
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d005      	beq.n	80029d6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            break;
 80029ca:	e015      	b.n	80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>
            frequency = HAL_RCC_GetPCLK1Freq();
 80029cc:	f7ff fb0e 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 80029d0:	0003      	movs	r3, r0
 80029d2:	61fb      	str	r3, [r7, #28]
            break;
 80029d4:	e013      	b.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            frequency = HAL_RCC_GetSysClockFreq();
 80029d6:	f7ff fa63 	bl	8001ea0 <HAL_RCC_GetSysClockFreq>
 80029da:	0003      	movs	r3, r0
 80029dc:	61fb      	str	r3, [r7, #28]
            break;
 80029de:	e00e      	b.n	80029fe <HAL_RCCEx_GetPeriphCLKFreq+0x542>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80029e0:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	2380      	movs	r3, #128	@ 0x80
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	401a      	ands	r2, r3
 80029ea:	2380      	movs	r3, #128	@ 0x80
 80029ec:	00db      	lsls	r3, r3, #3
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d104      	bne.n	80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>
              frequency = HSI_VALUE;
 80029f2:	4b50      	ldr	r3, [pc, #320]	@ (8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 80029f4:	61fb      	str	r3, [r7, #28]
            break;
 80029f6:	e001      	b.n	80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x540>
            break;
 80029f8:	46c0      	nop			@ (mov r8, r8)
 80029fa:	e179      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 80029fc:	46c0      	nop			@ (mov r8, r8)
        break;
 80029fe:	e177      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8002a00:	4a4b      	ldr	r2, [pc, #300]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002a02:	2388      	movs	r3, #136	@ 0x88
 8002a04:	58d2      	ldr	r2, [r2, r3]
 8002a06:	23c0      	movs	r3, #192	@ 0xc0
 8002a08:	031b      	lsls	r3, r3, #12
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	23c0      	movs	r3, #192	@ 0xc0
 8002a12:	031b      	lsls	r3, r3, #12
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d03d      	beq.n	8002a94 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	23c0      	movs	r3, #192	@ 0xc0
 8002a1c:	031b      	lsls	r3, r3, #12
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d843      	bhi.n	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8002a22:	697a      	ldr	r2, [r7, #20]
 8002a24:	2380      	movs	r3, #128	@ 0x80
 8002a26:	031b      	lsls	r3, r3, #12
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d027      	beq.n	8002a7c <HAL_RCCEx_GetPeriphCLKFreq+0x5c0>
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	031b      	lsls	r3, r3, #12
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d839      	bhi.n	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	2380      	movs	r3, #128	@ 0x80
 8002a40:	02db      	lsls	r3, r3, #11
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d005      	beq.n	8002a52 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            break;
 8002a46:	e030      	b.n	8002aaa <HAL_RCCEx_GetPeriphCLKFreq+0x5ee>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002a48:	f7ff fad0 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002a4c:	0003      	movs	r3, r0
 8002a4e:	61fb      	str	r3, [r7, #28]
            break;
 8002a50:	e032      	b.n	8002ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x5fc>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002a52:	4a37      	ldr	r2, [pc, #220]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002a54:	2394      	movs	r3, #148	@ 0x94
 8002a56:	58d3      	ldr	r3, [r2, r3]
 8002a58:	2202      	movs	r2, #2
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d126      	bne.n	8002aae <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002a60:	4a33      	ldr	r2, [pc, #204]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002a62:	2394      	movs	r3, #148	@ 0x94
 8002a64:	58d3      	ldr	r3, [r2, r3]
 8002a66:	2204      	movs	r2, #4
 8002a68:	4013      	ands	r3, r2
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	d102      	bne.n	8002a74 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
                frequency = LSI_VALUE / 128U;
 8002a6e:	23fa      	movs	r3, #250	@ 0xfa
 8002a70:	61fb      	str	r3, [r7, #28]
            break;
 8002a72:	e01c      	b.n	8002aae <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
                frequency = LSI_VALUE;
 8002a74:	23fa      	movs	r3, #250	@ 0xfa
 8002a76:	01db      	lsls	r3, r3, #7
 8002a78:	61fb      	str	r3, [r7, #28]
            break;
 8002a7a:	e018      	b.n	8002aae <HAL_RCCEx_GetPeriphCLKFreq+0x5f2>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002a7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	2380      	movs	r3, #128	@ 0x80
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	401a      	ands	r2, r3
 8002a86:	2380      	movs	r3, #128	@ 0x80
 8002a88:	00db      	lsls	r3, r3, #3
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d111      	bne.n	8002ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
              frequency = HSI_VALUE;
 8002a8e:	4b29      	ldr	r3, [pc, #164]	@ (8002b34 <HAL_RCCEx_GetPeriphCLKFreq+0x678>)
 8002a90:	61fb      	str	r3, [r7, #28]
            break;
 8002a92:	e00e      	b.n	8002ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x5f6>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002a94:	4a26      	ldr	r2, [pc, #152]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002a96:	2390      	movs	r3, #144	@ 0x90
 8002a98:	58d3      	ldr	r3, [r2, r3]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d109      	bne.n	8002ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
              frequency = LSE_VALUE;
 8002aa2:	2380      	movs	r3, #128	@ 0x80
 8002aa4:	021b      	lsls	r3, r3, #8
 8002aa6:	61fb      	str	r3, [r7, #28]
            break;
 8002aa8:	e005      	b.n	8002ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x5fa>
            break;
 8002aaa:	46c0      	nop			@ (mov r8, r8)
 8002aac:	e120      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002aae:	46c0      	nop			@ (mov r8, r8)
 8002ab0:	e11e      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002ab2:	46c0      	nop			@ (mov r8, r8)
 8002ab4:	e11c      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002ab6:	46c0      	nop			@ (mov r8, r8)
        break;
 8002ab8:	e11a      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8002aba:	4a1d      	ldr	r2, [pc, #116]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002abc:	2388      	movs	r3, #136	@ 0x88
 8002abe:	58d2      	ldr	r2, [r2, r3]
 8002ac0:	23c0      	movs	r3, #192	@ 0xc0
 8002ac2:	039b      	lsls	r3, r3, #14
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	23c0      	movs	r3, #192	@ 0xc0
 8002acc:	039b      	lsls	r3, r3, #14
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d042      	beq.n	8002b58 <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	23c0      	movs	r3, #192	@ 0xc0
 8002ad6:	039b      	lsls	r3, r3, #14
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d848      	bhi.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	2380      	movs	r3, #128	@ 0x80
 8002ae0:	039b      	lsls	r3, r3, #14
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d02c      	beq.n	8002b40 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	2380      	movs	r3, #128	@ 0x80
 8002aea:	039b      	lsls	r3, r3, #14
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d83e      	bhi.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_RCCEx_GetPeriphCLKFreq+0x646>
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	035b      	lsls	r3, r3, #13
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d005      	beq.n	8002b0c <HAL_RCCEx_GetPeriphCLKFreq+0x650>
            break;
 8002b00:	e035      	b.n	8002b6e <HAL_RCCEx_GetPeriphCLKFreq+0x6b2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8002b02:	f7ff fa73 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002b06:	0003      	movs	r3, r0
 8002b08:	61fb      	str	r3, [r7, #28]
            break;
 8002b0a:	e037      	b.n	8002b7c <HAL_RCCEx_GetPeriphCLKFreq+0x6c0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8002b0c:	4a08      	ldr	r2, [pc, #32]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002b0e:	2394      	movs	r3, #148	@ 0x94
 8002b10:	58d3      	ldr	r3, [r2, r3]
 8002b12:	2202      	movs	r2, #2
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d12b      	bne.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
              if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIPREDIV))
 8002b1a:	4a05      	ldr	r2, [pc, #20]	@ (8002b30 <HAL_RCCEx_GetPeriphCLKFreq+0x674>)
 8002b1c:	2394      	movs	r3, #148	@ 0x94
 8002b1e:	58d3      	ldr	r3, [r2, r3]
 8002b20:	2204      	movs	r2, #4
 8002b22:	4013      	ands	r3, r2
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d107      	bne.n	8002b38 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
                frequency = LSI_VALUE / 128U;
 8002b28:	23fa      	movs	r3, #250	@ 0xfa
 8002b2a:	61fb      	str	r3, [r7, #28]
            break;
 8002b2c:	e021      	b.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	40021000 	.word	0x40021000
 8002b34:	00f42400 	.word	0x00f42400
                frequency = LSI_VALUE;
 8002b38:	23fa      	movs	r3, #250	@ 0xfa
 8002b3a:	01db      	lsls	r3, r3, #7
 8002b3c:	61fb      	str	r3, [r7, #28]
            break;
 8002b3e:	e018      	b.n	8002b72 <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8002b40:	4b6e      	ldr	r3, [pc, #440]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	2380      	movs	r3, #128	@ 0x80
 8002b46:	00db      	lsls	r3, r3, #3
 8002b48:	401a      	ands	r2, r3
 8002b4a:	2380      	movs	r3, #128	@ 0x80
 8002b4c:	00db      	lsls	r3, r3, #3
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d111      	bne.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
              frequency = HSI_VALUE;
 8002b52:	4b6b      	ldr	r3, [pc, #428]	@ (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8002b54:	61fb      	str	r3, [r7, #28]
            break;
 8002b56:	e00e      	b.n	8002b76 <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8002b58:	4a68      	ldr	r2, [pc, #416]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002b5a:	2390      	movs	r3, #144	@ 0x90
 8002b5c:	58d3      	ldr	r3, [r2, r3]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	4013      	ands	r3, r2
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d109      	bne.n	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
              frequency = LSE_VALUE;
 8002b66:	2380      	movs	r3, #128	@ 0x80
 8002b68:	021b      	lsls	r3, r3, #8
 8002b6a:	61fb      	str	r3, [r7, #28]
            break;
 8002b6c:	e005      	b.n	8002b7a <HAL_RCCEx_GetPeriphCLKFreq+0x6be>
            break;
 8002b6e:	46c0      	nop			@ (mov r8, r8)
 8002b70:	e0be      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	e0bc      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002b76:	46c0      	nop			@ (mov r8, r8)
 8002b78:	e0ba      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002b7a:	46c0      	nop			@ (mov r8, r8)
        break;
 8002b7c:	e0b8      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 8002b7e:	4a5f      	ldr	r2, [pc, #380]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002b80:	2388      	movs	r3, #136	@ 0x88
 8002b82:	58d2      	ldr	r2, [r2, r3]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	045b      	lsls	r3, r3, #17
 8002b88:	4013      	ands	r3, r2
 8002b8a:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d005      	beq.n	8002b9e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	2380      	movs	r3, #128	@ 0x80
 8002b96:	045b      	lsls	r3, r3, #17
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d011      	beq.n	8002bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
            break;
 8002b9c:	e019      	b.n	8002bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8002b9e:	4b57      	ldr	r3, [pc, #348]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	23e0      	movs	r3, #224	@ 0xe0
 8002ba4:	01db      	lsls	r3, r3, #7
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	d104      	bne.n	8002bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
              frequency = HAL_RCC_GetPCLK1Freq();
 8002baa:	f7ff fa1f 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002bae:	0003      	movs	r3, r0
 8002bb0:	61fb      	str	r3, [r7, #28]
            break;
 8002bb2:	e00e      	b.n	8002bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8002bb4:	f7ff fa1a 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002bb8:	0003      	movs	r3, r0
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	61fb      	str	r3, [r7, #28]
            break;
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x716>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002bc0:	2408      	movs	r4, #8
 8002bc2:	193b      	adds	r3, r7, r4
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f000 f8a1 	bl	8002d0c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002bca:	193b      	adds	r3, r7, r4
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	61fb      	str	r3, [r7, #28]
            break;
 8002bd0:	46c0      	nop			@ (mov r8, r8)
        break;
 8002bd2:	e08d      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 8002bd4:	4a49      	ldr	r2, [pc, #292]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002bd6:	2388      	movs	r3, #136	@ 0x88
 8002bd8:	58d2      	ldr	r2, [r2, r3]
 8002bda:	2380      	movs	r3, #128	@ 0x80
 8002bdc:	049b      	lsls	r3, r3, #18
 8002bde:	4013      	ands	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x738>
 8002be8:	697a      	ldr	r2, [r7, #20]
 8002bea:	2380      	movs	r3, #128	@ 0x80
 8002bec:	049b      	lsls	r3, r3, #18
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d011      	beq.n	8002c16 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
            break;
 8002bf2:	e019      	b.n	8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            if ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE) == RCC_HCLK_DIV1))
 8002bf4:	4b41      	ldr	r3, [pc, #260]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	23e0      	movs	r3, #224	@ 0xe0
 8002bfa:	01db      	lsls	r3, r3, #7
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d104      	bne.n	8002c0a <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
              frequency = HAL_RCC_GetPCLK1Freq();
 8002c00:	f7ff f9f4 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002c04:	0003      	movs	r3, r0
 8002c06:	61fb      	str	r3, [r7, #28]
            break;
 8002c08:	e00e      	b.n	8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
              frequency = (HAL_RCC_GetPCLK1Freq() * 2U);
 8002c0a:	f7ff f9ef 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002c0e:	0003      	movs	r3, r0
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	61fb      	str	r3, [r7, #28]
            break;
 8002c14:	e008      	b.n	8002c28 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002c16:	2408      	movs	r4, #8
 8002c18:	193b      	adds	r3, r7, r4
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 f876 	bl	8002d0c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	61fb      	str	r3, [r7, #28]
            break;
 8002c26:	46c0      	nop			@ (mov r8, r8)
        break;
 8002c28:	e062      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8002c2a:	4a34      	ldr	r2, [pc, #208]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002c2c:	2388      	movs	r3, #136	@ 0x88
 8002c2e:	58d2      	ldr	r2, [r2, r3]
 8002c30:	23c0      	movs	r3, #192	@ 0xc0
 8002c32:	051b      	lsls	r3, r3, #20
 8002c34:	4013      	ands	r3, r2
 8002c36:	617b      	str	r3, [r7, #20]
        switch (srcclk)
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	23c0      	movs	r3, #192	@ 0xc0
 8002c3c:	051b      	lsls	r3, r3, #20
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d017      	beq.n	8002c72 <HAL_RCCEx_GetPeriphCLKFreq+0x7b6>
 8002c42:	697a      	ldr	r2, [r7, #20]
 8002c44:	23c0      	movs	r3, #192	@ 0xc0
 8002c46:	051b      	lsls	r3, r3, #20
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d844      	bhi.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	2380      	movs	r3, #128	@ 0x80
 8002c50:	051b      	lsls	r3, r3, #20
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d033      	beq.n	8002cbe <HAL_RCCEx_GetPeriphCLKFreq+0x802>
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	2380      	movs	r3, #128	@ 0x80
 8002c5a:	051b      	lsls	r3, r3, #20
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d83a      	bhi.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d034      	beq.n	8002cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	2380      	movs	r3, #128	@ 0x80
 8002c6a:	04db      	lsls	r3, r3, #19
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d003      	beq.n	8002c78 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
            break;
 8002c70:	e031      	b.n	8002cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            frequency = HSI48_VALUE;
 8002c72:	4b24      	ldr	r3, [pc, #144]	@ (8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x848>)
 8002c74:	61fb      	str	r3, [r7, #28]
            break;
 8002c76:	e031      	b.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8002c78:	4b20      	ldr	r3, [pc, #128]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4013      	ands	r3, r2
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d12a      	bne.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8002c84:	4b1d      	ldr	r3, [pc, #116]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2208      	movs	r2, #8
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d005      	beq.n	8002c9a <HAL_RCCEx_GetPeriphCLKFreq+0x7de>
 8002c8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	091b      	lsrs	r3, r3, #4
 8002c94:	220f      	movs	r2, #15
 8002c96:	4013      	ands	r3, r2
 8002c98:	e005      	b.n	8002ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8002c9a:	4a18      	ldr	r2, [pc, #96]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8002c9c:	2394      	movs	r3, #148	@ 0x94
 8002c9e:	58d3      	ldr	r3, [r2, r3]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	220f      	movs	r2, #15
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
              if (msirange > 11U)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2b0b      	cmp	r3, #11
 8002cac:	d901      	bls.n	8002cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
                msirange = 11U;
 8002cae:	230b      	movs	r3, #11
 8002cb0:	61bb      	str	r3, [r7, #24]
              frequency = MSIRangeTable[msirange];
 8002cb2:	4b15      	ldr	r3, [pc, #84]	@ (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x84c>)
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	0092      	lsls	r2, r2, #2
 8002cb8:	58d3      	ldr	r3, [r2, r3]
 8002cba:	61fb      	str	r3, [r7, #28]
            break;
 8002cbc:	e00d      	b.n	8002cda <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            HAL_RCCEx_GetPLLClockFreq(&pll_freq);
 8002cbe:	2408      	movs	r4, #8
 8002cc0:	193b      	adds	r3, r7, r4
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f000 f822 	bl	8002d0c <HAL_RCCEx_GetPLLClockFreq>
            frequency = pll_freq.PLL_Q_Frequency;
 8002cc8:	193b      	adds	r3, r7, r4
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	61fb      	str	r3, [r7, #28]
            break;
 8002cce:	e005      	b.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = 0U;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61fb      	str	r3, [r7, #28]
            break;
 8002cd4:	e002      	b.n	8002cdc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            break;
 8002cd6:	46c0      	nop			@ (mov r8, r8)
 8002cd8:	e00a      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
            break;
 8002cda:	46c0      	nop			@ (mov r8, r8)
        break;
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002cde:	46c0      	nop			@ (mov r8, r8)
 8002ce0:	e006      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002ce2:	46c0      	nop			@ (mov r8, r8)
 8002ce4:	e004      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002ce6:	46c0      	nop			@ (mov r8, r8)
 8002ce8:	e002      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002cea:	46c0      	nop			@ (mov r8, r8)
 8002cec:	e000      	b.n	8002cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        break;
 8002cee:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return (frequency);
 8002cf0:	69fb      	ldr	r3, [r7, #28]
}
 8002cf2:	0018      	movs	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	b009      	add	sp, #36	@ 0x24
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	02dc6c00 	.word	0x02dc6c00
 8002d08:	080046d8 	.word	0x080046d8

08002d0c <HAL_RCCEx_GetPLLClockFreq>:
  * @param  PLL_Clocks structure.
  * @retval None
  */

void HAL_RCCEx_GetPLLClockFreq(PLL_ClocksTypeDef *PLL_Clocks)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b088      	sub	sp, #32
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t pllm;
  uint32_t plln;
  uint32_t pllvco;
  uint32_t msirange;

  plln = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d14:	4b58      	ldr	r3, [pc, #352]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	0a1b      	lsrs	r3, r3, #8
 8002d1a:	227f      	movs	r2, #127	@ 0x7f
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	617b      	str	r3, [r7, #20]
  pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002d20:	4b55      	ldr	r3, [pc, #340]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2203      	movs	r2, #3
 8002d26:	4013      	ands	r3, r2
 8002d28:	613b      	str	r3, [r7, #16]
  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U;
 8002d2a:	4b53      	ldr	r3, [pc, #332]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	091b      	lsrs	r3, r3, #4
 8002d30:	2207      	movs	r2, #7
 8002d32:	4013      	ands	r3, r2
 8002d34:	3301      	adds	r3, #1
 8002d36:	60fb      	str	r3, [r7, #12]
  msirange = (__HAL_RCC_GET_MSI_RANGE() >> 4U);
 8002d38:	4b4f      	ldr	r3, [pc, #316]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d005      	beq.n	8002d4e <HAL_RCCEx_GetPLLClockFreq+0x42>
 8002d42:	4b4d      	ldr	r3, [pc, #308]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	091b      	lsrs	r3, r3, #4
 8002d48:	220f      	movs	r2, #15
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	e005      	b.n	8002d5a <HAL_RCCEx_GetPLLClockFreq+0x4e>
 8002d4e:	4a4a      	ldr	r2, [pc, #296]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002d50:	2394      	movs	r3, #148	@ 0x94
 8002d52:	58d3      	ldr	r3, [r2, r3]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	220f      	movs	r2, #15
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
  if (msirange > 11U)
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	2b0b      	cmp	r3, #11
 8002d60:	d901      	bls.n	8002d66 <HAL_RCCEx_GetPLLClockFreq+0x5a>
  {
    msirange = 11U;
 8002d62:	230b      	movs	r3, #11
 8002d64:	61bb      	str	r3, [r7, #24]
  }
  switch (pllsource)
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b03      	cmp	r3, #3
 8002d6a:	d020      	beq.n	8002dae <HAL_RCCEx_GetPLLClockFreq+0xa2>
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d827      	bhi.n	8002dc2 <HAL_RCCEx_GetPLLClockFreq+0xb6>
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	2b01      	cmp	r3, #1
 8002d76:	d00c      	beq.n	8002d92 <HAL_RCCEx_GetPLLClockFreq+0x86>
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d121      	bne.n	8002dc2 <HAL_RCCEx_GetPLLClockFreq+0xb6>
  {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * plln;
 8002d7e:	68f9      	ldr	r1, [r7, #12]
 8002d80:	483e      	ldr	r0, [pc, #248]	@ (8002e7c <HAL_RCCEx_GetPLLClockFreq+0x170>)
 8002d82:	f7fd f9c1 	bl	8000108 <__udivsi3>
 8002d86:	0003      	movs	r3, r0
 8002d88:	001a      	movs	r2, r3
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	4353      	muls	r3, r2
 8002d8e:	61fb      	str	r3, [r7, #28]
      break;
 8002d90:	e025      	b.n	8002dde <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8002d92:	4b3b      	ldr	r3, [pc, #236]	@ (8002e80 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	0092      	lsls	r2, r2, #2
 8002d98:	58d3      	ldr	r3, [r2, r3]
 8002d9a:	68f9      	ldr	r1, [r7, #12]
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	f7fd f9b3 	bl	8000108 <__udivsi3>
 8002da2:	0003      	movs	r3, r0
 8002da4:	001a      	movs	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	4353      	muls	r3, r2
 8002daa:	61fb      	str	r3, [r7, #28]
      break;
 8002dac:	e017      	b.n	8002dde <HAL_RCCEx_GetPLLClockFreq+0xd2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * plln;
 8002dae:	68f9      	ldr	r1, [r7, #12]
 8002db0:	4834      	ldr	r0, [pc, #208]	@ (8002e84 <HAL_RCCEx_GetPLLClockFreq+0x178>)
 8002db2:	f7fd f9a9 	bl	8000108 <__udivsi3>
 8002db6:	0003      	movs	r3, r0
 8002db8:	001a      	movs	r2, r3
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	4353      	muls	r3, r2
 8002dbe:	61fb      	str	r3, [r7, #28]
      break;
 8002dc0:	e00d      	b.n	8002dde <HAL_RCCEx_GetPLLClockFreq+0xd2>

    default:
      pllvco = ((MSIRangeTable[msirange] / pllm) * plln);
 8002dc2:	4b2f      	ldr	r3, [pc, #188]	@ (8002e80 <HAL_RCCEx_GetPLLClockFreq+0x174>)
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	0092      	lsls	r2, r2, #2
 8002dc8:	58d3      	ldr	r3, [r2, r3]
 8002dca:	68f9      	ldr	r1, [r7, #12]
 8002dcc:	0018      	movs	r0, r3
 8002dce:	f7fd f99b 	bl	8000108 <__udivsi3>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	4353      	muls	r3, r2
 8002dda:	61fb      	str	r3, [r7, #28]
      break;
 8002ddc:	46c0      	nop			@ (mov r8, r8)
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVP) != 0U)
 8002dde:	4b26      	ldr	r3, [pc, #152]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002de0:	68da      	ldr	r2, [r3, #12]
 8002de2:	2380      	movs	r3, #128	@ 0x80
 8002de4:	025b      	lsls	r3, r3, #9
 8002de6:	4013      	ands	r3, r2
 8002de8:	d00e      	beq.n	8002e08 <HAL_RCCEx_GetPLLClockFreq+0xfc>
  {
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8002dea:	4b23      	ldr	r3, [pc, #140]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002dec:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLP_Pos) + 1U));
 8002dee:	0c5b      	lsrs	r3, r3, #17
 8002df0:	221f      	movs	r2, #31
 8002df2:	4013      	ands	r3, r2
 8002df4:	3301      	adds	r3, #1
    PLL_Clocks->PLL_P_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) \
 8002df6:	0019      	movs	r1, r3
 8002df8:	69f8      	ldr	r0, [r7, #28]
 8002dfa:	f7fd f985 	bl	8000108 <__udivsi3>
 8002dfe:	0003      	movs	r3, r0
 8002e00:	001a      	movs	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	e002      	b.n	8002e0e <HAL_RCCEx_GetPLLClockFreq+0x102>
  }
  else
  {
    PLL_Clocks->PLL_P_Frequency = 0;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	601a      	str	r2, [r3, #0]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVQ) != 0U)
 8002e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002e10:	68da      	ldr	r2, [r3, #12]
 8002e12:	2380      	movs	r3, #128	@ 0x80
 8002e14:	045b      	lsls	r3, r3, #17
 8002e16:	4013      	ands	r3, r2
 8002e18:	d00e      	beq.n	8002e38 <HAL_RCCEx_GetPLLClockFreq+0x12c>
  {
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8002e1a:	4b17      	ldr	r3, [pc, #92]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLQ_Pos) + 1U));
 8002e1e:	0e5b      	lsrs	r3, r3, #25
 8002e20:	2207      	movs	r2, #7
 8002e22:	4013      	ands	r3, r2
 8002e24:	3301      	adds	r3, #1
    PLL_Clocks->PLL_Q_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) \
 8002e26:	0019      	movs	r1, r3
 8002e28:	69f8      	ldr	r0, [r7, #28]
 8002e2a:	f7fd f96d 	bl	8000108 <__udivsi3>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	001a      	movs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	605a      	str	r2, [r3, #4]
 8002e36:	e002      	b.n	8002e3e <HAL_RCCEx_GetPLLClockFreq+0x132>
  }
  else
  {
    PLL_Clocks->PLL_Q_Frequency = 0;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	605a      	str	r2, [r3, #4]
  }

  if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_DIVR) != 0U)
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	2380      	movs	r3, #128	@ 0x80
 8002e44:	055b      	lsls	r3, r3, #21
 8002e46:	4013      	ands	r3, r2
 8002e48:	d00e      	beq.n	8002e68 <HAL_RCCEx_GetPLLClockFreq+0x15c>
  {
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8002e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e78 <HAL_RCCEx_GetPLLClockFreq+0x16c>)
 8002e4c:	68db      	ldr	r3, [r3, #12]
                                                        >> RCC_PLLCFGR_PLLR_Pos) + 1U));
 8002e4e:	0f5b      	lsrs	r3, r3, #29
 8002e50:	2207      	movs	r2, #7
 8002e52:	4013      	ands	r3, r2
 8002e54:	3301      	adds	r3, #1
    PLL_Clocks->PLL_R_Frequency = (uint32_t)(pllvco / (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) \
 8002e56:	0019      	movs	r1, r3
 8002e58:	69f8      	ldr	r0, [r7, #28]
 8002e5a:	f7fd f955 	bl	8000108 <__udivsi3>
 8002e5e:	0003      	movs	r3, r0
 8002e60:	001a      	movs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	609a      	str	r2, [r3, #8]
  }
  else
  {
    PLL_Clocks->PLL_R_Frequency = 0;
  }
}
 8002e66:	e002      	b.n	8002e6e <HAL_RCCEx_GetPLLClockFreq+0x162>
    PLL_Clocks->PLL_R_Frequency = 0;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b008      	add	sp, #32
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			@ (mov r8, r8)
 8002e78:	40021000 	.word	0x40021000
 8002e7c:	00f42400 	.word	0x00f42400
 8002e80:	080046d8 	.word	0x080046d8
 8002e84:	003d0900 	.word	0x003d0900

08002e88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002e90:	210f      	movs	r1, #15
 8002e92:	187b      	adds	r3, r7, r1
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d100      	bne.n	8002ea0 <HAL_RTC_Init+0x18>
 8002e9e:	e08b      	b.n	8002fb8 <HAL_RTC_Init+0x130>
  {
    status = HAL_OK;
 8002ea0:	187b      	adds	r3, r7, r1
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	222d      	movs	r2, #45	@ 0x2d
 8002eaa:	5c9b      	ldrb	r3, [r3, r2]
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d107      	bne.n	8002ec2 <HAL_RTC_Init+0x3a>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	222c      	movs	r2, #44	@ 0x2c
 8002eb6:	2100      	movs	r1, #0
 8002eb8:	5499      	strb	r1, [r3, r2]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	0018      	movs	r0, r3
 8002ebe:	f7fd fe93 	bl	8000be8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	222d      	movs	r2, #45	@ 0x2d
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	5499      	strb	r1, [r3, r2]

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002eca:	4b3f      	ldr	r3, [pc, #252]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002ecc:	22ca      	movs	r2, #202	@ 0xca
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ed0:	4b3d      	ldr	r3, [pc, #244]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002ed2:	2253      	movs	r2, #83	@ 0x53
 8002ed4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0018      	movs	r0, r3
 8002eda:	f000 f8a1 	bl	8003020 <RTC_EnterInitMode>
 8002ede:	1e03      	subs	r3, r0, #0
 8002ee0:	d00b      	beq.n	8002efa <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ee2:	4b39      	ldr	r3, [pc, #228]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002ee4:	22ff      	movs	r2, #255	@ 0xff
 8002ee6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	222d      	movs	r2, #45	@ 0x2d
 8002eec:	2104      	movs	r1, #4
 8002eee:	5499      	strb	r1, [r3, r2]

      status = HAL_ERROR;
 8002ef0:	230f      	movs	r3, #15
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	e05e      	b.n	8002fb8 <HAL_RTC_Init+0x130>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8002efa:	4b33      	ldr	r3, [pc, #204]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002efc:	699a      	ldr	r2, [r3, #24]
 8002efe:	4b32      	ldr	r3, [pc, #200]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002f00:	4932      	ldr	r1, [pc, #200]	@ (8002fcc <HAL_RTC_Init+0x144>)
 8002f02:	400a      	ands	r2, r1
 8002f04:	619a      	str	r2, [r3, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002f06:	4b30      	ldr	r3, [pc, #192]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002f08:	6999      	ldr	r1, [r3, #24]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	699b      	ldr	r3, [r3, #24]
 8002f18:	431a      	orrs	r2, r3
 8002f1a:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	619a      	str	r2, [r3, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	68d9      	ldr	r1, [r3, #12]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	041a      	lsls	r2, r3, #16
 8002f2a:	4b27      	ldr	r3, [pc, #156]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	611a      	str	r2, [r3, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8002f30:	4b25      	ldr	r3, [pc, #148]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4a26      	ldr	r2, [pc, #152]	@ (8002fd0 <HAL_RTC_Init+0x148>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	0019      	movs	r1, r3
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f42:	431a      	orrs	r2, r3
 8002f44:	4b20      	ldr	r3, [pc, #128]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002f46:	430a      	orrs	r2, r1
 8002f48:	60da      	str	r2, [r3, #12]

      /* Exit Initialization mode */
      CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002f50:	2180      	movs	r1, #128	@ 0x80
 8002f52:	438a      	bics	r2, r1
 8002f54:	60da      	str	r2, [r3, #12]

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002f56:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	d110      	bne.n	8002f82 <HAL_RTC_Init+0xfa>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 f836 	bl	8002fd4 <HAL_RTC_WaitForSynchro>
 8002f68:	1e03      	subs	r3, r0, #0
 8002f6a:	d00a      	beq.n	8002f82 <HAL_RTC_Init+0xfa>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f6c:	4b16      	ldr	r3, [pc, #88]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002f6e:	22ff      	movs	r2, #255	@ 0xff
 8002f70:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	222d      	movs	r2, #45	@ 0x2d
 8002f76:	2104      	movs	r1, #4
 8002f78:	5499      	strb	r1, [r3, r2]
          status = HAL_ERROR;
 8002f7a:	230f      	movs	r3, #15
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	2201      	movs	r2, #1
 8002f80:	701a      	strb	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8002f82:	230f      	movs	r3, #15
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d115      	bne.n	8002fb8 <HAL_RTC_Init+0x130>
      {
        MODIFY_REG(RTC->CR, \
 8002f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	08d9      	lsrs	r1, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a1a      	ldr	r2, [r3, #32]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69db      	ldr	r3, [r3, #28]
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	431a      	orrs	r2, r3
 8002fa4:	4b08      	ldr	r3, [pc, #32]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002faa:	4b07      	ldr	r3, [pc, #28]	@ (8002fc8 <HAL_RTC_Init+0x140>)
 8002fac:	22ff      	movs	r2, #255	@ 0xff
 8002fae:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	222d      	movs	r2, #45	@ 0x2d
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	5499      	strb	r1, [r3, r2]
      }
    }
  }

  return status;
 8002fb8:	230f      	movs	r3, #15
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	781b      	ldrb	r3, [r3, #0]
}
 8002fbe:	0018      	movs	r0, r3
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	b004      	add	sp, #16
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			@ (mov r8, r8)
 8002fc8:	40002800 	.word	0x40002800
 8002fcc:	fb8fffbf 	.word	0xfb8fffbf
 8002fd0:	ffffe0ff 	.word	0xffffe0ff

08002fd4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(const RTC_HandleTypeDef *hrtc)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800301c <HAL_RTC_WaitForSynchro+0x48>)
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800301c <HAL_RTC_WaitForSynchro+0x48>)
 8002fe2:	2120      	movs	r1, #32
 8002fe4:	438a      	bics	r2, r1
 8002fe6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002fe8:	f7fd ffd4 	bl	8000f94 <HAL_GetTick>
 8002fec:	0003      	movs	r3, r0
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002ff0:	e00a      	b.n	8003008 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002ff2:	f7fd ffcf 	bl	8000f94 <HAL_GetTick>
 8002ff6:	0002      	movs	r2, r0
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1ad2      	subs	r2, r2, r3
 8002ffc:	23fa      	movs	r3, #250	@ 0xfa
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	429a      	cmp	r2, r3
 8003002:	d901      	bls.n	8003008 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e005      	b.n	8003014 <HAL_RTC_WaitForSynchro+0x40>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003008:	4b04      	ldr	r3, [pc, #16]	@ (800301c <HAL_RTC_WaitForSynchro+0x48>)
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	2220      	movs	r2, #32
 800300e:	4013      	ands	r3, r2
 8003010:	d0ef      	beq.n	8002ff2 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b004      	add	sp, #16
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40002800 	.word	0x40002800

08003020 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(const RTC_HandleTypeDef *hrtc)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003028:	4b12      	ldr	r3, [pc, #72]	@ (8003074 <RTC_EnterInitMode+0x54>)
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	2240      	movs	r2, #64	@ 0x40
 800302e:	4013      	ands	r3, r2
 8003030:	d11a      	bne.n	8003068 <RTC_EnterInitMode+0x48>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003032:	4b10      	ldr	r3, [pc, #64]	@ (8003074 <RTC_EnterInitMode+0x54>)
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <RTC_EnterInitMode+0x54>)
 8003038:	2180      	movs	r1, #128	@ 0x80
 800303a:	430a      	orrs	r2, r1
 800303c:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800303e:	f7fd ffa9 	bl	8000f94 <HAL_GetTick>
 8003042:	0003      	movs	r3, r0
 8003044:	60fb      	str	r3, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003046:	e00a      	b.n	800305e <RTC_EnterInitMode+0x3e>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003048:	f7fd ffa4 	bl	8000f94 <HAL_GetTick>
 800304c:	0002      	movs	r2, r0
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1ad2      	subs	r2, r2, r3
 8003052:	23fa      	movs	r3, #250	@ 0xfa
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	429a      	cmp	r2, r3
 8003058:	d901      	bls.n	800305e <RTC_EnterInitMode+0x3e>
      {
        return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e005      	b.n	800306a <RTC_EnterInitMode+0x4a>
    while (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800305e:	4b05      	ldr	r3, [pc, #20]	@ (8003074 <RTC_EnterInitMode+0x54>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2240      	movs	r2, #64	@ 0x40
 8003064:	4013      	ands	r3, r2
 8003066:	d0ef      	beq.n	8003048 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	0018      	movs	r0, r3
 800306c:	46bd      	mov	sp, r7
 800306e:	b004      	add	sp, #16
 8003070:	bd80      	pop	{r7, pc}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	40002800 	.word	0x40002800

08003078 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0a0      	b.n	80031cc <HAL_SPI_Init+0x154>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	2382      	movs	r3, #130	@ 0x82
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	429a      	cmp	r2, r3
 800309c:	d009      	beq.n	80030b2 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	61da      	str	r2, [r3, #28]
 80030a4:	e005      	b.n	80030b2 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2200      	movs	r2, #0
 80030b0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	225d      	movs	r2, #93	@ 0x5d
 80030bc:	5c9b      	ldrb	r3, [r3, r2]
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d107      	bne.n	80030d4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	225c      	movs	r2, #92	@ 0x5c
 80030c8:	2100      	movs	r1, #0
 80030ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f7fd fdca 	bl	8000c68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	225d      	movs	r2, #93	@ 0x5d
 80030d8:	2102      	movs	r1, #2
 80030da:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2140      	movs	r1, #64	@ 0x40
 80030e8:	438a      	bics	r2, r1
 80030ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	23e0      	movs	r3, #224	@ 0xe0
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d902      	bls.n	80030fe <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80030f8:	2300      	movs	r3, #0
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	e002      	b.n	8003104 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80030fe:	2380      	movs	r3, #128	@ 0x80
 8003100:	015b      	lsls	r3, r3, #5
 8003102:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	23f0      	movs	r3, #240	@ 0xf0
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	429a      	cmp	r2, r3
 800310e:	d008      	beq.n	8003122 <HAL_SPI_Init+0xaa>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	23e0      	movs	r3, #224	@ 0xe0
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	429a      	cmp	r2, r3
 800311a:	d002      	beq.n	8003122 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	2382      	movs	r3, #130	@ 0x82
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	401a      	ands	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6899      	ldr	r1, [r3, #8]
 8003130:	2384      	movs	r3, #132	@ 0x84
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	400b      	ands	r3, r1
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	2102      	movs	r1, #2
 800313e:	400b      	ands	r3, r1
 8003140:	431a      	orrs	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	695b      	ldr	r3, [r3, #20]
 8003146:	2101      	movs	r1, #1
 8003148:	400b      	ands	r3, r1
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6999      	ldr	r1, [r3, #24]
 8003150:	2380      	movs	r3, #128	@ 0x80
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	400b      	ands	r3, r1
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	69db      	ldr	r3, [r3, #28]
 800315c:	2138      	movs	r1, #56	@ 0x38
 800315e:	400b      	ands	r3, r1
 8003160:	431a      	orrs	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	2180      	movs	r1, #128	@ 0x80
 8003168:	400b      	ands	r3, r1
 800316a:	431a      	orrs	r2, r3
 800316c:	0011      	movs	r1, r2
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003172:	2380      	movs	r3, #128	@ 0x80
 8003174:	019b      	lsls	r3, r3, #6
 8003176:	401a      	ands	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	430a      	orrs	r2, r1
 800317e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	0c1b      	lsrs	r3, r3, #16
 8003186:	2204      	movs	r2, #4
 8003188:	401a      	ands	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318e:	2110      	movs	r1, #16
 8003190:	400b      	ands	r3, r1
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003198:	2108      	movs	r1, #8
 800319a:	400b      	ands	r3, r1
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68d9      	ldr	r1, [r3, #12]
 80031a2:	23f0      	movs	r3, #240	@ 0xf0
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	400b      	ands	r3, r1
 80031a8:	431a      	orrs	r2, r3
 80031aa:	0011      	movs	r1, r2
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	2380      	movs	r3, #128	@ 0x80
 80031b0:	015b      	lsls	r3, r3, #5
 80031b2:	401a      	ands	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	225d      	movs	r2, #93	@ 0x5d
 80031c6:	2101      	movs	r1, #1
 80031c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b004      	add	sp, #16
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e04a      	b.n	800327c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	223d      	movs	r2, #61	@ 0x3d
 80031ea:	5c9b      	ldrb	r3, [r3, r2]
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d107      	bne.n	8003202 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	223c      	movs	r2, #60	@ 0x3c
 80031f6:	2100      	movs	r1, #0
 80031f8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7fd fdb9 	bl	8000d74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	223d      	movs	r2, #61	@ 0x3d
 8003206:	2102      	movs	r1, #2
 8003208:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	3304      	adds	r3, #4
 8003212:	0019      	movs	r1, r3
 8003214:	0010      	movs	r0, r2
 8003216:	f000 f935 	bl	8003484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2248      	movs	r2, #72	@ 0x48
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	223e      	movs	r2, #62	@ 0x3e
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	223f      	movs	r2, #63	@ 0x3f
 800322e:	2101      	movs	r1, #1
 8003230:	5499      	strb	r1, [r3, r2]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2240      	movs	r2, #64	@ 0x40
 8003236:	2101      	movs	r1, #1
 8003238:	5499      	strb	r1, [r3, r2]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2241      	movs	r2, #65	@ 0x41
 800323e:	2101      	movs	r1, #1
 8003240:	5499      	strb	r1, [r3, r2]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2242      	movs	r2, #66	@ 0x42
 8003246:	2101      	movs	r1, #1
 8003248:	5499      	strb	r1, [r3, r2]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2243      	movs	r2, #67	@ 0x43
 800324e:	2101      	movs	r1, #1
 8003250:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2244      	movs	r2, #68	@ 0x44
 8003256:	2101      	movs	r1, #1
 8003258:	5499      	strb	r1, [r3, r2]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2245      	movs	r2, #69	@ 0x45
 800325e:	2101      	movs	r1, #1
 8003260:	5499      	strb	r1, [r3, r2]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2246      	movs	r2, #70	@ 0x46
 8003266:	2101      	movs	r1, #1
 8003268:	5499      	strb	r1, [r3, r2]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2247      	movs	r2, #71	@ 0x47
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	223d      	movs	r2, #61	@ 0x3d
 8003276:	2101      	movs	r1, #1
 8003278:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800327a:	2300      	movs	r3, #0
}
 800327c:	0018      	movs	r0, r3
 800327e:	46bd      	mov	sp, r7
 8003280:	b002      	add	sp, #8
 8003282:	bd80      	pop	{r7, pc}

08003284 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	60f8      	str	r0, [r7, #12]
 800328c:	60b9      	str	r1, [r7, #8]
 800328e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003290:	2317      	movs	r3, #23
 8003292:	18fb      	adds	r3, r7, r3
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	223c      	movs	r2, #60	@ 0x3c
 800329c:	5c9b      	ldrb	r3, [r3, r2]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80032a2:	2302      	movs	r3, #2
 80032a4:	e0e5      	b.n	8003472 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	223c      	movs	r2, #60	@ 0x3c
 80032aa:	2101      	movs	r1, #1
 80032ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b14      	cmp	r3, #20
 80032b2:	d900      	bls.n	80032b6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80032b4:	e0d1      	b.n	800345a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	009a      	lsls	r2, r3, #2
 80032ba:	4b70      	ldr	r3, [pc, #448]	@ (800347c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80032bc:	18d3      	adds	r3, r2, r3
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68ba      	ldr	r2, [r7, #8]
 80032c8:	0011      	movs	r1, r2
 80032ca:	0018      	movs	r0, r3
 80032cc:	f000 f958 	bl	8003580 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2108      	movs	r1, #8
 80032dc:	430a      	orrs	r2, r1
 80032de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699a      	ldr	r2, [r3, #24]
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2104      	movs	r1, #4
 80032ec:	438a      	bics	r2, r1
 80032ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6999      	ldr	r1, [r3, #24]
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	619a      	str	r2, [r3, #24]
      break;
 8003302:	e0af      	b.n	8003464 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	0011      	movs	r1, r2
 800330c:	0018      	movs	r0, r3
 800330e:	f000 f9b7 	bl	8003680 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2180      	movs	r1, #128	@ 0x80
 800331e:	0109      	lsls	r1, r1, #4
 8003320:	430a      	orrs	r2, r1
 8003322:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699a      	ldr	r2, [r3, #24]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4954      	ldr	r1, [pc, #336]	@ (8003480 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003330:	400a      	ands	r2, r1
 8003332:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	6999      	ldr	r1, [r3, #24]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	691b      	ldr	r3, [r3, #16]
 800333e:	021a      	lsls	r2, r3, #8
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	430a      	orrs	r2, r1
 8003346:	619a      	str	r2, [r3, #24]
      break;
 8003348:	e08c      	b.n	8003464 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68ba      	ldr	r2, [r7, #8]
 8003350:	0011      	movs	r1, r2
 8003352:	0018      	movs	r0, r3
 8003354:	f000 fa12 	bl	800377c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	69da      	ldr	r2, [r3, #28]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2108      	movs	r1, #8
 8003364:	430a      	orrs	r2, r1
 8003366:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2104      	movs	r1, #4
 8003374:	438a      	bics	r2, r1
 8003376:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69d9      	ldr	r1, [r3, #28]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	430a      	orrs	r2, r1
 8003388:	61da      	str	r2, [r3, #28]
      break;
 800338a:	e06b      	b.n	8003464 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	0011      	movs	r1, r2
 8003394:	0018      	movs	r0, r3
 8003396:	f000 fa73 	bl	8003880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2180      	movs	r1, #128	@ 0x80
 80033a6:	0109      	lsls	r1, r1, #4
 80033a8:	430a      	orrs	r2, r1
 80033aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69da      	ldr	r2, [r3, #28]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4932      	ldr	r1, [pc, #200]	@ (8003480 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	69d9      	ldr	r1, [r3, #28]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	021a      	lsls	r2, r3, #8
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	61da      	str	r2, [r3, #28]
      break;
 80033d0:	e048      	b.n	8003464 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68ba      	ldr	r2, [r7, #8]
 80033d8:	0011      	movs	r1, r2
 80033da:	0018      	movs	r0, r3
 80033dc:	f000 fab4 	bl	8003948 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2108      	movs	r1, #8
 80033ec:	430a      	orrs	r2, r1
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2104      	movs	r1, #4
 80033fc:	438a      	bics	r2, r1
 80033fe:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	430a      	orrs	r2, r1
 8003410:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003412:	e027      	b.n	8003464 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	0011      	movs	r1, r2
 800341c:	0018      	movs	r0, r3
 800341e:	f000 faed 	bl	80039fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2180      	movs	r1, #128	@ 0x80
 800342e:	0109      	lsls	r1, r1, #4
 8003430:	430a      	orrs	r2, r1
 8003432:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4910      	ldr	r1, [pc, #64]	@ (8003480 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003440:	400a      	ands	r2, r1
 8003442:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	021a      	lsls	r2, r3, #8
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003458:	e004      	b.n	8003464 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800345a:	2317      	movs	r3, #23
 800345c:	18fb      	adds	r3, r7, r3
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]
      break;
 8003462:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	223c      	movs	r2, #60	@ 0x3c
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]

  return status;
 800346c:	2317      	movs	r3, #23
 800346e:	18fb      	adds	r3, r7, r3
 8003470:	781b      	ldrb	r3, [r3, #0]
}
 8003472:	0018      	movs	r0, r3
 8003474:	46bd      	mov	sp, r7
 8003476:	b006      	add	sp, #24
 8003478:	bd80      	pop	{r7, pc}
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	0800478c 	.word	0x0800478c
 8003480:	fffffbff 	.word	0xfffffbff

08003484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a35      	ldr	r2, [pc, #212]	@ (800356c <TIM_Base_SetConfig+0xe8>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d008      	beq.n	80034ae <TIM_Base_SetConfig+0x2a>
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	2380      	movs	r3, #128	@ 0x80
 80034a0:	05db      	lsls	r3, r3, #23
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d003      	beq.n	80034ae <TIM_Base_SetConfig+0x2a>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a31      	ldr	r2, [pc, #196]	@ (8003570 <TIM_Base_SetConfig+0xec>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d108      	bne.n	80034c0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2270      	movs	r2, #112	@ 0x70
 80034b2:	4393      	bics	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a2a      	ldr	r2, [pc, #168]	@ (800356c <TIM_Base_SetConfig+0xe8>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d010      	beq.n	80034ea <TIM_Base_SetConfig+0x66>
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	2380      	movs	r3, #128	@ 0x80
 80034cc:	05db      	lsls	r3, r3, #23
 80034ce:	429a      	cmp	r2, r3
 80034d0:	d00b      	beq.n	80034ea <TIM_Base_SetConfig+0x66>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a26      	ldr	r2, [pc, #152]	@ (8003570 <TIM_Base_SetConfig+0xec>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d007      	beq.n	80034ea <TIM_Base_SetConfig+0x66>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a25      	ldr	r2, [pc, #148]	@ (8003574 <TIM_Base_SetConfig+0xf0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d003      	beq.n	80034ea <TIM_Base_SetConfig+0x66>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a24      	ldr	r2, [pc, #144]	@ (8003578 <TIM_Base_SetConfig+0xf4>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d108      	bne.n	80034fc <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4a23      	ldr	r2, [pc, #140]	@ (800357c <TIM_Base_SetConfig+0xf8>)
 80034ee:	4013      	ands	r3, r2
 80034f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2280      	movs	r2, #128	@ 0x80
 8003500:	4393      	bics	r3, r2
 8003502:	001a      	movs	r2, r3
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	695b      	ldr	r3, [r3, #20]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	689a      	ldr	r2, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a11      	ldr	r2, [pc, #68]	@ (800356c <TIM_Base_SetConfig+0xe8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d007      	beq.n	800353a <TIM_Base_SetConfig+0xb6>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a11      	ldr	r2, [pc, #68]	@ (8003574 <TIM_Base_SetConfig+0xf0>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d003      	beq.n	800353a <TIM_Base_SetConfig+0xb6>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a10      	ldr	r2, [pc, #64]	@ (8003578 <TIM_Base_SetConfig+0xf4>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d103      	bne.n	8003542 <TIM_Base_SetConfig+0xbe>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	691a      	ldr	r2, [r3, #16]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2201      	movs	r2, #1
 8003546:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	2201      	movs	r2, #1
 800354e:	4013      	ands	r3, r2
 8003550:	2b01      	cmp	r3, #1
 8003552:	d106      	bne.n	8003562 <TIM_Base_SetConfig+0xde>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	2201      	movs	r2, #1
 800355a:	4393      	bics	r3, r2
 800355c:	001a      	movs	r2, r3
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	611a      	str	r2, [r3, #16]
  }
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b004      	add	sp, #16
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	40012c00 	.word	0x40012c00
 8003570:	40000400 	.word	0x40000400
 8003574:	40014000 	.word	0x40014000
 8003578:	40014400 	.word	0x40014400
 800357c:	fffffcff 	.word	0xfffffcff

08003580 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a1b      	ldr	r3, [r3, #32]
 800358e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a1b      	ldr	r3, [r3, #32]
 8003594:	2201      	movs	r2, #1
 8003596:	4393      	bics	r3, r2
 8003598:	001a      	movs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003668 <TIM_OC1_SetConfig+0xe8>)
 80035ae:	4013      	ands	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2203      	movs	r2, #3
 80035b6:	4393      	bics	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2202      	movs	r2, #2
 80035c8:	4393      	bics	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a24      	ldr	r2, [pc, #144]	@ (800366c <TIM_OC1_SetConfig+0xec>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d007      	beq.n	80035ee <TIM_OC1_SetConfig+0x6e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a23      	ldr	r2, [pc, #140]	@ (8003670 <TIM_OC1_SetConfig+0xf0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d003      	beq.n	80035ee <TIM_OC1_SetConfig+0x6e>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a22      	ldr	r2, [pc, #136]	@ (8003674 <TIM_OC1_SetConfig+0xf4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d10c      	bne.n	8003608 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	2208      	movs	r2, #8
 80035f2:	4393      	bics	r3, r2
 80035f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	697a      	ldr	r2, [r7, #20]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2204      	movs	r2, #4
 8003604:	4393      	bics	r3, r2
 8003606:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a18      	ldr	r2, [pc, #96]	@ (800366c <TIM_OC1_SetConfig+0xec>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d007      	beq.n	8003620 <TIM_OC1_SetConfig+0xa0>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a17      	ldr	r2, [pc, #92]	@ (8003670 <TIM_OC1_SetConfig+0xf0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d003      	beq.n	8003620 <TIM_OC1_SetConfig+0xa0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a16      	ldr	r2, [pc, #88]	@ (8003674 <TIM_OC1_SetConfig+0xf4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d111      	bne.n	8003644 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4a15      	ldr	r2, [pc, #84]	@ (8003678 <TIM_OC1_SetConfig+0xf8>)
 8003624:	4013      	ands	r3, r2
 8003626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4a14      	ldr	r2, [pc, #80]	@ (800367c <TIM_OC1_SetConfig+0xfc>)
 800362c:	4013      	ands	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	699b      	ldr	r3, [r3, #24]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	4313      	orrs	r3, r2
 8003642:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	621a      	str	r2, [r3, #32]
}
 800365e:	46c0      	nop			@ (mov r8, r8)
 8003660:	46bd      	mov	sp, r7
 8003662:	b006      	add	sp, #24
 8003664:	bd80      	pop	{r7, pc}
 8003666:	46c0      	nop			@ (mov r8, r8)
 8003668:	fffeff8f 	.word	0xfffeff8f
 800366c:	40012c00 	.word	0x40012c00
 8003670:	40014000 	.word	0x40014000
 8003674:	40014400 	.word	0x40014400
 8003678:	fffffeff 	.word	0xfffffeff
 800367c:	fffffdff 	.word	0xfffffdff

08003680 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1b      	ldr	r3, [r3, #32]
 800368e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	2210      	movs	r2, #16
 8003696:	4393      	bics	r3, r2
 8003698:	001a      	movs	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	699b      	ldr	r3, [r3, #24]
 80036a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003760 <TIM_OC2_SetConfig+0xe0>)
 80036ae:	4013      	ands	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a2b      	ldr	r2, [pc, #172]	@ (8003764 <TIM_OC2_SetConfig+0xe4>)
 80036b6:	4013      	ands	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	021b      	lsls	r3, r3, #8
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4313      	orrs	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2220      	movs	r2, #32
 80036ca:	4393      	bics	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a22      	ldr	r2, [pc, #136]	@ (8003768 <TIM_OC2_SetConfig+0xe8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d10d      	bne.n	80036fe <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2280      	movs	r2, #128	@ 0x80
 80036e6:	4393      	bics	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036f6:	697b      	ldr	r3, [r7, #20]
 80036f8:	2240      	movs	r2, #64	@ 0x40
 80036fa:	4393      	bics	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a19      	ldr	r2, [pc, #100]	@ (8003768 <TIM_OC2_SetConfig+0xe8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d007      	beq.n	8003716 <TIM_OC2_SetConfig+0x96>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a18      	ldr	r2, [pc, #96]	@ (800376c <TIM_OC2_SetConfig+0xec>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d003      	beq.n	8003716 <TIM_OC2_SetConfig+0x96>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a17      	ldr	r2, [pc, #92]	@ (8003770 <TIM_OC2_SetConfig+0xf0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d113      	bne.n	800373e <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4a16      	ldr	r2, [pc, #88]	@ (8003774 <TIM_OC2_SetConfig+0xf4>)
 800371a:	4013      	ands	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	4a15      	ldr	r2, [pc, #84]	@ (8003778 <TIM_OC2_SetConfig+0xf8>)
 8003722:	4013      	ands	r3, r2
 8003724:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	621a      	str	r2, [r3, #32]
}
 8003758:	46c0      	nop			@ (mov r8, r8)
 800375a:	46bd      	mov	sp, r7
 800375c:	b006      	add	sp, #24
 800375e:	bd80      	pop	{r7, pc}
 8003760:	feff8fff 	.word	0xfeff8fff
 8003764:	fffffcff 	.word	0xfffffcff
 8003768:	40012c00 	.word	0x40012c00
 800376c:	40014000 	.word	0x40014000
 8003770:	40014400 	.word	0x40014400
 8003774:	fffffbff 	.word	0xfffffbff
 8003778:	fffff7ff 	.word	0xfffff7ff

0800377c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6a1b      	ldr	r3, [r3, #32]
 800378a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a1b      	ldr	r3, [r3, #32]
 8003790:	4a31      	ldr	r2, [pc, #196]	@ (8003858 <TIM_OC3_SetConfig+0xdc>)
 8003792:	401a      	ands	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a2d      	ldr	r2, [pc, #180]	@ (800385c <TIM_OC3_SetConfig+0xe0>)
 80037a8:	4013      	ands	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2203      	movs	r2, #3
 80037b0:	4393      	bics	r3, r2
 80037b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	4a27      	ldr	r2, [pc, #156]	@ (8003860 <TIM_OC3_SetConfig+0xe4>)
 80037c2:	4013      	ands	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a23      	ldr	r2, [pc, #140]	@ (8003864 <TIM_OC3_SetConfig+0xe8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d10d      	bne.n	80037f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	4a22      	ldr	r2, [pc, #136]	@ (8003868 <TIM_OC3_SetConfig+0xec>)
 80037de:	4013      	ands	r3, r2
 80037e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	021b      	lsls	r3, r3, #8
 80037e8:	697a      	ldr	r2, [r7, #20]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	4a1e      	ldr	r2, [pc, #120]	@ (800386c <TIM_OC3_SetConfig+0xf0>)
 80037f2:	4013      	ands	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003864 <TIM_OC3_SetConfig+0xe8>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d007      	beq.n	800380e <TIM_OC3_SetConfig+0x92>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a1b      	ldr	r2, [pc, #108]	@ (8003870 <TIM_OC3_SetConfig+0xf4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <TIM_OC3_SetConfig+0x92>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a1a      	ldr	r2, [pc, #104]	@ (8003874 <TIM_OC3_SetConfig+0xf8>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d113      	bne.n	8003836 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	4a19      	ldr	r2, [pc, #100]	@ (8003878 <TIM_OC3_SetConfig+0xfc>)
 8003812:	4013      	ands	r3, r2
 8003814:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4a18      	ldr	r2, [pc, #96]	@ (800387c <TIM_OC3_SetConfig+0x100>)
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	695b      	ldr	r3, [r3, #20]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	4313      	orrs	r3, r2
 8003834:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685a      	ldr	r2, [r3, #4]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	697a      	ldr	r2, [r7, #20]
 800384e:	621a      	str	r2, [r3, #32]
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b006      	add	sp, #24
 8003856:	bd80      	pop	{r7, pc}
 8003858:	fffffeff 	.word	0xfffffeff
 800385c:	fffeff8f 	.word	0xfffeff8f
 8003860:	fffffdff 	.word	0xfffffdff
 8003864:	40012c00 	.word	0x40012c00
 8003868:	fffff7ff 	.word	0xfffff7ff
 800386c:	fffffbff 	.word	0xfffffbff
 8003870:	40014000 	.word	0x40014000
 8003874:	40014400 	.word	0x40014400
 8003878:	ffffefff 	.word	0xffffefff
 800387c:	ffffdfff 	.word	0xffffdfff

08003880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a1b      	ldr	r3, [r3, #32]
 800388e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	4a24      	ldr	r2, [pc, #144]	@ (8003928 <TIM_OC4_SetConfig+0xa8>)
 8003896:	401a      	ands	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a20      	ldr	r2, [pc, #128]	@ (800392c <TIM_OC4_SetConfig+0xac>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003930 <TIM_OC4_SetConfig+0xb0>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	021b      	lsls	r3, r3, #8
 80038be:	68fa      	ldr	r2, [r7, #12]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4a1b      	ldr	r2, [pc, #108]	@ (8003934 <TIM_OC4_SetConfig+0xb4>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	031b      	lsls	r3, r3, #12
 80038d2:	693a      	ldr	r2, [r7, #16]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a17      	ldr	r2, [pc, #92]	@ (8003938 <TIM_OC4_SetConfig+0xb8>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d007      	beq.n	80038f0 <TIM_OC4_SetConfig+0x70>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a16      	ldr	r2, [pc, #88]	@ (800393c <TIM_OC4_SetConfig+0xbc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d003      	beq.n	80038f0 <TIM_OC4_SetConfig+0x70>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	4a15      	ldr	r2, [pc, #84]	@ (8003940 <TIM_OC4_SetConfig+0xc0>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d109      	bne.n	8003904 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	4a14      	ldr	r2, [pc, #80]	@ (8003944 <TIM_OC4_SetConfig+0xc4>)
 80038f4:	4013      	ands	r3, r2
 80038f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	4313      	orrs	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	697a      	ldr	r2, [r7, #20]
 8003908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	621a      	str	r2, [r3, #32]
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b006      	add	sp, #24
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	ffffefff 	.word	0xffffefff
 800392c:	feff8fff 	.word	0xfeff8fff
 8003930:	fffffcff 	.word	0xfffffcff
 8003934:	ffffdfff 	.word	0xffffdfff
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40014000 	.word	0x40014000
 8003940:	40014400 	.word	0x40014400
 8003944:	ffffbfff 	.word	0xffffbfff

08003948 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a1b      	ldr	r3, [r3, #32]
 800395c:	4a21      	ldr	r2, [pc, #132]	@ (80039e4 <TIM_OC5_SetConfig+0x9c>)
 800395e:	401a      	ands	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4a1d      	ldr	r2, [pc, #116]	@ (80039e8 <TIM_OC5_SetConfig+0xa0>)
 8003974:	4013      	ands	r3, r2
 8003976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4a19      	ldr	r2, [pc, #100]	@ (80039ec <TIM_OC5_SetConfig+0xa4>)
 8003986:	4013      	ands	r3, r2
 8003988:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	041b      	lsls	r3, r3, #16
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	4313      	orrs	r3, r2
 8003994:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a15      	ldr	r2, [pc, #84]	@ (80039f0 <TIM_OC5_SetConfig+0xa8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d007      	beq.n	80039ae <TIM_OC5_SetConfig+0x66>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a14      	ldr	r2, [pc, #80]	@ (80039f4 <TIM_OC5_SetConfig+0xac>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d003      	beq.n	80039ae <TIM_OC5_SetConfig+0x66>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a13      	ldr	r2, [pc, #76]	@ (80039f8 <TIM_OC5_SetConfig+0xb0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d109      	bne.n	80039c2 <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	4a0c      	ldr	r2, [pc, #48]	@ (80039e4 <TIM_OC5_SetConfig+0x9c>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	021b      	lsls	r3, r3, #8
 80039bc:	697a      	ldr	r2, [r7, #20]
 80039be:	4313      	orrs	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	621a      	str	r2, [r3, #32]
}
 80039dc:	46c0      	nop			@ (mov r8, r8)
 80039de:	46bd      	mov	sp, r7
 80039e0:	b006      	add	sp, #24
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	fffeffff 	.word	0xfffeffff
 80039e8:	fffeff8f 	.word	0xfffeff8f
 80039ec:	fffdffff 	.word	0xfffdffff
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40014000 	.word	0x40014000
 80039f8:	40014400 	.word	0x40014400

080039fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b086      	sub	sp, #24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a1b      	ldr	r3, [r3, #32]
 8003a10:	4a22      	ldr	r2, [pc, #136]	@ (8003a9c <TIM_OC6_SetConfig+0xa0>)
 8003a12:	401a      	ands	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4a1e      	ldr	r2, [pc, #120]	@ (8003aa0 <TIM_OC6_SetConfig+0xa4>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	021b      	lsls	r3, r3, #8
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa4 <TIM_OC6_SetConfig+0xa8>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	051b      	lsls	r3, r3, #20
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a16      	ldr	r2, [pc, #88]	@ (8003aa8 <TIM_OC6_SetConfig+0xac>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d007      	beq.n	8003a64 <TIM_OC6_SetConfig+0x68>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a15      	ldr	r2, [pc, #84]	@ (8003aac <TIM_OC6_SetConfig+0xb0>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <TIM_OC6_SetConfig+0x68>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a14      	ldr	r2, [pc, #80]	@ (8003ab0 <TIM_OC6_SetConfig+0xb4>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d109      	bne.n	8003a78 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	4a13      	ldr	r2, [pc, #76]	@ (8003ab4 <TIM_OC6_SetConfig+0xb8>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	029b      	lsls	r3, r3, #10
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	697a      	ldr	r2, [r7, #20]
 8003a7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	68fa      	ldr	r2, [r7, #12]
 8003a82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685a      	ldr	r2, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	693a      	ldr	r2, [r7, #16]
 8003a90:	621a      	str	r2, [r3, #32]
}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	46bd      	mov	sp, r7
 8003a96:	b006      	add	sp, #24
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	46c0      	nop			@ (mov r8, r8)
 8003a9c:	ffefffff 	.word	0xffefffff
 8003aa0:	feff8fff 	.word	0xfeff8fff
 8003aa4:	ffdfffff 	.word	0xffdfffff
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	40014000 	.word	0x40014000
 8003ab0:	40014400 	.word	0x40014400
 8003ab4:	fffbffff 	.word	0xfffbffff

08003ab8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	223c      	movs	r2, #60	@ 0x3c
 8003ac6:	5c9b      	ldrb	r3, [r3, r2]
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e055      	b.n	8003b7c <HAL_TIMEx_MasterConfigSynchronization+0xc4>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	223c      	movs	r2, #60	@ 0x3c
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	223d      	movs	r2, #61	@ 0x3d
 8003adc:	2102      	movs	r1, #2
 8003ade:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a23      	ldr	r2, [pc, #140]	@ (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d108      	bne.n	8003b0c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	4a22      	ldr	r2, [pc, #136]	@ (8003b88 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2270      	movs	r2, #112	@ 0x70
 8003b10:	4393      	bics	r3, r2
 8003b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68fa      	ldr	r2, [r7, #12]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a16      	ldr	r2, [pc, #88]	@ (8003b84 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d00f      	beq.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	2380      	movs	r3, #128	@ 0x80
 8003b36:	05db      	lsls	r3, r3, #23
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d009      	beq.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a12      	ldr	r2, [pc, #72]	@ (8003b8c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d004      	beq.n	8003b50 <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a11      	ldr	r2, [pc, #68]	@ (8003b90 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d10c      	bne.n	8003b6a <HAL_TIMEx_MasterConfigSynchronization+0xb2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2280      	movs	r2, #128	@ 0x80
 8003b54:	4393      	bics	r3, r2
 8003b56:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	68ba      	ldr	r2, [r7, #8]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	223d      	movs	r2, #61	@ 0x3d
 8003b6e:	2101      	movs	r1, #1
 8003b70:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	223c      	movs	r2, #60	@ 0x3c
 8003b76:	2100      	movs	r1, #0
 8003b78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	0018      	movs	r0, r3
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b004      	add	sp, #16
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40012c00 	.word	0x40012c00
 8003b88:	ff0fffff 	.word	0xff0fffff
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40014000 	.word	0x40014000

08003b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e046      	b.n	8003c34 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2288      	movs	r2, #136	@ 0x88
 8003baa:	589b      	ldr	r3, [r3, r2]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d107      	bne.n	8003bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2284      	movs	r2, #132	@ 0x84
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7fc ffb4 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2288      	movs	r2, #136	@ 0x88
 8003bc4:	2124      	movs	r1, #36	@ 0x24
 8003bc6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	438a      	bics	r2, r1
 8003bd6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d003      	beq.n	8003be8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	0018      	movs	r0, r3
 8003be4:	f000 f9e6 	bl	8003fb4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	0018      	movs	r0, r3
 8003bec:	f000 f828 	bl	8003c40 <UART_SetConfig>
 8003bf0:	0003      	movs	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e01c      	b.n	8003c34 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	490d      	ldr	r1, [pc, #52]	@ (8003c3c <HAL_UART_Init+0xa8>)
 8003c06:	400a      	ands	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689a      	ldr	r2, [r3, #8]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	212a      	movs	r1, #42	@ 0x2a
 8003c16:	438a      	bics	r2, r1
 8003c18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2101      	movs	r1, #1
 8003c26:	430a      	orrs	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f000 fa75 	bl	800411c <UART_CheckIdleState>
 8003c32:	0003      	movs	r3, r0
}
 8003c34:	0018      	movs	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	b002      	add	sp, #8
 8003c3a:	bd80      	pop	{r7, pc}
 8003c3c:	ffffb7ff 	.word	0xffffb7ff

08003c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c40:	b5b0      	push	{r4, r5, r7, lr}
 8003c42:	b092      	sub	sp, #72	@ 0x48
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c48:	231f      	movs	r3, #31
 8003c4a:	2220      	movs	r2, #32
 8003c4c:	189b      	adds	r3, r3, r2
 8003c4e:	19db      	adds	r3, r3, r7
 8003c50:	2200      	movs	r2, #0
 8003c52:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4ac6      	ldr	r2, [pc, #792]	@ (8003f8c <UART_SetConfig+0x34c>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	0019      	movs	r1, r3
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c7e:	430b      	orrs	r3, r1
 8003c80:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	4ac1      	ldr	r2, [pc, #772]	@ (8003f90 <UART_SetConfig+0x350>)
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c90:	68d9      	ldr	r1, [r3, #12]
 8003c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	0003      	movs	r3, r0
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4abb      	ldr	r2, [pc, #748]	@ (8003f94 <UART_SetConfig+0x354>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d009      	beq.n	8003cc0 <UART_SetConfig+0x80>
 8003cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4ab9      	ldr	r2, [pc, #740]	@ (8003f98 <UART_SetConfig+0x358>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d004      	beq.n	8003cc0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb8:	6a1b      	ldr	r3, [r3, #32]
 8003cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	4ab5      	ldr	r2, [pc, #724]	@ (8003f9c <UART_SetConfig+0x35c>)
 8003cc8:	4013      	ands	r3, r2
 8003cca:	0019      	movs	r1, r3
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	220f      	movs	r2, #15
 8003cde:	4393      	bics	r3, r2
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	0003      	movs	r3, r0
 8003cec:	430b      	orrs	r3, r1
 8003cee:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4aaa      	ldr	r2, [pc, #680]	@ (8003fa0 <UART_SetConfig+0x360>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d102      	bne.n	8003d00 <UART_SetConfig+0xc0>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003cfe:	e02b      	b.n	8003d58 <UART_SetConfig+0x118>
 8003d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4aa7      	ldr	r2, [pc, #668]	@ (8003fa4 <UART_SetConfig+0x364>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d102      	bne.n	8003d10 <UART_SetConfig+0xd0>
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d0e:	e023      	b.n	8003d58 <UART_SetConfig+0x118>
 8003d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4aa4      	ldr	r2, [pc, #656]	@ (8003fa8 <UART_SetConfig+0x368>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d103      	bne.n	8003d22 <UART_SetConfig+0xe2>
 8003d1a:	2380      	movs	r3, #128	@ 0x80
 8003d1c:	025b      	lsls	r3, r3, #9
 8003d1e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d20:	e01a      	b.n	8003d58 <UART_SetConfig+0x118>
 8003d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4aa1      	ldr	r2, [pc, #644]	@ (8003fac <UART_SetConfig+0x36c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d103      	bne.n	8003d34 <UART_SetConfig+0xf4>
 8003d2c:	2380      	movs	r3, #128	@ 0x80
 8003d2e:	029b      	lsls	r3, r3, #10
 8003d30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d32:	e011      	b.n	8003d58 <UART_SetConfig+0x118>
 8003d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a96      	ldr	r2, [pc, #600]	@ (8003f94 <UART_SetConfig+0x354>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d102      	bne.n	8003d44 <UART_SetConfig+0x104>
 8003d3e:	2310      	movs	r3, #16
 8003d40:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d42:	e009      	b.n	8003d58 <UART_SetConfig+0x118>
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a93      	ldr	r2, [pc, #588]	@ (8003f98 <UART_SetConfig+0x358>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d102      	bne.n	8003d54 <UART_SetConfig+0x114>
 8003d4e:	2308      	movs	r3, #8
 8003d50:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d52:	e001      	b.n	8003d58 <UART_SetConfig+0x118>
 8003d54:	2300      	movs	r3, #0
 8003d56:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a8d      	ldr	r2, [pc, #564]	@ (8003f94 <UART_SetConfig+0x354>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d005      	beq.n	8003d6e <UART_SetConfig+0x12e>
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a8c      	ldr	r2, [pc, #560]	@ (8003f98 <UART_SetConfig+0x358>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d000      	beq.n	8003d6e <UART_SetConfig+0x12e>
 8003d6c:	e06f      	b.n	8003e4e <UART_SetConfig+0x20e>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003d6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7fe fba3 	bl	80024bc <HAL_RCCEx_GetPeriphCLKFreq>
 8003d76:	0003      	movs	r3, r0
 8003d78:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d100      	bne.n	8003d82 <UART_SetConfig+0x142>
 8003d80:	e0ec      	b.n	8003f5c <UART_SetConfig+0x31c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d86:	4b8a      	ldr	r3, [pc, #552]	@ (8003fb0 <UART_SetConfig+0x370>)
 8003d88:	0052      	lsls	r2, r2, #1
 8003d8a:	5ad3      	ldrh	r3, [r2, r3]
 8003d8c:	0019      	movs	r1, r3
 8003d8e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003d90:	f7fc f9ba 	bl	8000108 <__udivsi3>
 8003d94:	0003      	movs	r3, r0
 8003d96:	62fb      	str	r3, [r7, #44]	@ 0x2c

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	0013      	movs	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	189b      	adds	r3, r3, r2
 8003da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d305      	bcc.n	8003db4 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003dae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d906      	bls.n	8003dc2 <UART_SetConfig+0x182>
      {
        ret = HAL_ERROR;
 8003db4:	231f      	movs	r3, #31
 8003db6:	2220      	movs	r2, #32
 8003db8:	189b      	adds	r3, r3, r2
 8003dba:	19db      	adds	r3, r3, r7
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	701a      	strb	r2, [r3, #0]
 8003dc0:	e044      	b.n	8003e4c <UART_SetConfig+0x20c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc4:	61bb      	str	r3, [r7, #24]
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dce:	4b78      	ldr	r3, [pc, #480]	@ (8003fb0 <UART_SetConfig+0x370>)
 8003dd0:	0052      	lsls	r2, r2, #1
 8003dd2:	5ad3      	ldrh	r3, [r2, r3]
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	69b8      	ldr	r0, [r7, #24]
 8003de0:	69f9      	ldr	r1, [r7, #28]
 8003de2:	f7fc fb07 	bl	80003f4 <__aeabi_uldivmod>
 8003de6:	0002      	movs	r2, r0
 8003de8:	000b      	movs	r3, r1
 8003dea:	0e11      	lsrs	r1, r2, #24
 8003dec:	021d      	lsls	r5, r3, #8
 8003dee:	430d      	orrs	r5, r1
 8003df0:	0214      	lsls	r4, r2, #8
 8003df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	085b      	lsrs	r3, r3, #1
 8003df8:	60bb      	str	r3, [r7, #8]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	68b8      	ldr	r0, [r7, #8]
 8003e00:	68f9      	ldr	r1, [r7, #12]
 8003e02:	1900      	adds	r0, r0, r4
 8003e04:	4169      	adcs	r1, r5
 8003e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	607b      	str	r3, [r7, #4]
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f7fc faee 	bl	80003f4 <__aeabi_uldivmod>
 8003e18:	0002      	movs	r2, r0
 8003e1a:	000b      	movs	r3, r1
 8003e1c:	0013      	movs	r3, r2
 8003e1e:	637b      	str	r3, [r7, #52]	@ 0x34
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e22:	23c0      	movs	r3, #192	@ 0xc0
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d309      	bcc.n	8003e3e <UART_SetConfig+0x1fe>
 8003e2a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e2c:	2380      	movs	r3, #128	@ 0x80
 8003e2e:	035b      	lsls	r3, r3, #13
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d204      	bcs.n	8003e3e <UART_SetConfig+0x1fe>
        {
          huart->Instance->BRR = usartdiv;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e3a:	60da      	str	r2, [r3, #12]
 8003e3c:	e006      	b.n	8003e4c <UART_SetConfig+0x20c>
        }
        else
        {
          ret = HAL_ERROR;
 8003e3e:	231f      	movs	r3, #31
 8003e40:	2220      	movs	r2, #32
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	19db      	adds	r3, r3, r7
 8003e46:	2201      	movs	r2, #1
 8003e48:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8003e4a:	e087      	b.n	8003f5c <UART_SetConfig+0x31c>
 8003e4c:	e086      	b.n	8003f5c <UART_SetConfig+0x31c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e50:	69da      	ldr	r2, [r3, #28]
 8003e52:	2380      	movs	r3, #128	@ 0x80
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d14c      	bne.n	8003ef4 <UART_SetConfig+0x2b4>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f7fe fb2d 	bl	80024bc <HAL_RCCEx_GetPeriphCLKFreq>
 8003e62:	0003      	movs	r3, r0
 8003e64:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d100      	bne.n	8003e6e <UART_SetConfig+0x22e>
 8003e6c:	e076      	b.n	8003f5c <UART_SetConfig+0x31c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e72:	4b4f      	ldr	r3, [pc, #316]	@ (8003fb0 <UART_SetConfig+0x370>)
 8003e74:	0052      	lsls	r2, r2, #1
 8003e76:	5ad3      	ldrh	r3, [r2, r3]
 8003e78:	0019      	movs	r1, r3
 8003e7a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003e7c:	f7fc f944 	bl	8000108 <__udivsi3>
 8003e80:	0003      	movs	r3, r0
 8003e82:	005a      	lsls	r2, r3, #1
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	085b      	lsrs	r3, r3, #1
 8003e8a:	18d2      	adds	r2, r2, r3
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	0019      	movs	r1, r3
 8003e92:	0010      	movs	r0, r2
 8003e94:	f7fc f938 	bl	8000108 <__udivsi3>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e9e:	2b0f      	cmp	r3, #15
 8003ea0:	d921      	bls.n	8003ee6 <UART_SetConfig+0x2a6>
 8003ea2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ea4:	2380      	movs	r3, #128	@ 0x80
 8003ea6:	025b      	lsls	r3, r3, #9
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d21c      	bcs.n	8003ee6 <UART_SetConfig+0x2a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003eac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eae:	b29a      	uxth	r2, r3
 8003eb0:	2012      	movs	r0, #18
 8003eb2:	2420      	movs	r4, #32
 8003eb4:	1903      	adds	r3, r0, r4
 8003eb6:	19db      	adds	r3, r3, r7
 8003eb8:	210f      	movs	r1, #15
 8003eba:	438a      	bics	r2, r1
 8003ebc:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ec0:	085b      	lsrs	r3, r3, #1
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2207      	movs	r2, #7
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	b299      	uxth	r1, r3
 8003eca:	1903      	adds	r3, r0, r4
 8003ecc:	19db      	adds	r3, r3, r7
 8003ece:	1902      	adds	r2, r0, r4
 8003ed0:	19d2      	adds	r2, r2, r7
 8003ed2:	8812      	ldrh	r2, [r2, #0]
 8003ed4:	430a      	orrs	r2, r1
 8003ed6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	1902      	adds	r2, r0, r4
 8003ede:	19d2      	adds	r2, r2, r7
 8003ee0:	8812      	ldrh	r2, [r2, #0]
 8003ee2:	60da      	str	r2, [r3, #12]
 8003ee4:	e03a      	b.n	8003f5c <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ee6:	231f      	movs	r3, #31
 8003ee8:	2220      	movs	r2, #32
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	2201      	movs	r2, #1
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	e033      	b.n	8003f5c <UART_SetConfig+0x31c>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8003ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ef6:	0018      	movs	r0, r3
 8003ef8:	f7fe fae0 	bl	80024bc <HAL_RCCEx_GetPeriphCLKFreq>
 8003efc:	0003      	movs	r3, r0
 8003efe:	63bb      	str	r3, [r7, #56]	@ 0x38

    if (pclk != 0U)
 8003f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d02a      	beq.n	8003f5c <UART_SetConfig+0x31c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f0a:	4b29      	ldr	r3, [pc, #164]	@ (8003fb0 <UART_SetConfig+0x370>)
 8003f0c:	0052      	lsls	r2, r2, #1
 8003f0e:	5ad3      	ldrh	r3, [r2, r3]
 8003f10:	0019      	movs	r1, r3
 8003f12:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f14:	f7fc f8f8 	bl	8000108 <__udivsi3>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	001a      	movs	r2, r3
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	085b      	lsrs	r3, r3, #1
 8003f22:	18d2      	adds	r2, r2, r3
 8003f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	0019      	movs	r1, r3
 8003f2a:	0010      	movs	r0, r2
 8003f2c:	f7fc f8ec 	bl	8000108 <__udivsi3>
 8003f30:	0003      	movs	r3, r0
 8003f32:	637b      	str	r3, [r7, #52]	@ 0x34
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f36:	2b0f      	cmp	r3, #15
 8003f38:	d90a      	bls.n	8003f50 <UART_SetConfig+0x310>
 8003f3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f3c:	2380      	movs	r3, #128	@ 0x80
 8003f3e:	025b      	lsls	r3, r3, #9
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d205      	bcs.n	8003f50 <UART_SetConfig+0x310>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60da      	str	r2, [r3, #12]
 8003f4e:	e005      	b.n	8003f5c <UART_SetConfig+0x31c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f50:	231f      	movs	r3, #31
 8003f52:	2220      	movs	r2, #32
 8003f54:	189b      	adds	r3, r3, r2
 8003f56:	19db      	adds	r3, r3, r7
 8003f58:	2201      	movs	r2, #1
 8003f5a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5e:	226a      	movs	r2, #106	@ 0x6a
 8003f60:	2101      	movs	r1, #1
 8003f62:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	2268      	movs	r2, #104	@ 0x68
 8003f68:	2101      	movs	r1, #1
 8003f6a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f6e:	2200      	movs	r2, #0
 8003f70:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	2200      	movs	r2, #0
 8003f76:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003f78:	231f      	movs	r3, #31
 8003f7a:	2220      	movs	r2, #32
 8003f7c:	189b      	adds	r3, r3, r2
 8003f7e:	19db      	adds	r3, r3, r7
 8003f80:	781b      	ldrb	r3, [r3, #0]
}
 8003f82:	0018      	movs	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	b012      	add	sp, #72	@ 0x48
 8003f88:	bdb0      	pop	{r4, r5, r7, pc}
 8003f8a:	46c0      	nop			@ (mov r8, r8)
 8003f8c:	cfff69f3 	.word	0xcfff69f3
 8003f90:	ffffcfff 	.word	0xffffcfff
 8003f94:	40008000 	.word	0x40008000
 8003f98:	40008400 	.word	0x40008400
 8003f9c:	11fff4ff 	.word	0x11fff4ff
 8003fa0:	40013800 	.word	0x40013800
 8003fa4:	40004400 	.word	0x40004400
 8003fa8:	40004800 	.word	0x40004800
 8003fac:	40004c00 	.word	0x40004c00
 8003fb0:	080047e0 	.word	0x080047e0

08003fb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	2208      	movs	r2, #8
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	d00b      	beq.n	8003fde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	4a4a      	ldr	r2, [pc, #296]	@ (80040f8 <UART_AdvFeatureConfig+0x144>)
 8003fce:	4013      	ands	r3, r2
 8003fd0:	0019      	movs	r1, r3
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	4a43      	ldr	r2, [pc, #268]	@ (80040fc <UART_AdvFeatureConfig+0x148>)
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	0019      	movs	r1, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	430a      	orrs	r2, r1
 8003ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004004:	2202      	movs	r2, #2
 8004006:	4013      	ands	r3, r2
 8004008:	d00b      	beq.n	8004022 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	4a3b      	ldr	r2, [pc, #236]	@ (8004100 <UART_AdvFeatureConfig+0x14c>)
 8004012:	4013      	ands	r3, r2
 8004014:	0019      	movs	r1, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004026:	2204      	movs	r2, #4
 8004028:	4013      	ands	r3, r2
 800402a:	d00b      	beq.n	8004044 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4a34      	ldr	r2, [pc, #208]	@ (8004104 <UART_AdvFeatureConfig+0x150>)
 8004034:	4013      	ands	r3, r2
 8004036:	0019      	movs	r1, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004048:	2210      	movs	r2, #16
 800404a:	4013      	ands	r3, r2
 800404c:	d00b      	beq.n	8004066 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	4a2c      	ldr	r2, [pc, #176]	@ (8004108 <UART_AdvFeatureConfig+0x154>)
 8004056:	4013      	ands	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800406a:	2220      	movs	r2, #32
 800406c:	4013      	ands	r3, r2
 800406e:	d00b      	beq.n	8004088 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	4a25      	ldr	r2, [pc, #148]	@ (800410c <UART_AdvFeatureConfig+0x158>)
 8004078:	4013      	ands	r3, r2
 800407a:	0019      	movs	r1, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408c:	2240      	movs	r2, #64	@ 0x40
 800408e:	4013      	ands	r3, r2
 8004090:	d01d      	beq.n	80040ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a1d      	ldr	r2, [pc, #116]	@ (8004110 <UART_AdvFeatureConfig+0x15c>)
 800409a:	4013      	ands	r3, r2
 800409c:	0019      	movs	r1, r3
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040ae:	2380      	movs	r3, #128	@ 0x80
 80040b0:	035b      	lsls	r3, r3, #13
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d10b      	bne.n	80040ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	4a15      	ldr	r2, [pc, #84]	@ (8004114 <UART_AdvFeatureConfig+0x160>)
 80040be:	4013      	ands	r3, r2
 80040c0:	0019      	movs	r1, r3
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d2:	2280      	movs	r2, #128	@ 0x80
 80040d4:	4013      	ands	r3, r2
 80040d6:	d00b      	beq.n	80040f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4a0e      	ldr	r2, [pc, #56]	@ (8004118 <UART_AdvFeatureConfig+0x164>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	0019      	movs	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	605a      	str	r2, [r3, #4]
  }
}
 80040f0:	46c0      	nop			@ (mov r8, r8)
 80040f2:	46bd      	mov	sp, r7
 80040f4:	b002      	add	sp, #8
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	ffff7fff 	.word	0xffff7fff
 80040fc:	fffdffff 	.word	0xfffdffff
 8004100:	fffeffff 	.word	0xfffeffff
 8004104:	fffbffff 	.word	0xfffbffff
 8004108:	ffffefff 	.word	0xffffefff
 800410c:	ffffdfff 	.word	0xffffdfff
 8004110:	ffefffff 	.word	0xffefffff
 8004114:	ff9fffff 	.word	0xff9fffff
 8004118:	fff7ffff 	.word	0xfff7ffff

0800411c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b092      	sub	sp, #72	@ 0x48
 8004120:	af02      	add	r7, sp, #8
 8004122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2290      	movs	r2, #144	@ 0x90
 8004128:	2100      	movs	r1, #0
 800412a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800412c:	f7fc ff32 	bl	8000f94 <HAL_GetTick>
 8004130:	0003      	movs	r3, r0
 8004132:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2208      	movs	r2, #8
 800413c:	4013      	ands	r3, r2
 800413e:	2b08      	cmp	r3, #8
 8004140:	d12d      	bne.n	800419e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004142:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004144:	2280      	movs	r2, #128	@ 0x80
 8004146:	0391      	lsls	r1, r2, #14
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	4a47      	ldr	r2, [pc, #284]	@ (8004268 <UART_CheckIdleState+0x14c>)
 800414c:	9200      	str	r2, [sp, #0]
 800414e:	2200      	movs	r2, #0
 8004150:	f000 f88e 	bl	8004270 <UART_WaitOnFlagUntilTimeout>
 8004154:	1e03      	subs	r3, r0, #0
 8004156:	d022      	beq.n	800419e <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004158:	f3ef 8310 	mrs	r3, PRIMASK
 800415c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004162:	2301      	movs	r3, #1
 8004164:	62bb      	str	r3, [r7, #40]	@ 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004168:	f383 8810 	msr	PRIMASK, r3
}
 800416c:	46c0      	nop			@ (mov r8, r8)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2180      	movs	r1, #128	@ 0x80
 800417a:	438a      	bics	r2, r1
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004180:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004184:	f383 8810 	msr	PRIMASK, r3
}
 8004188:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2288      	movs	r2, #136	@ 0x88
 800418e:	2120      	movs	r1, #32
 8004190:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2284      	movs	r2, #132	@ 0x84
 8004196:	2100      	movs	r1, #0
 8004198:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e060      	b.n	8004260 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2204      	movs	r2, #4
 80041a6:	4013      	ands	r3, r2
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d146      	bne.n	800423a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ae:	2280      	movs	r2, #128	@ 0x80
 80041b0:	03d1      	lsls	r1, r2, #15
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004268 <UART_CheckIdleState+0x14c>)
 80041b6:	9200      	str	r2, [sp, #0]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f000 f859 	bl	8004270 <UART_WaitOnFlagUntilTimeout>
 80041be:	1e03      	subs	r3, r0, #0
 80041c0:	d03b      	beq.n	800423a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041c2:	f3ef 8310 	mrs	r3, PRIMASK
 80041c6:	60fb      	str	r3, [r7, #12]
  return(result);
 80041c8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80041cc:	2301      	movs	r3, #1
 80041ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f383 8810 	msr	PRIMASK, r3
}
 80041d6:	46c0      	nop			@ (mov r8, r8)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4922      	ldr	r1, [pc, #136]	@ (800426c <UART_CheckIdleState+0x150>)
 80041e4:	400a      	ands	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f383 8810 	msr	PRIMASK, r3
}
 80041f2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041f4:	f3ef 8310 	mrs	r3, PRIMASK
 80041f8:	61bb      	str	r3, [r7, #24]
  return(result);
 80041fa:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80041fe:	2301      	movs	r3, #1
 8004200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	f383 8810 	msr	PRIMASK, r3
}
 8004208:	46c0      	nop			@ (mov r8, r8)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2101      	movs	r1, #1
 8004216:	438a      	bics	r2, r1
 8004218:	609a      	str	r2, [r3, #8]
 800421a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800421c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800421e:	6a3b      	ldr	r3, [r7, #32]
 8004220:	f383 8810 	msr	PRIMASK, r3
}
 8004224:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	228c      	movs	r2, #140	@ 0x8c
 800422a:	2120      	movs	r1, #32
 800422c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2284      	movs	r2, #132	@ 0x84
 8004232:	2100      	movs	r1, #0
 8004234:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e012      	b.n	8004260 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2288      	movs	r2, #136	@ 0x88
 800423e:	2120      	movs	r1, #32
 8004240:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	228c      	movs	r2, #140	@ 0x8c
 8004246:	2120      	movs	r1, #32
 8004248:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2284      	movs	r2, #132	@ 0x84
 800425a:	2100      	movs	r1, #0
 800425c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	0018      	movs	r0, r3
 8004262:	46bd      	mov	sp, r7
 8004264:	b010      	add	sp, #64	@ 0x40
 8004266:	bd80      	pop	{r7, pc}
 8004268:	01ffffff 	.word	0x01ffffff
 800426c:	fffffedf 	.word	0xfffffedf

08004270 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	1dfb      	adds	r3, r7, #7
 800427e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004280:	e051      	b.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	3301      	adds	r3, #1
 8004286:	d04e      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004288:	f7fc fe84 	bl	8000f94 <HAL_GetTick>
 800428c:	0002      	movs	r2, r0
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	69ba      	ldr	r2, [r7, #24]
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e051      	b.n	8004346 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2204      	movs	r2, #4
 80042aa:	4013      	ands	r3, r2
 80042ac:	d03b      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb6>
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	2b80      	cmp	r3, #128	@ 0x80
 80042b2:	d038      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb6>
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	2b40      	cmp	r3, #64	@ 0x40
 80042b8:	d035      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	2208      	movs	r2, #8
 80042c2:	4013      	ands	r3, r2
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d111      	bne.n	80042ec <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2208      	movs	r2, #8
 80042ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	0018      	movs	r0, r3
 80042d4:	f000 f83c 	bl	8004350 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2290      	movs	r2, #144	@ 0x90
 80042dc:	2108      	movs	r1, #8
 80042de:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2284      	movs	r2, #132	@ 0x84
 80042e4:	2100      	movs	r1, #0
 80042e6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e02c      	b.n	8004346 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	69da      	ldr	r2, [r3, #28]
 80042f2:	2380      	movs	r3, #128	@ 0x80
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	401a      	ands	r2, r3
 80042f8:	2380      	movs	r3, #128	@ 0x80
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d112      	bne.n	8004326 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2280      	movs	r2, #128	@ 0x80
 8004306:	0112      	lsls	r2, r2, #4
 8004308:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	0018      	movs	r0, r3
 800430e:	f000 f81f 	bl	8004350 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2290      	movs	r2, #144	@ 0x90
 8004316:	2120      	movs	r1, #32
 8004318:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2284      	movs	r2, #132	@ 0x84
 800431e:	2100      	movs	r1, #0
 8004320:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e00f      	b.n	8004346 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69db      	ldr	r3, [r3, #28]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	4013      	ands	r3, r2
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	425a      	negs	r2, r3
 8004336:	4153      	adcs	r3, r2
 8004338:	b2db      	uxtb	r3, r3
 800433a:	001a      	movs	r2, r3
 800433c:	1dfb      	adds	r3, r7, #7
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d09e      	beq.n	8004282 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	0018      	movs	r0, r3
 8004348:	46bd      	mov	sp, r7
 800434a:	b004      	add	sp, #16
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08e      	sub	sp, #56	@ 0x38
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004358:	f3ef 8310 	mrs	r3, PRIMASK
 800435c:	617b      	str	r3, [r7, #20]
  return(result);
 800435e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004360:	637b      	str	r3, [r7, #52]	@ 0x34
 8004362:	2301      	movs	r3, #1
 8004364:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	f383 8810 	msr	PRIMASK, r3
}
 800436c:	46c0      	nop			@ (mov r8, r8)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4926      	ldr	r1, [pc, #152]	@ (8004414 <UART_EndRxTransfer+0xc4>)
 800437a:	400a      	ands	r2, r1
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004380:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800438a:	f3ef 8310 	mrs	r3, PRIMASK
 800438e:	623b      	str	r3, [r7, #32]
  return(result);
 8004390:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004392:	633b      	str	r3, [r7, #48]	@ 0x30
 8004394:	2301      	movs	r3, #1
 8004396:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	f383 8810 	msr	PRIMASK, r3
}
 800439e:	46c0      	nop			@ (mov r8, r8)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	491b      	ldr	r1, [pc, #108]	@ (8004418 <UART_EndRxTransfer+0xc8>)
 80043ac:	400a      	ands	r2, r1
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b6:	f383 8810 	msr	PRIMASK, r3
}
 80043ba:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d118      	bne.n	80043f6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043c4:	f3ef 8310 	mrs	r3, PRIMASK
 80043c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80043ca:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ce:	2301      	movs	r3, #1
 80043d0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f383 8810 	msr	PRIMASK, r3
}
 80043d8:	46c0      	nop			@ (mov r8, r8)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2110      	movs	r1, #16
 80043e6:	438a      	bics	r2, r1
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f383 8810 	msr	PRIMASK, r3
}
 80043f4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	228c      	movs	r2, #140	@ 0x8c
 80043fa:	2120      	movs	r1, #32
 80043fc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2200      	movs	r2, #0
 8004402:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b00e      	add	sp, #56	@ 0x38
 8004410:	bd80      	pop	{r7, pc}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	fffffedf 	.word	0xfffffedf
 8004418:	effffffe 	.word	0xeffffffe

0800441c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2284      	movs	r2, #132	@ 0x84
 8004428:	5c9b      	ldrb	r3, [r3, r2]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_UARTEx_DisableFifoMode+0x16>
 800442e:	2302      	movs	r3, #2
 8004430:	e027      	b.n	8004482 <HAL_UARTEx_DisableFifoMode+0x66>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2284      	movs	r2, #132	@ 0x84
 8004436:	2101      	movs	r1, #1
 8004438:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2288      	movs	r2, #136	@ 0x88
 800443e:	2124      	movs	r1, #36	@ 0x24
 8004440:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	2101      	movs	r1, #1
 8004456:	438a      	bics	r2, r1
 8004458:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	4a0b      	ldr	r2, [pc, #44]	@ (800448c <HAL_UARTEx_DisableFifoMode+0x70>)
 800445e:	4013      	ands	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2288      	movs	r2, #136	@ 0x88
 8004474:	2120      	movs	r1, #32
 8004476:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2284      	movs	r2, #132	@ 0x84
 800447c:	2100      	movs	r1, #0
 800447e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	0018      	movs	r0, r3
 8004484:	46bd      	mov	sp, r7
 8004486:	b004      	add	sp, #16
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			@ (mov r8, r8)
 800448c:	dfffffff 	.word	0xdfffffff

08004490 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2284      	movs	r2, #132	@ 0x84
 800449e:	5c9b      	ldrb	r3, [r3, r2]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d101      	bne.n	80044a8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044a4:	2302      	movs	r3, #2
 80044a6:	e02e      	b.n	8004506 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2284      	movs	r2, #132	@ 0x84
 80044ac:	2101      	movs	r1, #1
 80044ae:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2288      	movs	r2, #136	@ 0x88
 80044b4:	2124      	movs	r1, #36	@ 0x24
 80044b6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2101      	movs	r1, #1
 80044cc:	438a      	bics	r2, r1
 80044ce:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	00db      	lsls	r3, r3, #3
 80044d8:	08d9      	lsrs	r1, r3, #3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	0018      	movs	r0, r3
 80044e8:	f000 f854 	bl	8004594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2288      	movs	r2, #136	@ 0x88
 80044f8:	2120      	movs	r1, #32
 80044fa:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2284      	movs	r2, #132	@ 0x84
 8004500:	2100      	movs	r1, #0
 8004502:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004504:	2300      	movs	r3, #0
}
 8004506:	0018      	movs	r0, r3
 8004508:	46bd      	mov	sp, r7
 800450a:	b004      	add	sp, #16
 800450c:	bd80      	pop	{r7, pc}
	...

08004510 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2284      	movs	r2, #132	@ 0x84
 800451e:	5c9b      	ldrb	r3, [r3, r2]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004524:	2302      	movs	r3, #2
 8004526:	e02f      	b.n	8004588 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2284      	movs	r2, #132	@ 0x84
 800452c:	2101      	movs	r1, #1
 800452e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2288      	movs	r2, #136	@ 0x88
 8004534:	2124      	movs	r1, #36	@ 0x24
 8004536:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2101      	movs	r1, #1
 800454c:	438a      	bics	r2, r1
 800454e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	4a0e      	ldr	r2, [pc, #56]	@ (8004590 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004558:	4013      	ands	r3, r2
 800455a:	0019      	movs	r1, r3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	430a      	orrs	r2, r1
 8004564:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	0018      	movs	r0, r3
 800456a:	f000 f813 	bl	8004594 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2288      	movs	r2, #136	@ 0x88
 800457a:	2120      	movs	r1, #32
 800457c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2284      	movs	r2, #132	@ 0x84
 8004582:	2100      	movs	r1, #0
 8004584:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	0018      	movs	r0, r3
 800458a:	46bd      	mov	sp, r7
 800458c:	b004      	add	sp, #16
 800458e:	bd80      	pop	{r7, pc}
 8004590:	f1ffffff 	.word	0xf1ffffff

08004594 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004594:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d108      	bne.n	80045b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	226a      	movs	r2, #106	@ 0x6a
 80045a8:	2101      	movs	r1, #1
 80045aa:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2268      	movs	r2, #104	@ 0x68
 80045b0:	2101      	movs	r1, #1
 80045b2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045b4:	e043      	b.n	800463e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045b6:	260f      	movs	r6, #15
 80045b8:	19bb      	adds	r3, r7, r6
 80045ba:	2208      	movs	r2, #8
 80045bc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045be:	200e      	movs	r0, #14
 80045c0:	183b      	adds	r3, r7, r0
 80045c2:	2208      	movs	r2, #8
 80045c4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	0e5b      	lsrs	r3, r3, #25
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	240d      	movs	r4, #13
 80045d2:	193b      	adds	r3, r7, r4
 80045d4:	2107      	movs	r1, #7
 80045d6:	400a      	ands	r2, r1
 80045d8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	0f5b      	lsrs	r3, r3, #29
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	250c      	movs	r5, #12
 80045e6:	197b      	adds	r3, r7, r5
 80045e8:	2107      	movs	r1, #7
 80045ea:	400a      	ands	r2, r1
 80045ec:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045ee:	183b      	adds	r3, r7, r0
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	197a      	adds	r2, r7, r5
 80045f4:	7812      	ldrb	r2, [r2, #0]
 80045f6:	4914      	ldr	r1, [pc, #80]	@ (8004648 <UARTEx_SetNbDataToProcess+0xb4>)
 80045f8:	5c8a      	ldrb	r2, [r1, r2]
 80045fa:	435a      	muls	r2, r3
 80045fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80045fe:	197b      	adds	r3, r7, r5
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	4a12      	ldr	r2, [pc, #72]	@ (800464c <UARTEx_SetNbDataToProcess+0xb8>)
 8004604:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004606:	0019      	movs	r1, r3
 8004608:	f7fb fe08 	bl	800021c <__divsi3>
 800460c:	0003      	movs	r3, r0
 800460e:	b299      	uxth	r1, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	226a      	movs	r2, #106	@ 0x6a
 8004614:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004616:	19bb      	adds	r3, r7, r6
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	193a      	adds	r2, r7, r4
 800461c:	7812      	ldrb	r2, [r2, #0]
 800461e:	490a      	ldr	r1, [pc, #40]	@ (8004648 <UARTEx_SetNbDataToProcess+0xb4>)
 8004620:	5c8a      	ldrb	r2, [r1, r2]
 8004622:	435a      	muls	r2, r3
 8004624:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004626:	193b      	adds	r3, r7, r4
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	4a08      	ldr	r2, [pc, #32]	@ (800464c <UARTEx_SetNbDataToProcess+0xb8>)
 800462c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800462e:	0019      	movs	r1, r3
 8004630:	f7fb fdf4 	bl	800021c <__divsi3>
 8004634:	0003      	movs	r3, r0
 8004636:	b299      	uxth	r1, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2268      	movs	r2, #104	@ 0x68
 800463c:	5299      	strh	r1, [r3, r2]
}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	46bd      	mov	sp, r7
 8004642:	b005      	add	sp, #20
 8004644:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	080047f8 	.word	0x080047f8
 800464c:	08004800 	.word	0x08004800

08004650 <memset>:
 8004650:	0003      	movs	r3, r0
 8004652:	1882      	adds	r2, r0, r2
 8004654:	4293      	cmp	r3, r2
 8004656:	d100      	bne.n	800465a <memset+0xa>
 8004658:	4770      	bx	lr
 800465a:	7019      	strb	r1, [r3, #0]
 800465c:	3301      	adds	r3, #1
 800465e:	e7f9      	b.n	8004654 <memset+0x4>

08004660 <__libc_init_array>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	2600      	movs	r6, #0
 8004664:	4c0c      	ldr	r4, [pc, #48]	@ (8004698 <__libc_init_array+0x38>)
 8004666:	4d0d      	ldr	r5, [pc, #52]	@ (800469c <__libc_init_array+0x3c>)
 8004668:	1b64      	subs	r4, r4, r5
 800466a:	10a4      	asrs	r4, r4, #2
 800466c:	42a6      	cmp	r6, r4
 800466e:	d109      	bne.n	8004684 <__libc_init_array+0x24>
 8004670:	2600      	movs	r6, #0
 8004672:	f000 f819 	bl	80046a8 <_init>
 8004676:	4c0a      	ldr	r4, [pc, #40]	@ (80046a0 <__libc_init_array+0x40>)
 8004678:	4d0a      	ldr	r5, [pc, #40]	@ (80046a4 <__libc_init_array+0x44>)
 800467a:	1b64      	subs	r4, r4, r5
 800467c:	10a4      	asrs	r4, r4, #2
 800467e:	42a6      	cmp	r6, r4
 8004680:	d105      	bne.n	800468e <__libc_init_array+0x2e>
 8004682:	bd70      	pop	{r4, r5, r6, pc}
 8004684:	00b3      	lsls	r3, r6, #2
 8004686:	58eb      	ldr	r3, [r5, r3]
 8004688:	4798      	blx	r3
 800468a:	3601      	adds	r6, #1
 800468c:	e7ee      	b.n	800466c <__libc_init_array+0xc>
 800468e:	00b3      	lsls	r3, r6, #2
 8004690:	58eb      	ldr	r3, [r5, r3]
 8004692:	4798      	blx	r3
 8004694:	3601      	adds	r6, #1
 8004696:	e7f2      	b.n	800467e <__libc_init_array+0x1e>
 8004698:	08004810 	.word	0x08004810
 800469c:	08004810 	.word	0x08004810
 80046a0:	08004814 	.word	0x08004814
 80046a4:	08004810 	.word	0x08004810

080046a8 <_init>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	46c0      	nop			@ (mov r8, r8)
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr

080046b4 <_fini>:
 80046b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046b6:	46c0      	nop			@ (mov r8, r8)
 80046b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ba:	bc08      	pop	{r3}
 80046bc:	469e      	mov	lr, r3
 80046be:	4770      	bx	lr
